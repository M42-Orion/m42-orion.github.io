<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hello world</title>
    <url>/m42-orion/2022/04/23/hello-world/</url>
    <content><![CDATA[<h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#FileName: HelloWorld.java  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>   #如果有 <span class="keyword">public</span> 类的话，类名必须和文件同名，注意大小写  </span><br><span class="line">&#123;  </span><br><span class="line">  #Java 入口程序，程序从此入口  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  </span><br><span class="line">  &#123;  </span><br><span class="line">  #向控制台打印一条语句  </span><br><span class="line">    System.out.println(<span class="string">&quot;Hello,World!&quot;</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>                <span class="meta">#main 入口函数  </span></span><br><span class="line">&#123;  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello,World!&quot;</span>); <span class="meta">#printf 函数打印  </span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;               #函数返回值  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>               <span class="comment">//std::cout 要用到的头文件  </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>                <span class="comment">//标准输入输出头文件  </span></span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello,World!--Way 1\n&quot;</span>);    <span class="comment">//printf 语句打印  </span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Hello,World!--Way 2&quot;</span>);        <span class="comment">//puts 语句  </span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Hello,&quot;</span> <span class="string">&quot; &quot;</span> <span class="string">&quot;World!--Way 3&quot;</span>); <span class="comment">//字符串拼接  </span></span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;Hello,World!--Way 4&quot;</span> &lt;&lt; std::endl; <span class="comment">//C++ 教科书上写法  </span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;                                        <span class="comment">//作为注释  </span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello,World!&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;  </span><br><span class="line">&lt;body&gt;  </span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Hello,World!&quot;</span>;            <span class="comment">//打印语句  </span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;The first php program!&quot;</span>;  <span class="comment">//打印语句  </span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">phpinfo</span>();                 <span class="comment">//phpinfo()系统函数,输出环境信息  </span></span><br><span class="line"><span class="meta">?&gt;</span>  </span><br><span class="line">&lt;/body&gt;  </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sys.<span class="title function_">puts</span>(<span class="string">&quot;Hello,World!&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;Hello,World!&#x27;</span> <span class="keyword">from</span> dual;  </span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is the first program!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello,World!<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python代码片段(vscode)</title>
    <url>/m42-orion/2022/04/23/python%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5-vscode/</url>
    <content><![CDATA[<p>在最新的vscode的python插件更新后，不提供代码片段的功能，因此要自己手添加用户代码片段。使用方法如下：</p>
<ul>
<li>复制下方给出的代码片段</li>
<li>打开vscode</li>
<li>左下角设置-&gt;用户代码片段-&gt;python.json</li>
<li>全部删掉后替换成刚刚复制的内容</li>
</ul>
<p>再次使用后vscode提供代码片段联想功能,输入部分代码后可提供多种代码格式,如下图：<br><img src="https://liu__tao.gitee.io/drawing-bed/blog_img/python%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5(vscode)/1.png" alt="1"><br><img src="https://liu__tao.gitee.io/drawing-bed/blog_img/python%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5(vscode)/2.png" alt="2"></p>
<p>可根据代码片段书写格式自定义代码片段。<br>代码片段如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="comment">// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and </span></span><br><span class="line">	<span class="comment">// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</span></span><br><span class="line">	<span class="comment">// $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. Placeholders with the </span></span><br><span class="line">	<span class="comment">// same ids are connected.</span></span><br><span class="line">	<span class="comment">// Example:</span></span><br><span class="line">	<span class="comment">// &quot;Print to console&quot;: &#123;</span></span><br><span class="line">	<span class="comment">// 	&quot;prefix&quot;: &quot;log&quot;,</span></span><br><span class="line">	<span class="comment">// 	&quot;body&quot;: [</span></span><br><span class="line">	<span class="comment">// 		&quot;console.log(&#x27;$1&#x27;);&quot;,</span></span><br><span class="line">	<span class="comment">// 		&quot;$2&quot;</span></span><br><span class="line">	<span class="comment">// 	],</span></span><br><span class="line">	<span class="comment">// 	&quot;description&quot;: &quot;Log output to console&quot;</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line">	<span class="attr">&quot;HEADER&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HEADER&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;#!/usr/bin/env python&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;# -*- encoding: utf-8 -*-&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&#x27;&#x27;&#x27;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;@文件    :$TM_FILENAME&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;@说明    :&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;@时间    :$CURRENT_YEAR/$CURRENT_MONTH/$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;@作者    :ljw&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;@版本    :1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&#x27;&#x27;&#x27;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;$0&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;if&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;if&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;if $&#123;1:expression&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;2:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for an if statement&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;if/else&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;if/else&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;if $&#123;1:condition&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;2:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;else:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for an if statement with else&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;elif&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;elif&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;elif $&#123;1:expression&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;2:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for an elif&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;else&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;else&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;else:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;1:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for an else&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;while&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;while&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;while $&#123;1:expression&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;2:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a while loop&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;while/else&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;while/else&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;while $&#123;1:expression&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;2:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;else:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a while loop with else&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;for&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;for&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;for $&#123;1:target_list&#125; in $&#123;2:expression_list&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a for loop&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;for/else&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;for/else&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;for $&#123;1:target_list&#125; in $&#123;2:expression_list&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;else:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;4:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a for loop with else&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;try/except&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;try/except&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;try:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;1:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;except $&#123;2:expression&#125; as $&#123;3:identifier&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;4:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a try/except statement&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;try/finally&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;try/finally&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;try:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;1:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;finally:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;2:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a try/finally statement&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;try/except/else&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;try/except/else&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;try:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;1:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;except $&#123;2:expression&#125; as $&#123;3:identifier&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;4:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;else:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;5:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a try/except/else statement&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;try/except/finally&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;try/except/finally&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;try:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;1:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;except $&#123;2:expression&#125; as $&#123;3:identifier&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;4:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;finally:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;5:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a try/except/finally statement&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;try/except/else/finally&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;try/except/else/finally&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;try:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;1:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;except $&#123;2:expression&#125; as $&#123;3:identifier&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;4:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;else:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;5:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;finally:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;6:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a try/except/else/finally statement&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;with&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;with&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;with $&#123;1:expression&#125; as $&#123;2:target&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a with statement&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;def&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;def&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;def $&#123;1:funcname&#125;($&#123;2:parameter_list&#125;):&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t\&quot;\&quot;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:docstring&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t\&quot;\&quot;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;4:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a function definition&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;def(class method)&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;def(class method)&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;def $&#123;1:funcname&#125;(self, $&#123;2:parameter_list&#125;):&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t\&quot;\&quot;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:docstring&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t\&quot;\&quot;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;4:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a class method&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;def(static class method)&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;def(static class method)&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;@staticmethod&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;def $&#123;1:funcname&#125;($&#123;2:parameter_list&#125;):&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t\&quot;\&quot;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:docstring&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t\&quot;\&quot;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;4:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a static class method&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;def(abstract class method)&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;def(abstract class method)&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;def $&#123;1:funcname&#125;(self, $&#123;2:parameter_list&#125;):&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t\&quot;\&quot;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:docstring&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t\&quot;\&quot;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\traise NotImplementedError&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for an abstract class method&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;class&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;class $&#123;1:classname&#125;($&#123;2:object&#125;):&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t\&quot;\&quot;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:docstring&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t\&quot;\&quot;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;4:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a class definition&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;lambda&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lambda&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;lambda $&#123;1:parameter_list&#125;: $&#123;2:expression&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a lambda statement&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;if(main)&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;__main__&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;if __name__ == \&quot;__main__\&quot;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;    $&#123;1:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a `if __name__ == \&quot;__main__\&quot;: ...` block&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;async/def&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;async/def&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;async def $&#123;1:funcname&#125;($&#123;2:parameter_list&#125;):&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for an async statement&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;async/for&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;async/for&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;async for $&#123;1:target&#125; in $&#123;2:iter&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:block&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for an async for statement&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;async/for/else&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;async/for/else&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;async for $&#123;1:target&#125; in $&#123;2:iter&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:block&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;else:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;4:block&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for an async for statement with else&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;async/with&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;async/with&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;async with $&#123;1:expr&#125; as $&#123;2:var&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:block&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for an async with statement&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;ipdb&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ipdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;import ipdb; ipdb.set_trace()&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for ipdb debug&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;pdb&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;import pdb; pdb.set_trace()&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for pdb debug&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;pudb&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pudb&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;import pudb; pudb.set_trace()&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for pudb debug&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;add/new/cell&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;add/new/cell&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;# %%&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet to add a new cell&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;mark/markdown&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mark/markdown&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;# %% [markdown]&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet to add a new markdown cell&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>python之__init__.py</title>
    <url>/m42-orion/2022/04/28/python%E4%B9%8B-init-py/</url>
    <content><![CDATA[<h2 id="神奇的-init"><a href="#神奇的-init" class="headerlink" title="神奇的__init__"></a>神奇的__init__</h2><p>__init__一般在两种情况下会出现，第一种是以在class（类）当中以函数形式出现，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br></pre></td></tr></table></figure>

<p>第二种情况则是以__init__.py文件的形式出现在文件夹下。两种不同的情况虽然使用了相同名字的定义，但是其作用可以说类似又可以说不同。</p>
<h2 id="def-init-self"><a href="#def-init-self" class="headerlink" title="def __init__(self)"></a><code>def __init__(self)</code></h2><p>__init__属于魔法函数的一种,之所以说是一种其原因是因为魔法函数是一个大家族，常见的：<code>__ str__()、__ new__()、__ unicode__()、__ call__()、__ len__()、__repr__()</code>等等都是魔法函数，</p>
<h3 id="什么是魔法函数？"><a href="#什么是魔法函数？" class="headerlink" title="什么是魔法函数？"></a>什么是魔法函数？</h3><p>魔法函数一种python的高级用法，一般情况下不是很常见，魔法函数允许使用者在定义类的时候将其绑定在其中，一般格式以两个下划线开始并以两个下划线结束。以<code>__init__</code>为例，该函数允许在实例化类的时候给变量申请内存空间并赋予初始值，有时候我们会将其称之为构造函数。</p>
<p>魔法函数具有以下特点：  </p>
<ul>
<li>Python中以双下划线(<strong>xx</strong>)开始和结束的函数（不可自己定义）为魔法函数。</li>
<li>调用类实例化的对象的方法时自动调用魔法函数。</li>
<li>在自己定义的类中，可以实现之前的内置函数。</li>
</ul>
<h3 id="init-是什么？"><a href="#init-是什么？" class="headerlink" title="__init__是什么？"></a><code>__init__</code>是什么？</h3><p><code>__init__</code>函数存在于class当中，可以包含多个参数，但是必须有一个self作为参数，<code>__init__</code>的存在使得函数在初始化的时候就能够给对象当中的参数进行初始化并赋值，在初始化的时候程序会自动调用该函数，于此同事，如果设置了<code>__init__</code>的参数，在实例化的时候如果不给定参数也是错误的。当然，<code>__init__</code>也是作为类的私有函数存在，所以在实例化之后是无法被外部调用的。</p>
<h2 id="init-py"><a href="#init-py" class="headerlink" title="__init__.py"></a><code>__init__.py</code></h2><p><code>__init__</code>函数可以当中构造函数来理解，但是<code>__init__.py</code>却不是那么容易理解。</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>常见的说法会将其描述成为：<code>__init__.py</code> 文件的作用是将文件夹变为一个Python模块,Python 中的每个模块的包中，都有<code>__init__.py</code> 文件。  </p>
<hr>
<p>但是直接跳到python模块上来，这样的理解未免太过于快了，以至于很多人不能够理解。因此我打算在这里只说用法方便于理解。</p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>假设现在有这样一个目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">│</span><br><span class="line">├─model</span><br><span class="line">│      info.py   </span><br><span class="line">│</span><br><span class="line">test.py</span><br></pre></td></tr></table></figure>

<p>现在model.py文件当中的代码是这样的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">param</span>):</span><br><span class="line">    <span class="keyword">return</span> param</span><br></pre></td></tr></table></figure>

<p>那么问题来了，我们该怎么去调用model.py文件当中的变量？  </p>
<hr>
<p>以前的方法是<code>from model.model import * </code>,但是如果，下面不止这一个文件呢？万一这个目录下有很多个文件呢？我们再去一个个去调用，未免太过于难受了。<br>但是如果我们在model目录下添加一个<code>__init__.py</code>文件，在文件当中写入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .info <span class="keyword">import</span> test</span><br><span class="line"></span><br><span class="line">test = test</span><br></pre></td></tr></table></figure>

<p>然后在<code>test.py</code>文件当中写入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> model</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(model.test(<span class="string">&#x27;a&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>这样就能够直接调用了。发现端倪了吗？这里我们使用的就是<code>import model</code>,没有指定那一个文件啊，按照一般的想法不应该是<code>import model.__init__</code>吗？<br>这就是所谓的将文件夹变成一个模块的含义，<code>__init__.py</code>文件的存在能够管理该文件夹下面的所有文件，并且通过<code>__init__.py</code>文件导入的形式，在调用文件夹的时候自动调用<code>__init__.py</code>文件下管理文件当中的对象。但是这样的做法有什么含义？用处在于什么？用其他文件不能实现吗？</p>
<hr>
<p>首先，这样能够更加有效的管理文件夹下面的文件，对于使用者来说能够将文件夹当作一个封闭的包使用，不用担心导入存在的路径问题，在封装跟打包的时候也能够保证调用的可靠性。当然其他随便写个文件也能够实现类似的功能，但是使用起来完全没有<code>__init__.py</code>文件方便，并且可能存在未知的导入出错问题。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode离线远程开发配置</title>
    <url>/m42-orion/2022/04/25/vscode%E7%A6%BB%E7%BA%BF%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>由于各种原因，在开发过程当中需要做到网络的物理隔绝，因此离线部署环境或者部署开发工具就成为了面临的重大难题，尤其是当需要配置vscode离线远程开发的时候。当然使用pycharm可能不需要这么麻烦，但是个人习惯导致自己觉得vscode更加顺手，同时也更加美观，在后续的vscode更新当中丰富的插件也让我难以割舍，因此配置离线环境下vscode的远程安装就成了一大难题。  </p>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="下载VScode"><a href="#下载VScode" class="headerlink" title="下载VScode"></a>下载VScode</h3><p>首先在Vscode官网：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a> 点击下载；在浏览器或者下载软件中就可以看到一个下载地址如下图所示，由于国内下载速度非常缓慢，可以将图中红框内的链接部分：az764295.vo.msecnd.net替换为国内镜像：vscode.cdn.azure.cn来提升下载速度。</p>
<h3 id="插件下载与安装"><a href="#插件下载与安装" class="headerlink" title="插件下载与安装"></a>插件下载与安装</h3><p>在插件商店搜索插件，直接点击这里就能跳转到插件的页面上去，页面上提供离线包的下载，直接下载就行。<br><img src="https://liu__tao.gitee.io/drawing-bed/blog_img/vscode%E7%A6%BB%E7%BA%BF%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE/%E7%82%B9%E5%87%BB.png" alt="点击"></p>
<blockquote>
<p><strong>注意：</strong>插件伴随着vscode版本的更新而更新，因此需要注意版本的对应关系。</p>
</blockquote>
<h3 id="插件的离线安装"><a href="#插件的离线安装" class="headerlink" title="插件的离线安装"></a>插件的离线安装</h3><p>离线安装如下，选中安装包即可<br><img src="https://liu__tao.gitee.io/drawing-bed/blog_img/vscode%E7%A6%BB%E7%BA%BF%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE/%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85.png" alt="离线安装"></p>
<h3 id="配置远程开发环境"><a href="#配置远程开发环境" class="headerlink" title="配置远程开发环境"></a>配置远程开发环境</h3><p>在离线状态下，除了需要下载<code>remote-ssh</code>跟<code>Remote - SSH: Editing Configuration Files</code>两个插件以外，还需要下载远程包。即所需依赖包vscode-server-linux-x64.tar.gz，下载链接为：<br><a href="https://update.code.visualstudio.com/commit:[id]/server-linux-x64/stable">https://update.code.visualstudio.com/commit:[id]/server-linux-x64/stable</a><br>其中[id]用所使用的vscode commit ID进行替换，id在帮助-&gt;关于-&gt;提交，则完整下载链接应为如下案例：<br><a href="https://update.code.visualstudio.com/commit:507ce72a4466fbb27b715c3722558bb15afa9f48/server-linux-x64/stable">https://update.code.visualstudio.com/commit:507ce72a4466fbb27b715c3722558bb15afa9f48/server-linux-x64/stable</a></p>
<h3 id="远程配置"><a href="#远程配置" class="headerlink" title="远程配置"></a>远程配置</h3><ul>
<li><p>将下载好的依赖包复制到远程linux服务器用户目录下；</p>
</li>
<li><p>登录linux服务器，在用户目录下执行以下命令：</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> .vscode-server</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> .vscode-server</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">mv</span> ~/vscode-server-linux-x64.tar.gz bin/</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> bin</span><br><span class="line"></span><br><span class="line">tar -zxvf vscode-server-linux-x64.tar</span><br><span class="line"></span><br><span class="line"><span class="built_in">mv</span> vscode-server-linux-x64 [<span class="built_in">id</span>] （注：[<span class="built_in">id</span>]为自己vscode的commit ID。）</span><br></pre></td></tr></table></figure>

<h2 id="收尾"><a href="#收尾" class="headerlink" title="收尾"></a>收尾</h2><p>如此配置完之后就能够正常连接远程服务器了。过程当中需要注意以下几个点：</p>
<ul>
<li>目录文件不要通过尝试连接的方式去生成，要自己创建</li>
<li>如果始终连不上思考是否是<code>vscode-server-linux-x64.tar.gz</code>的id版本不同</li>
<li>连接过程当中注意用户与端口的对应关系</li>
<li>连接成功之后远程上是没有插件的，需要上传插件到服务器进程远程安装</li>
</ul>
]]></content>
      <categories>
        <category>琐事</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>python数据校验</title>
    <url>/m42-orion/2022/04/24/python%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C/</url>
    <content><![CDATA[<h2 id="什么是数据校验？"><a href="#什么是数据校验？" class="headerlink" title="什么是数据校验？"></a>什么是数据校验？</h2><p>在实际的开发过程当中，我们往往会面临很多需要数据对接的情况，这时候一个函数可能需要处理一个或者多个数据参数，也就是说函数的参数面临着多且不确定性，参数本身不确定性还伴随着在传递过程当中是否符合规范的问题。以python函数为例，以下是随意写法和标准写法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 随意</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">max</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">if</span> a&gt;b:</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">elif</span> a&lt;b:</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建议的标准写法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">max</span>(<span class="params">a:<span class="built_in">int</span>=<span class="number">0</span>,</span></span><br><span class="line"><span class="params">        b:<span class="built_in">int</span>=<span class="number">0</span></span>)-&gt;<span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    这里描述函数的功能</span></span><br><span class="line"><span class="string">    :param a: 参数描述</span></span><br><span class="line"><span class="string">    :param b: 参数描述</span></span><br><span class="line"><span class="string">    :returns: 返回描述</span></span><br><span class="line"><span class="string">    :raises keyError: 可能的错误捕获描述</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> a&gt;b:</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">elif</span> a&lt;b:</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>除此之外还有<code>def exmaple2(required_arg, *arg, **kwarg):</code>这样的写法，这些写法都是在极力是的python的函数与参数信息更加明确，让调用函数的时候能够清楚的知道函数的作用。<br>由于需求的复杂逐步增加，因此数据接口从原先的单纯的写法升级为固定规则，需要一些额外的协助手段才能够帮助使用者规范接口，<code>pydantic</code>库的出现极大程度的解决了这些问题。</p>
<h2 id="pydantic库的基础"><a href="#pydantic库的基础" class="headerlink" title="pydantic库的基础"></a>pydantic库的基础</h2><h3 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h3><h4 id="schema基本定义方法"><a href="#schema基本定义方法" class="headerlink" title="schema基本定义方法"></a>schema基本定义方法</h4><p>pydantic库的数据定义方式是通过BaseModel类来进行定义的，所有基于pydantic的数据类型本质上都是一个BaseModel类，它最基本的使用方式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name: <span class="built_in">str</span></span><br></pre></td></tr></table></figure>

<h4 id="基本的schema实例化方法"><a href="#基本的schema实例化方法" class="headerlink" title="基本的schema实例化方法"></a>基本的schema实例化方法</h4><p>调用时，我们只需要对其进行实例化即可，实例化方法有以下几种：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#直接传值</span></span><br><span class="line">p = Person(name=<span class="string">&quot;Tom&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(p.json()) <span class="comment"># &#123;&quot;name&quot;: &quot;Tom&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过字典传入</span></span><br><span class="line">p = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Tom&quot;</span>&#125;</span><br><span class="line">p = Person(**p)</span><br><span class="line"><span class="built_in">print</span>(p.json()) <span class="comment"># &#123;&quot;name&quot;: &quot;Tom&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过其他的实例化对象传入</span></span><br><span class="line">p2 = Person.copy(p)</span><br><span class="line"><span class="built_in">print</span>(p2.json()) <span class="comment"># &#123;&quot;name&quot;: &quot;Tom&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<p>当传入值错误的时候，pydantic就会抛出报错，例如：<code>Person(person=&quot;Tom&quot;)</code> ;pydantic会抛出异常;另一方面，如果传入值多于定义值时，BaseModel也会自动对其进行过滤。如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = Person(name=<span class="string">&quot;Tom&quot;</span>, gender=<span class="string">&quot;man&quot;</span>, age=<span class="number">24</span>)</span><br><span class="line"><span class="built_in">print</span>(p.json()) <span class="comment"># &#123;&quot;name&quot;: &quot;Tom&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<p>可以看到，额外的参数gender与age都被自动过滤了。通过这种方式，数据的传递将会更为安全，但是，同样的，这也要求我们在前期的schema定义中必须要尽可能地定义完全。此外，pydantic在数据传输时会直接进行数据类型转换，因此，如果数据传输格式错误，但是可以通过转换变换为正确的数据类型是，数据传输也可以成功，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = Person(name=<span class="number">123</span>)</span><br><span class="line"><span class="built_in">print</span>(p.json()) <span class="comment"># &#123;&quot;name&quot;: &quot;123&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="pydantic基本数据类型"><a href="#pydantic基本数据类型" class="headerlink" title="pydantic基本数据类型"></a>pydantic基本数据类型</h4><p>下面，我们来看一下pydantic中的一些常用的基本类型。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Dict</span>, <span class="type">List</span>, <span class="type">Sequence</span>, <span class="type">Set</span>, <span class="type">Tuple</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    a: <span class="built_in">int</span> <span class="comment"># 整型</span></span><br><span class="line">    b: <span class="built_in">float</span> <span class="comment"># 浮点型</span></span><br><span class="line">    c: <span class="built_in">str</span> <span class="comment"># 字符串</span></span><br><span class="line">    d: <span class="built_in">bool</span> <span class="comment"># 布尔型</span></span><br><span class="line">    e: <span class="type">List</span>[<span class="built_in">int</span>] <span class="comment"># 整型列表</span></span><br><span class="line">    f: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">int</span>] <span class="comment"># 字典型，key为str，value为int</span></span><br><span class="line">    g: <span class="type">Set</span>[<span class="built_in">int</span>] <span class="comment"># 集合</span></span><br><span class="line">    h: <span class="type">Tuple</span>[<span class="built_in">str</span>, <span class="built_in">int</span>] <span class="comment"># 元组</span></span><br></pre></td></tr></table></figure>

<p>以上都是基础的使用，在实际使用过程当中，可以参考官方文档，会给出更加详细的写法。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>数据校验常常使用在需要被绑定在一起的复杂数据之上，也用于数据传递的校验，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span>  <span class="comment"># 无默认值，必填字段</span></span><br><span class="line">    name = <span class="string">&#x27;John Doe&#x27;</span>  <span class="comment"># 有默认值，选填字段</span></span><br><span class="line">    signup_ts: <span class="type">Optional</span>[datetime] = <span class="literal">None</span>  <span class="comment"># 选填字段</span></span><br><span class="line">    friends: <span class="type">List</span>[<span class="built_in">int</span>] = []  <span class="comment"># 列表中的元素是int类型或者是可以转换成int类型的其他类型</span></span><br><span class="line"></span><br><span class="line">error_data = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;a123&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;signup_ts&#x27;</span>: <span class="string">&#x27;2017-06-01 12:22&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;friends&#x27;</span>: [<span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    User(**error_data)</span><br><span class="line"><span class="keyword">except</span> ValidationError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e.json())</span><br></pre></td></tr></table></figure>

<p>这个案例展示了数据在接受错误参数的时候进行的自动校验，这样在数据十分复杂的情况下的时候就能够及时的判定数据是否传输异常而不是去一个个检查数据的状态。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这是一个规范性的问题，不需要太多总结，反而需要足够的代码经验去填补这方面经验的缺失。个人也注意到这个问题，因此写下一篇超短的文章记录一下。<br>最后附上官网地址，只有全英文的：<a href="https://pydantic-docs.helpmanual.io/">https://pydantic-docs.helpmanual.io/</a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>详解post与get</title>
    <url>/m42-orion/2022/04/23/%E8%AF%A6%E8%A7%A3post%E4%B8%8Eget/</url>
    <content><![CDATA[<h2 id="POST和GET"><a href="#POST和GET" class="headerlink" title="POST和GET"></a>POST和GET</h2><p>网络请求有OPTIONS、HEAD、GET、POST、PUT、DELETE、TRACE、CONNECT这常见的几种方式，其中最常见也就是post与get方法，在开发过程当中常常会遇到一个问题，这个接口到底是使用post请求好一点还是使用get请求好一点？两者到底有什么区别？这篇文章就将给出对应的解释。</p>
<h2 id="对post与get区别的错误理解"><a href="#对post与get区别的错误理解" class="headerlink" title="对post与get区别的错误理解"></a>对post与get区别的错误理解</h2><h3 id="get安全性非常低，post安全性较高"><a href="#get安全性非常低，post安全性较高" class="headerlink" title="get安全性非常低，post安全性较高"></a>get安全性非常低，post安全性较高</h3><p>一般来说，在对新手上手的时候会跟他说这样的话，并说get是能够明文看见的，但是post不行…这个说法是有一定道理的，对于完全不知道情况的普通用户来说，安全一点确实有道理，因为从浏览器的地址上确实看不到post请求的参数，url链接也变短了，但是不代表数据被完全隐藏，实际上通过简单的开发者工具抓包就能够看到明文数据。因此某些极小的点上可以说安全，但是实际上可能并不安全。 </p>
<h3 id="get传送的数据量较小，不能大于2KB。post传送的数据量较大，一般被默认为不受限制。"><a href="#get传送的数据量较小，不能大于2KB。post传送的数据量较大，一般被默认为不受限制。" class="headerlink" title="get传送的数据量较小，不能大于2KB。post传送的数据量较大，一般被默认为不受限制。"></a>get传送的数据量较小，不能大于2KB。post传送的数据量较大，一般被默认为不受限制。</h3><p>这个说法其实是指当我们使用get请求的时候，参数会直接被显示在url当中如：<code>https://www.duitang.com/blog/?id=1121578266</code>。这里的参数id尚且为int，如果为中文需要url编码，以至于链接会非常的长，这个长度是有限制的，这个限制却不是get方法的限制，之所以限制是浏览器跟服务器的限制，两者为了防止链接太长导致解析压力过大影响用户体验，所以才加以限制。相对的post确实不用在意大小，因为参数传输方式不同导致解析压力并不大。</p>
<h2 id="get和post的区别"><a href="#get和post的区别" class="headerlink" title="get和post的区别"></a>get和post的区别</h2><h3 id="get获取数据，post提交数据。"><a href="#get获取数据，post提交数据。" class="headerlink" title="get获取数据，post提交数据。"></a>get获取数据，post提交数据。</h3><p>这是从语义上进行的理解，即get与post的中文翻译，其实HTTP的八种方法都能够携带参数，服务器拿到参数之后想做什么完全由服务器决定而非由请求方法决定，但是在设计之初就给出建议让get承担获取数据，让post承担提交数据的功能。</p>
<p>注：HTTP请求，最初设定了八种方法。这八种方法本质上没有任何区别。只是让请求，更加有语义而已。</p>
<ul>
<li><strong>OPTIONS</strong> 返回服务器所支持的请求方法</li>
<li><strong>GET</strong> 向服务器获取指定资源</li>
<li><strong>HEAD</strong> 与GET一致，只不过响应体不返回，只返回响应头</li>
<li><strong>POST</strong> 向服务器提交数据，数据放在请求体里</li>
<li><strong>PUT</strong> 与POST相似，只是具有幂等特性，一般用于更新</li>
<li><strong>DELETE</strong> 删除服务器指定资源</li>
<li><strong>TRACE</strong> 回显服务器端收到的请求，测试的时候会用到这个</li>
<li><strong>CONNECT</strong> 预留，暂无使用</li>
</ul>
<h3 id="数据传输编码不同"><a href="#数据传输编码不同" class="headerlink" title="数据传输编码不同"></a>数据传输编码不同</h3><p>Get限制Form表单的数据集的值必须为ASCII字符，因此当出现不属于ASCII编码的字符在get请求当中的时候，必须对链接进行编码，常见的如果链接当中出现空格，链接上会把空格编码成%20，不信可以粘贴以下链接到浏览器，看看链接发生的变化： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://www.baidu.com/s?wd=hello world</span><br><span class="line"><span class="comment"># 以下是浏览器编码后的结果</span></span><br><span class="line">https://www.baidu.com/s?wd=hello%20world</span><br></pre></td></tr></table></figure>

<p>Post相比get支持整个ISO10646字符集,能够有更多的数据格式的兼容，因此使用起来会更加的方便，但是测试起来可能不是很方便。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>Get执行效率却比Post方法好。</li>
<li>Get是form提交的默认方法。</li>
<li>GET在浏览器回退时是无害的，而POST会再次提交请求。 </li>
<li>历史记录不能够保存post的参数，却能够保存get的请求参数。</li>
<li>POST用于修改服务器上的数据，有副作用，非幂等。</li>
</ul>
<h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><p>代码采用fastpai进行演示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_root</span>():</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;Hello&quot;</span>: <span class="string">&quot;World&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>(<span class="title class_ inherited__">BaseModel</span>):  <span class="comment"># 继承了BaseModel，定义了People的数据格式</span></span><br><span class="line">    name: <span class="built_in">str</span> = <span class="literal">None</span>  <span class="comment"># 默认了name的值为None</span></span><br><span class="line">    age: <span class="built_in">int</span> = <span class="number">18</span>  <span class="comment"># 默认了age为18</span></span><br><span class="line">    sex: <span class="built_in">str</span> = <span class="string">&quot;renyao&quot;</span>  <span class="comment"># 默认了sex为renyao</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/fastapi/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">postdate</span>(<span class="params">people: People</span>):  <span class="comment"># 传入一个People类型的参数people</span></span><br><span class="line">    <span class="keyword">return</span> people</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    uvicorn.run(<span class="string">&quot;test:app&quot;</span>, host=<span class="string">&quot;localhost&quot;</span>, port=<span class="number">5000</span>, log_level=<span class="string">&quot;info&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>可以postget在设计上的确具有很多差异，但是实际使用的时候两者都能够满足传参的需求，但是为了标准，尽可能的使用get用于获取数据，用post提交数据。百度搜索采用的就是get获取数据，而几乎所有的账户登录都是post用于提交数据。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>协议</tag>
      </tags>
  </entry>
  <entry>
    <title>装饰器</title>
    <url>/m42-orion/2022/04/29/%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython.core.interactiveshell <span class="keyword">import</span> InteractiveShell</span><br><span class="line">InteractiveShell.ast_node_interactivity = <span class="string">&#x27;all&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="装饰器-Decorators"><a href="#装饰器-Decorators" class="headerlink" title="装饰器(Decorators)"></a>装饰器(Decorators)</h2><p>装饰器(Decorators)是 Python 的一个重要部分。简单地说：他们是修改其他函数的功能的函数。他们有助于让我们的代码更简短，也更Pythonic（Python范儿）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hi</span>(<span class="params">name=<span class="string">&quot; world&quot;</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span> + name</span><br><span class="line">hi()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 我们甚至可以将一个函数赋值给一个变量，比如</span></span><br><span class="line">greet = hi</span><br><span class="line"><span class="comment"># 我们这里没有在使用小括号，因为并不是在调用hi函数</span></span><br><span class="line"><span class="comment"># 而是在将它放在greet变量里头。尝试运行下这个</span></span><br><span class="line">greet()</span><br><span class="line"><span class="comment"># 如果删掉旧的hi函数</span></span><br><span class="line"><span class="keyword">del</span> hi</span><br><span class="line"><span class="comment"># hi() # 报错</span></span><br><span class="line"> </span><br><span class="line">greet()</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="在函数中定义函数"><a href="#在函数中定义函数" class="headerlink" title="在函数中定义函数"></a>在函数中定义函数</h2><p>刚才那些就是函数的基本知识了。我们来让你的知识更进一步。在 Python 中我们可以在一个函数中定义另一个函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">testfunction</span>(<span class="params">parameter=<span class="string">&quot;info&quot;</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;现在会调用里层函数&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">greet</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;greet函数被调用&quot;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">welcome</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;welcome函数被调用&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gentleman</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;gentleman函数被调用&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(greet())</span><br><span class="line">    <span class="built_in">print</span>(welcome())</span><br><span class="line">    gentleman()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;函数调用结束&quot;</span>)</span><br><span class="line"> </span><br><span class="line">testfunction()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 上面展示了无论何时调用hi(), greet()和welcome()将会同时被调用。</span></span><br><span class="line"><span class="comment"># 然后greet()和welcome()函数在hi()函数之外是不能访问的，比如：</span></span><br><span class="line"><span class="comment"># welcome()</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">现在会调用里层函数</span><br><span class="line">greet函数被调用</span><br><span class="line">welcome函数被调用</span><br><span class="line">gentleman函数被调用</span><br><span class="line">函数调用结束</span><br></pre></td></tr></table></figure>

<p>可以在函数中定义另外的函数。也就是说可以创建嵌套的函数。现在需要再多学一点，就是函数也能返回函数。</p>
<h2 id="从函数中返回函数"><a href="#从函数中返回函数" class="headerlink" title="从函数中返回函数"></a>从函数中返回函数</h2><p>其实并不需要在一个函数里去执行另一个函数，我们也可以将其作为输出返回出来：  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">testfunction</span>(<span class="params">parameter=<span class="string">&quot;info&quot;</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">greet</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;greet函数被调用&quot;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">welcome</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;welcome函数被调用&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> parameter == <span class="string">&quot;info&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> greet</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> welcome</span><br><span class="line"></span><br><span class="line">a = testfunction()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment">#outputs: &lt;function greet at 0x7f2143c01500&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#上面清晰地展示了`a`现在指向到hi()函数中的greet()函数</span></span><br><span class="line"><span class="comment">#现在试试这个</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a())</span><br><span class="line">testfunction()()</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">function</span> testfunction.&lt;locals&gt;.greet at 0x7f9e00638f28&gt;</span><br><span class="line">greet函数被调用</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;greet函数被调用&#x27;</span></span><br></pre></td></tr></table></figure>

<p>再次看看这个代码。在if/else语句中返回greet和welcome，而不是greet()和welcome()。<br>当把一对小括号放在后面，这个函数就会执行；然而如果不放括号在它后面，那它可以被到处传递，并且可以赋值给别的变量而不去执行它。<br>再稍微多解释点细节:<br>当我们写下a = testfunction()，testfunction()会被执行，而由于name参数默认是info，所以函数greet被返回了。如果我们把语句改为a = testfunction(name = “Alice”)，那么welcome函数将被返回。<br>我们还可以打印出testfunction()()，这会输出greet函数被调用。</p>
<h2 id="将函数作为参数传给另一个函数"><a href="#将函数作为参数传给另一个函数" class="headerlink" title="将函数作为参数传给另一个函数"></a>将函数作为参数传给另一个函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">testfunction</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Do_Something_Before_testfunction</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am doing some boring work before executing hi()&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(func())</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Do_Something_Before_testfunction(testfunction)</span><br><span class="line">I am doing some boring work before executing hi()</span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure>

<p>现在已经具备所有必需知识来学习装饰器是什么了,装饰器让你在一个函数的前后去执行代码。</p>
<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">function1</span>(<span class="params">a_func</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapTheFunction</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;在执行a_func()之前我正在做一些无聊的工作&quot;</span>)</span><br><span class="line"></span><br><span class="line">        a_func()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;在执行a_func()之后我正在做一些无聊的工作&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapTheFunction</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">function2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;函数2的输出&quot;</span>)</span><br><span class="line"></span><br><span class="line">function2()</span><br><span class="line"><span class="comment">#outputs: &quot;I am the function which needs some decoration to remove my foul smell&quot;</span></span><br><span class="line"></span><br><span class="line">function2 = function1(function2)</span><br><span class="line"><span class="comment">#现在function2被function1包装了</span></span><br><span class="line"></span><br><span class="line">function2()</span><br><span class="line"><span class="comment">#outputs:I am doing some boring work before executing a_func()</span></span><br><span class="line"><span class="comment">#        I am the function which needs some decoration to remove my foul smell</span></span><br><span class="line"><span class="comment">#        I am doing some boring work after executing a_func()</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">函数2的输出</span><br><span class="line">在执行a_func()之前我正在做一些无聊的工作</span><br><span class="line">函数2的输出</span><br><span class="line">在执行a_func()之后我正在做一些无聊的工作</span><br><span class="line">刚刚应用了之前学习到的原理。这正是python中装饰器做的事情！它封装一个函数，并且用这样或者那样的方式来修改它的行为。</span><br><span class="line">现在也许疑惑，在代码里并没有使用@符号？只是一个简短的方式来生成一个被装饰的函数。这里是我们如何使用@来运行之前的代码：</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@function1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a_function_requiring_decoration</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Hey you! Decorate me!&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am the function which needs some decoration to &quot;</span></span><br><span class="line">          <span class="string">&quot;remove my foul smell&quot;</span>)</span><br><span class="line"></span><br><span class="line">a_function_requiring_decoration()</span><br><span class="line"><span class="comment">#outputs: I am doing some boring work before executing a_func()</span></span><br><span class="line"><span class="comment">#         I am the function which needs some decoration to remove my foul smell</span></span><br><span class="line"><span class="comment">#         I am doing some boring work after executing a_func()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#@a_new_decorator就是下面这种方式的简写:</span></span><br><span class="line">a_function_requiring_decoration = function1(a_function_requiring_decoration)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">在执行a_func()之前我正在做一些无聊的工作</span><br><span class="line">I am the <span class="keyword">function</span> <span class="built_in">which</span> needs some decoration to remove my foul smell</span><br><span class="line">在执行a_func()之后我正在做一些无聊的工作</span><br></pre></td></tr></table></figure>

<p>希望现在对Python装饰器的工作原理有一个基本的理解。如果运行如下代码会存在一个问题：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(a_function_requiring_decoration.__name__)</span><br><span class="line"><span class="comment"># Output: wrapTheFunction</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wrapTheFunction</span><br></pre></td></tr></table></figure>

<p>这并不是想要的！Ouput输出应该是a_function_requiring_decoration。这里的函数被warpTheFunction替代了。它重写了函数的名字和注释文档(docstring)。幸运的是Python提供给一个简单的函数来解决这个问题，那就是functools.wraps。修改上一个例子来使用functools.wraps：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a_new_decorator</span>(<span class="params">a_func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">a_func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapTheFunction</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am doing some boring work before executing a_func()&quot;</span>)</span><br><span class="line">        a_func()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am doing some boring work after executing a_func()&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapTheFunction</span><br><span class="line"></span><br><span class="line"><span class="meta">@a_new_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a_function_requiring_decoration</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Hey yo! Decorate me!&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am the function which needs some decoration to &quot;</span></span><br><span class="line">          <span class="string">&quot;remove my foul smell&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a_function_requiring_decoration.__name__)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Output: a_function_requiring_decoration</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a_function_requiring_decoration</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decorator_name</span>(<span class="params">f</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">f</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorated</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> can_run:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Function will not run&quot;</span></span><br><span class="line">        <span class="keyword">return</span> f(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> decorated</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator_name</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">return</span>(<span class="string">&quot;Function is running&quot;</span>)</span><br><span class="line"></span><br><span class="line">can_run = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(func())</span><br><span class="line"><span class="comment"># Output: Function is running</span></span><br><span class="line"></span><br><span class="line">can_run = <span class="literal">False</span></span><br><span class="line"><span class="built_in">print</span>(func())</span><br><span class="line"><span class="comment"># Output: Function will not run</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Function is running</span><br><span class="line">Function will not run</span><br></pre></td></tr></table></figure>

<p>注意： @wraps接受一个函数来进行装饰，并加入了复制函数名称、注释文档、参数列表等等的功能。这可以让我们在装饰器里面访问在装饰之前的函数的属性。<br>装饰器在某些地方特别耀眼，使用它可以让一些事情管理起来变得更简单。<br>装饰器可以用于日志管理<br>装饰器可以监控函数运行之前的状态，捕捉函数的运行情况，传入参数等等</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logit</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">with_logging</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(func.__name__ + <span class="string">&quot; was called&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> with_logging</span><br><span class="line"></span><br><span class="line"><span class="meta">@logit</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addition_func</span>(<span class="params">x</span>):</span><br><span class="line">   <span class="string">&quot;&quot;&quot;Do some math.&quot;&quot;&quot;</span></span><br><span class="line">   <span class="keyword">return</span> x + x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = addition_func(<span class="number">4</span>)</span><br><span class="line"><span class="comment"># Output: addition_func was called</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">addition_func was called</span><br></pre></td></tr></table></figure>

<h2 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h2><p>来想想这个问题，难道@wraps不也是个装饰器吗？<br>但是，它接收一个参数，就像任何普通的函数能做的那样。那么，为什么我们不也那样做呢？<br>这是因为，当使用@my_decorator语法时，是在应用一个以单个函数作为参数的一个包裹函数。记住，Python里每个东西都是一个对象，而且这包括函数！<br>记住了这些，我们可以编写一个能返回一个包裹函数的函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logit</span>(<span class="params">logfile=<span class="string">&#x27;out.log&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">logging_decorator</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">        @wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapped_function</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            log_string = func.__name__ + <span class="string">&quot; was called&quot;</span></span><br><span class="line">            <span class="built_in">print</span>(log_string)</span><br><span class="line">            <span class="comment"># 打开logfile，并写入内容</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(logfile, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> opened_file:</span><br><span class="line">                <span class="comment"># 现在将日志打到指定的logfile</span></span><br><span class="line">                opened_file.write(log_string + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wrapped_function</span><br><span class="line">    <span class="keyword">return</span> logging_decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@logit()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfunc1</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">myfunc1()</span><br><span class="line"><span class="comment"># Output: myfunc1 was called</span></span><br><span class="line"><span class="comment"># 现在一个叫做 out.log 的文件出现了，里面的内容就是上面的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@logit(<span class="params">logfile=<span class="string">&#x27;func2.log&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfunc2</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">myfunc2()</span><br><span class="line"><span class="comment"># Output: myfunc2 was called</span></span><br><span class="line"><span class="comment"># 现在一个叫做 func2.log 的文件出现了，里面的内容就是上面的字符串</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">myfunc1 was called</span><br><span class="line">myfunc2 was called</span><br></pre></td></tr></table></figure>

<h2 id="装饰器类"><a href="#装饰器类" class="headerlink" title="装饰器类"></a>装饰器类</h2><p>现在有了能用于正式环境的logit装饰器，但当应用的某些部分还比较脆弱时，异常也许是需要更紧急关注的事情。比方说有时想打日志到一个文件。而有时想把引起你注意的问题发送到一个email，同时也保留日志，留个记录。这是一个使用继承的场景，但目前为止只看到过用来构建装饰器的函数。<br>幸运的是，类也可以用来构建装饰器。那现在以一个类而不是一个函数的方式，来重新构建logit。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">logit</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, logfile=<span class="string">&#x27;out.log&#x27;</span></span>):</span><br><span class="line">        self.logfile = logfile</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, func</span>):<span class="comment">#类的特殊成员</span></span><br><span class="line"><span class="meta">        @wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapped_function</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            log_string = func.__name__ + <span class="string">&quot; was called&quot;</span></span><br><span class="line">            <span class="built_in">print</span>(log_string)</span><br><span class="line">            <span class="comment"># 打开logfile并写入</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(self.logfile, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> opened_file:</span><br><span class="line">                <span class="comment"># 现在将日志打到指定的文件</span></span><br><span class="line">                opened_file.write(log_string + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="comment"># 现在，发送一个通知</span></span><br><span class="line">            self.notify()</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wrapped_function</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">notify</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># logit只打日志，不做别的</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;打印日志&quot;</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>这个实现有一个附加优势，在于比嵌套函数的方式更加整洁，而且包裹一个函数还是使用跟以前一样的语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@logit()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfunc1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始&quot;</span>)</span><br><span class="line"></span><br><span class="line">myfunc1()</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">myfunc1 was called</span><br><span class="line">打印日志</span><br><span class="line">开始</span><br></pre></td></tr></table></figure>

<p>现在，我们给logit创建子类，来添加新的功能。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">email_logit</span>(<span class="title class_ inherited__">logit</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    一个logit的实现版本，可以在函数调用时发送email给管理员</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, email=<span class="string">&#x27;admin@myproject.com&#x27;</span>, *args, **kwargs</span>):</span><br><span class="line">        self.email = email</span><br><span class="line">        <span class="built_in">super</span>(email_logit, self).__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">notify</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 发送一封email到self.email</span></span><br><span class="line">        <span class="comment"># 这里就不做实现了</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;假设已经发送了邮件&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@email_logit()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfunc1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始&quot;</span>)</span><br><span class="line"></span><br><span class="line">myfunc1()</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">myfunc1 was called</span><br><span class="line">假设已经发送了邮件</span><br><span class="line">开始</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>python之类型提示</title>
    <url>/m42-orion/2022/04/30/python%E4%B9%8B%E7%B1%BB%E5%9E%8B%E6%8F%90%E7%A4%BA/</url>
    <content><![CDATA[<p>Python 3.6+ 版本加入了对”类型提示”的支持。通过声明变量的类型，编辑器和一些工具能给你提供更好的支持。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>当我们在使用python写一段代码的时候，如果遇到下面这种情况：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">funcname</span>(<span class="params">param1,param2</span>):</span><br><span class="line">    <span class="built_in">print</span>(param1.split(<span class="string">&#x27;&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>如果我们想要对函数传递的某些参数进行一些操作的话，在使用一些内置方法的时候，我们通常会依赖python的联想功能，但是在这种情况下，一切都不管用，因为编辑器根本不知道参数是什么类型，所以更不知道可以做什么操作。就像下面这样:</p>
<p><img src="https://liu__tao.gitee.io/drawing-bed/blog_img/python%E4%B9%8B%E7%B1%BB%E5%9E%8B%E6%8F%90%E7%A4%BA/1.png" alt="失败情况"></p>
<p>但是，我们加上类型提示之后，一切都会变得不一样。而所谓的类型提示就是告诉编辑器，这到底是一个什么类型的参数，如下：</p>
<p><img src="https://liu__tao.gitee.io/drawing-bed/blog_img/python%E4%B9%8B%E7%B1%BB%E5%9E%8B%E6%8F%90%E7%A4%BA/2.png" alt="失败情况"></p>
<p>这样我们就能够正确的去实现编辑器的联想功能了。但是….类型提示仅限于此吗？并非如此，类型提示可以帮助我们规范参数类型，自动过滤某些非法参数，防止SQL注入等安全问题。</p>
<h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><h3 id="普通类型"><a href="#普通类型" class="headerlink" title="普通类型"></a>普通类型</h3><p>普通类型即我们常见的类型，如：int、float、bool、bytes这些类型使用方式如上，在函数参数处声明使用。</p>
<h3 id="嵌套类型"><a href="#嵌套类型" class="headerlink" title="嵌套类型"></a>嵌套类型</h3><p>嵌套类型指该类型内部可以包含其他类型，如常见的 dict、list、set 和 tuple等，这些类型的内部可以拥有其他类型，甚至于这些类型可以相互嵌套，如列表于字典的混合嵌套就是非常常见的情况。</p>
<blockquote>
<p>由于嵌套类型在python语言中不能够直接被识别，因此需要导入一个特定的库才可以，即:<code>tying</code></p>
</blockquote>
<p>嵌套类型的使用方式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">funcname</span>(<span class="params">param: <span class="type">List</span>[<span class="built_in">str</span>]</span>):</span><br><span class="line">    <span class="built_in">print</span>(param.append(<span class="string">&#x27;&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>其他嵌套类型以此类推。</p>
<h3 id="以类作为类型提示"><a href="#以类作为类型提示" class="headerlink" title="以类作为类型提示"></a>以类作为类型提示</h3><p>通过上面的案例，我们已将能够实现较多的数据类型提示功能了，但是当遇到一些复杂情况的时候，比如需要复杂的数据校验，或者涉及到需要多层嵌套的情况下，以前的简单数据类型已经完全不能够满足需求了，这个时候就需要类的出现了。</p>
<p>对于使用类来作为类型提示，需要引入一个特别的库即：<code>Pydantic</code>。这个库提供了丰富的类型提示的相关帮助，能够帮助开发者实现数据校验、数据限制、嵌套类型识别、密码安全验证、数据库操作模型等等。由于这是一个庞大的知识，我一时半会也阐述不完整，因此我附上两份文档：</p>
<p><a href="https://pydantic-docs.helpmanual.io/">https://pydantic-docs.helpmanual.io/</a>   </p>
<p><a href="https://blog.csdn.net/swinfans/article/details/89629641">https://blog.csdn.net/swinfans/article/details/89629641</a></p>
<p>同时附上几个从互联网上找到的几个案例：</p>
<p>配合函数使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel, Field</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Item</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    description: <span class="built_in">str</span> = Field(<span class="literal">None</span>, title=<span class="string">&quot;The description of the item&quot;</span>, max_length=<span class="number">300</span>)</span><br><span class="line">    price: <span class="built_in">float</span> = Field(..., gt=<span class="number">0</span>, description=<span class="string">&quot;The price must be greater than zero&quot;</span>)</span><br><span class="line">    tax: <span class="built_in">float</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">update_item</span>(<span class="params">item_id: <span class="built_in">int</span>, item: Item = Body(<span class="params">..., embed=<span class="literal">True</span></span>)</span>):</span><br><span class="line">    results = &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;item&quot;</span>: item&#125;</span><br><span class="line">    <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure>

<p>嵌套类型：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Union</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Gender</span>(<span class="built_in">str</span>, Enum):</span><br><span class="line">    man = <span class="string">&quot;man&quot;</span></span><br><span class="line">    women = <span class="string">&quot;women&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name : <span class="built_in">str</span></span><br><span class="line">    gender : Gender</span><br><span class="line">        </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Department</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name : <span class="built_in">str</span></span><br><span class="line">    lead : Person</span><br><span class="line">    cast : <span class="type">List</span>[Person]</span><br><span class="line">        </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Group</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    owner: Person</span><br><span class="line">    member_list: <span class="type">List</span>[Person] = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Company</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    owner: <span class="type">Union</span>[Person, Group]</span><br><span class="line">    regtime: date</span><br><span class="line">    department_list: <span class="type">List</span>[Department] = []</span><br></pre></td></tr></table></figure>

<p>数据校验：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel, ValidationError, validator</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoModel</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    friends: <span class="type">List</span>[<span class="built_in">int</span>] = []</span><br><span class="line">    books: <span class="type">List</span>[<span class="built_in">int</span>] = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># &#x27;*&#x27; 在这里是匹配任意字段，包含friends，books</span></span><br><span class="line"><span class="meta">    @validator(<span class="params"><span class="string">&#x27;*&#x27;</span>, pre=<span class="literal">True</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">split_str</span>(<span class="params">cls, v</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;如果传参是字符串，根据逗号切割成list&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(v, <span class="built_in">str</span>):</span><br><span class="line">            <span class="keyword">return</span> v.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"><span class="meta">    @validator(<span class="params"><span class="string">&#x27;books&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">books_greater_then_5</span>(<span class="params">cls, v</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断books数量少于5&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(v) &gt; <span class="number">5</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;books greater than 5&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1 = &#123;</span><br><span class="line">    <span class="string">&quot;friends&quot;</span>: [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    <span class="string">&quot;books&quot;</span>: <span class="string">&quot;3,4,5&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">d = DemoModel(**a1)</span><br><span class="line"><span class="built_in">print</span>(d)  <span class="comment"># friends=[2, 3, 4] books=[3, 4, 5]</span></span><br><span class="line"><span class="built_in">print</span>(d.<span class="built_in">dict</span>())  <span class="comment"># &#123;&#x27;friends&#x27;: [2, 3, 4], &#x27;books&#x27;: [3, 4, 5]&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>python提供的类型提示方法能够帮助使用者快速高效的去验证数据参数的合规性与安全性，保障数据传输在高效的同时兼顾安全性能，相比于其他的手动验证方式，这样的方式明显高效更多。也能使得文档具有更强的可读性，帮助开发者理解代码逻辑含义，提高编程效率。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>（fastapi一）安装与简单使用</title>
    <url>/m42-orion/2022/05/01/%EF%BC%88fastapi%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85%E4%B8%8E%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>由于自己已经使用过很久的fastapi了，但是到现在为止依然不能够非常熟练，多数时候依然会自己造轮子，走不少弯路，因此打算开始对fastapi进行系列总结。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>由于fastapi的启动需要<code>uvicorn</code>的配合，因此官方提供两种安装方式，第一种是全部安装，即：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install fastapi[all]</span><br></pre></td></tr></table></figure>

<p>第二种是分开安装即：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install fastapi</span><br><span class="line">pip install uvicorn[standard]</span><br></pre></td></tr></table></figure>

<p>如果安装太慢的话，添加一个临时源吧，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pyspide</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>fastapi服务创建有两种方式，第一种是通过代码启动，第二种是在命令行启动，如果你需要调试代码，建议你使用第一种，当然，某些编辑器提供直接的调试启动方法，但是需要注意配置启动函数与启动对象。这里给出两种启动方式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">import</span> uvicorn <span class="comment"># 必须添加这个库</span></span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">root</span>():</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello World&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    uvicorn.run(app=<span class="string">&#x27;main:app&#x27;</span>, host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">8000</span>, reload=<span class="literal">True</span>, debug=<span class="literal">True</span>)<span class="comment"># 启动命令</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">root</span>():</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello World&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在文件目录下的命令行中输入以下命令：</span></span><br><span class="line"><span class="comment"># uvicorn main:app --host &#x27;0.0.0.0&#x27; --port 8080 --reload</span></span><br></pre></td></tr></table></figure>
<p>uvicorn参数解释:  </p>
<ul>
<li>main: 指定主程序文件main.py文件, 如果main.py文件改成test.py 则命令也需要改为uvicorn test:app</li>
<li>app：在main.py中使用app = FastAPI()创建的对象</li>
<li>–host：远程主机ip，如果是本地则可以不要这个参数</li>
<li>–host：端口号</li>
<li>–reload：在修改源代码后程序会自动重新加载不用退出重新启动</li>
</ul>
<h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>在启动之初，fastapi提供一些关于swagger界面的配置信息：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI(</span><br><span class="line">    title=<span class="string">&quot;My Super Project&quot;</span>,</span><br><span class="line">    description=<span class="string">&quot;This is a very fancy project, with auto docs for the API and everything&quot;</span>,</span><br><span class="line">    version=<span class="string">&quot;2.5.0&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_items</span>():</span><br><span class="line">    <span class="keyword">return</span> [&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Foo&quot;</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    uvicorn.run(app, host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">8080</span>, access_log=<span class="literal">False</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>同时支持对跨域的配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可跨域访问的域名</span></span><br><span class="line">origins = [</span><br><span class="line">    <span class="string">&quot;http://localhost&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http://localhost:8080&quot;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">#可跨域访问的基本请求设置</span></span><br><span class="line">app.add_middleware(</span><br><span class="line">    CORSMiddleware,</span><br><span class="line">    allow_origins=origins,</span><br><span class="line">    allow_credentials=<span class="literal">True</span>,</span><br><span class="line">    allow_methods=[<span class="string">&quot;*&quot;</span>],</span><br><span class="line">    allow_headers=[<span class="string">&quot;*&quot;</span>],</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>更多详细的配置可以查看FastAPI的源码进行查看。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>fastapi</tag>
      </tags>
  </entry>
  <entry>
    <title>git基础使用</title>
    <url>/m42-orion/2022/05/01/git%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="什么是git"><a href="#什么是git" class="headerlink" title="什么是git"></a>什么是git</h2><p>git是一个<strong>分布式的版本控制软件</strong>。  </p>
<ul>
<li>分布式：<blockquote>
<p>场景：解决开发进度丢失问题，某人进度丢失可以从其他开发者那里找回来</p>
</blockquote>
</li>
<li>版本控制：能够控制开发<strong>进度</strong>并记录开发<strong>版本</strong>。<blockquote>
<p>场景：软件升级版本，毕业论文修改版本，写书不停的修订版本。</p>
</blockquote>
</li>
<li>软件：字面意思。<blockquote>
<p>场景：window上的安装包，软件，无脑下一步的安装的软件。</p>
</blockquote>
</li>
</ul>
<h3 id="分布式能够做什么？"><a href="#分布式能够做什么？" class="headerlink" title="分布式能够做什么？"></a>分布式能够做什么？</h3><ul>
<li>分布式存储开发进度，防止仓库信息挂掉的问题</li>
<li>提高代码开发完整性</li>
</ul>
<h3 id="关于版本控制能够做什么？"><a href="#关于版本控制能够做什么？" class="headerlink" title="关于版本控制能够做什么？"></a>关于版本控制能够做什么？</h3><ul>
<li>良好的版本管理可以控制开发进度，掌握开发问题，统一处理问题</li>
<li>可以多人同时开发，共同完成一个项目或者问题，减少重复工作量</li>
<li>减少文件重复保存，浪费存储资源</li>
<li>对版本回滚，问题排查，开发者追究起到良好的控制作用</li>
</ul>
<h3 id="git是什么"><a href="#git是什么" class="headerlink" title="git是什么"></a>git是什么</h3><p>git是一个可以管理版本的软件，并且支持多人协同管理，能够有效的解决开发冲突、版本控制、文件存放等问题。并且由于其支持分布式，所以不用担心某一处版本丢失问题。并且开发能够独立与其他开发者的进度，可以实现独立版本控制与多人版本控制。<br>git每一次进行版本控制都只会保留修改部分的内容，不会将内容全部保存，因此不会占用太大的空间资源，因此十分适合长期、大体量、多用户、工作复杂的版本管理。</p>
<h2 id="个人如何使用"><a href="#个人如何使用" class="headerlink" title="个人如何使用"></a>个人如何使用</h2><h3 id="git的文件关系"><a href="#git的文件关系" class="headerlink" title="git的文件关系"></a>git的文件关系</h3><ul>
<li>开发区：自己本地没有进入版本的的新文件或者文件被变动过</li>
<li>暂存区：将想要提交新版本的文件存放的区域</li>
<li>版本管理区：已经提交过版本管理的文件<blockquote>
<p>为什么会有暂存区，暂存区的存在使得文件能够更加灵活的开发，假设开发超进度了，但是只需要部分功能，这样也可以很好的做版本控制。或者临时发现有些文件不需要进入版本，需要移出这个版本也需要暂存区这个功能。暂存去就代表文件走向了版本管理的流程。</p>
</blockquote>
</li>
</ul>
<h3 id="第一次版本管理流程"><a href="#第一次版本管理流程" class="headerlink" title="第一次版本管理流程"></a>第一次版本管理流程</h3><p>如是实现：  </p>
<ul>
<li>进入项目文件夹根目录</li>
<li>初始化文件夹: <code>git init</code></li>
<li>查看文件夹下所有文件状态：<code>git status</code><blockquote>
<p>在git命令行当中，新文件或者被修改的文件会被标识为红色</p>
</blockquote>
</li>
<li>将文件存储到暂存区: <code>git add .</code><blockquote>
<p><code>add .</code>的含义是把所有文件都添加进去。如果想要一个个的添加文件你可以使用<code>git add 指定文件的全名(包含后缀名)</code>。添加到暂存区之后的文件会呈现绿色。</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>如果你想要把一个文件从暂存区踢出去，你可以使用命令：<code>git restore &lt;filename&gt;</code></p>
</blockquote>
<ul>
<li>记录一个版本: <code>git commit -m &quot;版本的名字&quot;</code></li>
</ul>
<h3 id="而后的管理"><a href="#而后的管理" class="headerlink" title="而后的管理"></a>而后的管理</h3><p>再第一次初始化之后，而后的版本管理步骤相比于第一次就不用执行<code>git init</code>命令。之后只需要继续添加你想要加入新版本的文件，将文件加入暂存区，再提交版本。</p>
<h3 id="个人信息配置"><a href="#个人信息配置" class="headerlink" title="个人信息配置"></a>个人信息配置</h3><p>git配置个人信息有利于在多人开发的时候识别版本修改来源于哪一位修改者，一般来说在第一次执行版本提交命令的时候，如果没有配置个人信息，那么一定会报错，提示让你运行命令：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;you@example.com&quot;</span></span><br><span class="line">git config --global user.name <span class="string">&quot;you name&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="版本记录"><a href="#版本记录" class="headerlink" title="版本记录"></a>版本记录</h3><ul>
<li>如果已经提交多次，想要查看历史的版本记录，可以使用命令：<code>git log</code></li>
<li>如果该版本出错了，想要找回历史版本，这个过程被称为<strong>回滚</strong>。意思就是重新滚回到历史的某一个版本，可以执行命令：<code>git reset --hard 版本号</code><blockquote>
<p>什么是版本号？版本号就是查看历史记录的时候展示的commit后面的一串编码。<br><strong>注意：</strong> 当执行了回滚之后再使用<code>git log</code>就不能够查看之后的记录了，需要使用另一个命令查看：<code>git reflog</code></p>
</blockquote>
</li>
<li>如果感觉查看版本不直观或者多人协同可以试试图形化查看：<code>git log graph</code></li>
</ul>
<h3 id="分支的使用"><a href="#分支的使用" class="headerlink" title="分支的使用"></a>分支的使用</h3><p>什么是分支？分支是我们基于当前进度在另一方向上进行拓展开发。使用场景：</p>
<blockquote>
<p>开发网站，前期准备工作已经完毕，但是现在需要转型，需要同时转向博客类型跟网盘类型，互不干扰,分成两个分支。<br>软件开发，开发在测试分支上，测试通过进入稳定版本。<br>多人协同工作，每人一个分支，到时候一起来合稿。<br>一人完成多项工作，每个分支一个章节，主分支用于合稿。</p>
</blockquote>
<ul>
<li>查看分支：<code>git branch</code></li>
<li>创建分支：<code>git branch &lt;myselfbranch&gt;</code></li>
<li>切换分支：<code>git checkout master</code></li>
<li>创建并切换：<code>git checkout -b &lt;myselfbranch&gt;</code></li>
<li>删除分支：<code>git branch -d &lt;myselfbranch&gt;</code></li>
<li>合并分支：<code>git merge master</code><blockquote>
<p>合并分支能够让你的分支同步你合并的对象</p>
</blockquote>
</li>
</ul>
<h2 id="结合远程仓库的个人使用"><a href="#结合远程仓库的个人使用" class="headerlink" title="结合远程仓库的个人使用"></a>结合远程仓库的个人使用</h2><p>以上的操作对于个人使用已经完全足够，用于个人记录文档或者日志记录已经完全足够，但是既然git是一个分布式的框架，总会需要结合远程仓库使用的时候。对于远程仓库有GitHub、gitlab、码云等多种选择方式，这里不再过多赘述。现在结合远程仓库一起使用。</p>
<h3 id="为什么要远程仓库"><a href="#为什么要远程仓库" class="headerlink" title="为什么要远程仓库"></a>为什么要远程仓库</h3><p>假设在家办公，在学校也在办公，或者在到处奔赴办公，如果想要继续保持上一次的开发进度，就必须要随身携带自己的文件。如果是以前可以选择放在U盘随身携带或者放在百度云等等。但是如果文件太大，那就比较麻烦了，每一次也是全部拷贝十分麻烦。还有可能文件丢失的可能性。<br>远程仓库的出现能够在云端创建一个保存文件的区域。能够一样保留开发记录，每次下载也可以只更新被更新的文件，不需要全部下载。</p>
<h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>注册一个远程仓库账号， <del>百度创建仓库教程</del></p>
<blockquote>
<p>场景：第一次创建仓库如果你还没开始进行版本管理可以这样操作：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# info&quot;</span> &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line">git remote add origin 你仓库地址</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<p>只需要在本地按顺序执行以上命令就可以了。</p>
<blockquote>
<p>场景：如果已经在本地写了一些版本了，突然某天想起要不要搞个远程仓库，可以执行以下操作：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin 你仓库地址</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<p>推送的时候需要填写自己的账号密码，填写你注册平台的账号名与密码。</p>
<h3 id="推送与拉取"><a href="#推送与拉取" class="headerlink" title="推送与拉取"></a>推送与拉取</h3><ul>
<li>push : 推送; pull:拉取;</li>
</ul>
<p>首先必须分清那个是推送，那个是拉取。推送指的是将代码推送到远程仓库里，推送内容包括本地文件与git记录；拉取同理。<br>在添加远程仓库的时候，<code>origin</code>指的是远程仓库的名字，而master指的是分支的名字，一般默认是在主分支也就是master上。</p>
<p>推送跟拉取的时候由于开发进度的不同或者开发产生冲突，会出现代码合并的请求出现，所以在推送之前一定要先拉取一遍保证本地文件为最新版本以防止冲突。</p>
<h3 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h3><blockquote>
<p>场景1：远程仓库的进度大于本地进度，本地没有第一时间合并<br>场景2：两个个不同的人对一个地方进行了修改并且同时推送导致线上冲突</p>
</blockquote>
<p>这两种冲突是需要注意的，一般情况不会发生，但是发生后就需要对代码进行合并。合并一般不使用命令行，就目前的情况已经有比较成熟的合并工具了，具体使用不再赘述。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql的四大特性</title>
    <url>/m42-orion/2022/05/01/mysql%E7%9A%84%E5%9B%9B%E5%A4%A7%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h2 id="四大特性"><a href="#四大特性" class="headerlink" title="四大特性"></a>四大特性</h2><p>MySQL有四大特性，分别是：原子性、隔离性、永久性、一致性。</p>
<h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><p>原子性这个词是从字面意义上最不好理解的一个词。原子性的含义是：一个事务包含多个操作，这些操作要么全部执行，要么全都不执行。实现事务的原子性，要支持回滚操作，在某个操作失败后，回滚到事务执行之前的状态。</p>
<p>举个例子，在你使用移动支付的时候，你付钱出去的一瞬间，别人也需要收款到账，付钱与收钱必须是一致的，如果不一致那就说明有问题，某个操作在过程当中遗失了，而这一进一出的过程被视为一个单元操作，不可被分割。出错之后原子性必须具有回滚功能，即返回到操作之前的情况，如果不能做到就有可能引起重大事故。</p>
<h3 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h3><p>一致性分为五种一致性，分别用于解决不同的问题：</p>
<ul>
<li>强一致性：读操作可以立即读到提交的更新操作。  </li>
<li>弱一致性：提交的更新操作，不一定立即会被读操作读到，此种情况会存在一个不一致窗口，指的是读操作可以读到最新值的一段时间。  </li>
<li>最终一致性：是弱一致性的特例。事务更新一份数据，最终一致性保证在没有其他事务更新同样的值的话，最终所有的事务都会读到之前事务更新的最新值。如果没有错误发生，不一致窗口的大小依赖于：通信延迟，系统负载等。  </li>
<li>单调一致性：如果一个进程已经读到一个值，那么后续不会读到更早的值。</li>
<li>会话一致性：保证客户端和服务器交互的会话过程中，读操作可以读到更新操作后的最新值</li>
</ul>
<p>一致性涉及到数据同步问题，也是在支付叫过程当场常常体现，当然还包括信息查询等业务情况。</p>
<h3 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h3><p>并发事务之间互相影响的程度，比如一个事务会不会读取到另一个未提交的事务修改的数据。在事务并发操作时，可能出现的问题有：  </p>
<ul>
<li><strong>脏读：</strong> 事务A修改了一个数据，但未提交，事务B读到了事务A未提交的更新结果，如果事务A提交失败，事务B读到的就是脏数据。  </li>
<li><strong>不可重复读：</strong> 在同一个事务中，对于同一份数据读取到的结果不一致。比如，事务B在事务A提交前读到的结果，和提交后读到的结果可能不同。 不可重复读出现的原因就是事务并发修改记录，要避免这种情况，最简单的方法就是对要修改的记录加锁，这回导致锁竞争加剧，影响性能。另一种方法是通过MVCC可以在无锁的情况下，避免不可重复读。</li>
<li><strong>幻读：</strong> 在同一个事务中，同一个查询多次返回的结果不一致。事务A新增了一条记录，事务B在事务A提交前后各执行了一次查询操作，发现后一次比前一次多了一条记录。 幻读是由于并发事务增加记录导致的，这个不能像不可重复读通过记录加锁解决，因为对于新增的记录根本无法加锁。需要将事务串行化，才能避免幻读。</li>
</ul>
<p>为了解决这些问题就引入了“隔离级别”的概念。SQL 标准的事务隔离级别包括：读未提交（read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（serializable）：</p>
<ul>
<li><strong>读未提交：</strong> 一个事务还没提交时，它做的变更就能被别的事务看到。</li>
<li><strong>读提交：</strong> 一个事务提交之后，它做的变更才会被其他事务看到。</li>
<li><strong>可重复读：</strong> 一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。</li>
<li><strong>串行化：</strong> 顾名思义是对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行</li>
</ul>
<h3 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h3><p>事务一旦提交，它对数据库的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>python类型注释</title>
    <url>/m42-orion/2022/05/08/python%E7%B1%BB%E5%9E%8B%E6%B3%A8%E9%87%8A/</url>
    <content><![CDATA[<p>我找到一些来自于官方的关于python类型注释的资源，我将其复制下来，用于个人收藏。良好的类型注释习惯能让代码的可读性大大增强，同时也能够保证后续加入的人员能够快速理解与使用。</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>Python 3.6 在 PEP 526 中引入了用于注释变量的语法，我们在大多数示例中都使用它。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This is how you declare the type of a variable type in Python 3.6</span></span><br><span class="line">age: <span class="built_in">int</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You don&#x27;t need to initialize a variable to annotate it</span></span><br><span class="line">a: <span class="built_in">int</span>  <span class="comment"># Ok (no value at runtime until assigned)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The latter is useful in conditional branches</span></span><br><span class="line">child: <span class="built_in">bool</span></span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">18</span>:</span><br><span class="line">    child = <span class="literal">True</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    child = <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h2 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Set</span>, <span class="type">Dict</span>, <span class="type">Tuple</span>, <span class="type">Optional</span></span><br><span class="line"><span class="comment"># For simple built-in types, just use the name of the type</span></span><br><span class="line">x: <span class="built_in">int</span> = <span class="number">1</span></span><br><span class="line">x: <span class="built_in">float</span> = <span class="number">1.0</span></span><br><span class="line">x: <span class="built_in">bool</span> = <span class="literal">True</span></span><br><span class="line">x: <span class="built_in">str</span> = <span class="string">&quot;test&quot;</span></span><br><span class="line">x: <span class="built_in">bytes</span> = <span class="string">b&quot;test&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># For collections, the type of the collection item is in brackets</span></span><br><span class="line"><span class="comment"># (Python 3.9+)</span></span><br><span class="line">x: <span class="built_in">list</span>[<span class="built_in">int</span>] = [<span class="number">1</span>]</span><br><span class="line">x: <span class="built_in">set</span>[<span class="built_in">int</span>] = &#123;<span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># In Python 3.8 and earlier, the name of the collection type is</span></span><br><span class="line"><span class="comment"># capitalized, and the type is imported from the &#x27;typing&#x27; module</span></span><br><span class="line">x: <span class="type">List</span>[<span class="built_in">int</span>] = [<span class="number">1</span>]</span><br><span class="line">x: <span class="type">Set</span>[<span class="built_in">int</span>] = &#123;<span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># For mappings, we need the types of both keys and values</span></span><br><span class="line">x: <span class="built_in">dict</span>[<span class="built_in">str</span>, <span class="built_in">float</span>] = &#123;<span class="string">&quot;field&quot;</span>: <span class="number">2.0</span>&#125;  <span class="comment"># Python 3.9+</span></span><br><span class="line">x: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">float</span>] = &#123;<span class="string">&quot;field&quot;</span>: <span class="number">2.0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># For tuples of fixed size, we specify the types of all the elements</span></span><br><span class="line">x: <span class="built_in">tuple</span>[<span class="built_in">int</span>, <span class="built_in">str</span>, <span class="built_in">float</span>] = (<span class="number">3</span>, <span class="string">&quot;yes&quot;</span>, <span class="number">7.5</span>)  <span class="comment"># Python 3.9+</span></span><br><span class="line">x: <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">str</span>, <span class="built_in">float</span>] = (<span class="number">3</span>, <span class="string">&quot;yes&quot;</span>, <span class="number">7.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># For tuples of variable size, we use one type and ellipsis</span></span><br><span class="line">x: <span class="built_in">tuple</span>[<span class="built_in">int</span>, ...] = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)  <span class="comment"># Python 3.9+</span></span><br><span class="line">x: <span class="type">Tuple</span>[<span class="built_in">int</span>, ...] = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use Optional[] for values that could be None</span></span><br><span class="line">x: <span class="type">Optional</span>[<span class="built_in">str</span>] = some_function()</span><br><span class="line"><span class="comment"># Mypy understands a value can&#x27;t be None in an if-statement</span></span><br><span class="line"><span class="keyword">if</span> x <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(x.upper())</span><br><span class="line"><span class="comment"># If a value can never be None due to some invariants, use an assert</span></span><br><span class="line"><span class="keyword">assert</span> x <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line"><span class="built_in">print</span>(x.upper())</span><br></pre></td></tr></table></figure>

<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>Python 3 支持函数声明的注释语法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Callable</span>, Iterator, <span class="type">Union</span>, <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is how you annotate a function definition</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stringify</span>(<span class="params">num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># And here&#x27;s how you specify multiple arguments</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plus</span>(<span class="params">num1: <span class="built_in">int</span>, num2: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add default value for an argument after the type annotation</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">num1: <span class="built_in">int</span>, my_float: <span class="built_in">float</span> = <span class="number">3.5</span></span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">    <span class="keyword">return</span> num1 + my_float</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is how you annotate a callable (function) value</span></span><br><span class="line">x: <span class="type">Callable</span>[[<span class="built_in">int</span>, <span class="built_in">float</span>], <span class="built_in">float</span>] = f</span><br><span class="line"></span><br><span class="line"><span class="comment"># A generator function that yields ints is secretly just a function that</span></span><br><span class="line"><span class="comment"># returns an iterator of ints, so that&#x27;s how we annotate it</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g</span>(<span class="params">n: <span class="built_in">int</span></span>) -&gt; Iterator[<span class="built_in">int</span>]:</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You can of course split a function annotation over multiple lines</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_email</span>(<span class="params">address: <span class="type">Union</span>[<span class="built_in">str</span>, <span class="built_in">list</span>[<span class="built_in">str</span>]],</span></span><br><span class="line"><span class="params">               sender: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">               cc: <span class="type">Optional</span>[<span class="built_in">list</span>[<span class="built_in">str</span>]],</span></span><br><span class="line"><span class="params">               bcc: <span class="type">Optional</span>[<span class="built_in">list</span>[<span class="built_in">str</span>]],</span></span><br><span class="line"><span class="params">               subject=<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="params">               body: <span class="type">Optional</span>[<span class="built_in">list</span>[<span class="built_in">str</span>]] = <span class="literal">None</span></span></span><br><span class="line"><span class="params">               </span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># An argument can be declared positional-only by giving it a name</span></span><br><span class="line"><span class="comment"># starting with two underscores:</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quux</span>(<span class="params">__x: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">quux(<span class="number">3</span>)  <span class="comment"># Fine</span></span><br><span class="line">quux(__x=<span class="number">3</span>)  <span class="comment"># Error</span></span><br></pre></td></tr></table></figure>

<h2 id="复杂情况"><a href="#复杂情况" class="headerlink" title="复杂情况"></a>复杂情况</h2><p>from typing import Union, Any, Optional, cast</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># To find out what type mypy infers for an expression anywhere in</span></span><br><span class="line"><span class="comment"># your program, wrap it in reveal_type().  Mypy will print an error</span></span><br><span class="line"><span class="comment"># message with the type; remove it again before running the code.</span></span><br><span class="line">reveal_type(<span class="number">1</span>)  <span class="comment"># -&gt; Revealed type is &quot;builtins.int&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use Union when something could be one of a few types</span></span><br><span class="line">x: <span class="built_in">list</span>[<span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">str</span>]] = [<span class="number">3</span>, <span class="number">5</span>, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;fun&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use Any if you don&#x27;t know the type of something or it&#x27;s too</span></span><br><span class="line"><span class="comment"># dynamic to write a type for</span></span><br><span class="line">x: <span class="type">Any</span> = mystery_function()</span><br><span class="line"></span><br><span class="line"><span class="comment"># If you initialize a variable with an empty container or &quot;None&quot;</span></span><br><span class="line"><span class="comment"># you may have to help mypy a bit by providing a type annotation</span></span><br><span class="line">x: <span class="built_in">list</span>[<span class="built_in">str</span>] = []</span><br><span class="line">x: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This makes each positional arg and each keyword arg a &quot;str&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call</span>(<span class="params">self, *args: <span class="built_in">str</span>, **kwargs: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    request = make_request(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> self.do_api_query(request)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use a &quot;type: ignore&quot; comment to suppress errors on a given line,</span></span><br><span class="line"><span class="comment"># when your code confuses mypy or runs into an outright bug in mypy.</span></span><br><span class="line"><span class="comment"># Good practice is to comment every &quot;ignore&quot; with a bug link</span></span><br><span class="line"><span class="comment"># (in mypy, typeshed, or your own code) or an explanation of the issue.</span></span><br><span class="line">x = confusing_function()  <span class="comment"># type: ignore  # https://github.com/python/mypy/issues/1167</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;cast&quot; is a helper function that lets you override the inferred</span></span><br><span class="line"><span class="comment"># type of an expression. It&#x27;s only for mypy -- there&#x27;s no runtime check.</span></span><br><span class="line">a = [<span class="number">4</span>]</span><br><span class="line">b = cast(<span class="built_in">list</span>[<span class="built_in">int</span>], a)  <span class="comment"># Passes fine</span></span><br><span class="line">c = cast(<span class="built_in">list</span>[<span class="built_in">str</span>], a)  <span class="comment"># Passes fine (no runtime check)</span></span><br><span class="line">reveal_type(c)  <span class="comment"># -&gt; Revealed type is &quot;builtins.list[builtins.str]&quot;</span></span><br><span class="line"><span class="built_in">print</span>(c)  <span class="comment"># -&gt; [4]; the object is not cast</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If you want dynamic attributes on your class, have it override &quot;__setattr__&quot;</span></span><br><span class="line"><span class="comment"># or &quot;__getattr__&quot; in a stub or in your source code.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># &quot;__setattr__&quot; allows for dynamic assignment to names</span></span><br><span class="line"><span class="comment"># &quot;__getattr__&quot; allows for dynamic access to names</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="comment"># This will allow assignment to any A.x, if x is the same type as &quot;value&quot;</span></span><br><span class="line">    <span class="comment"># (use &quot;value: Any&quot; to allow arbitrary types)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setattr__</span>(<span class="params">self, name: <span class="built_in">str</span>, value: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>: ...</span><br><span class="line"></span><br><span class="line">    <span class="comment"># This will allow access to any A.x, if x is compatible with the return type</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, name: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>: ...</span><br><span class="line"></span><br><span class="line">a.foo = <span class="number">42</span>  <span class="comment"># Works</span></span><br><span class="line">a.bar = <span class="string">&#x27;Ex-parrot&#x27;</span>  <span class="comment"># Fails type checking</span></span><br></pre></td></tr></table></figure>

<h2 id="标准“鸭子类型”"><a href="#标准“鸭子类型”" class="headerlink" title="标准“鸭子类型”"></a>标准“鸭子类型”</h2><p>在典型的Python代码中，许多可以将列表或字典作为参数的函数只需要它们的参数以某种方式“类似列表”或“类似字典”。“类似列表”或“类似字典”（或类似的东西）的特定含义被称为“鸭子类型”，并且在惯用Python中常见的几种鸭子类型是标准化的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Mapping, MutableMapping, <span class="type">Sequence</span>, Iterable</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use Iterable for generic iterables (anything usable in &quot;for&quot;),</span></span><br><span class="line"><span class="comment"># and Sequence where a sequence (supporting &quot;len&quot; and &quot;__getitem__&quot;) is</span></span><br><span class="line"><span class="comment"># required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">ints: Iterable[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">list</span>[<span class="built_in">str</span>]:</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">str</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> ints]</span><br><span class="line"></span><br><span class="line">f(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Mapping describes a dict-like object (with &quot;__getitem__&quot;) that we won&#x27;t</span></span><br><span class="line"><span class="comment"># mutate, and MutableMapping one (with &quot;__setitem__&quot;) that we might</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">my_mapping: Mapping[<span class="built_in">int</span>, <span class="built_in">str</span>]</span>) -&gt; <span class="built_in">list</span>[<span class="built_in">int</span>]:</span><br><span class="line">    my_mapping[<span class="number">5</span>] = <span class="string">&#x27;maybe&#x27;</span>  <span class="comment"># if we try this, mypy will throw an error...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(my_mapping.keys())</span><br><span class="line"></span><br><span class="line">f(&#123;<span class="number">3</span>: <span class="string">&#x27;yes&#x27;</span>, <span class="number">4</span>: <span class="string">&#x27;no&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">my_mapping: MutableMapping[<span class="built_in">int</span>, <span class="built_in">str</span>]</span>) -&gt; <span class="built_in">set</span>[<span class="built_in">str</span>]:</span><br><span class="line">    my_mapping[<span class="number">5</span>] = <span class="string">&#x27;maybe&#x27;</span>  <span class="comment"># ...but mypy is OK with this.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">set</span>(my_mapping.values())</span><br><span class="line"></span><br><span class="line">f(&#123;<span class="number">3</span>: <span class="string">&#x27;yes&#x27;</span>, <span class="number">4</span>: <span class="string">&#x27;no&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="comment"># You can optionally declare instance variables in the class body</span></span><br><span class="line">    attr: <span class="built_in">int</span></span><br><span class="line">    <span class="comment"># This is an instance variable with a default value</span></span><br><span class="line">    charge_percent: <span class="built_in">int</span> = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The &quot;__init__&quot; method doesn&#x27;t return anything, so it gets return</span></span><br><span class="line">    <span class="comment"># type &quot;None&quot; just like any other method that doesn&#x27;t return anything</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    <span class="comment"># For instance methods, omit type for &quot;self&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">my_method</span>(<span class="params">self, num: <span class="built_in">int</span>, str1: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> num * str1</span><br><span class="line"></span><br><span class="line"><span class="comment"># User-defined classes are valid as types in annotations</span></span><br><span class="line">x: MyClass = MyClass()</span><br><span class="line"></span><br><span class="line"><span class="comment"># You can use the ClassVar annotation to declare a class variable</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line">    seats: ClassVar[<span class="built_in">int</span>] = <span class="number">4</span></span><br><span class="line">    passengers: ClassVar[<span class="built_in">list</span>[<span class="built_in">str</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># You can also declare the type of an attribute in &quot;__init__&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.items: <span class="built_in">list</span>[<span class="built_in">str</span>] = []</span><br></pre></td></tr></table></figure>

<h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Match, IO</span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;typing.Match&quot; describes regex matches from the re module</span></span><br><span class="line">x: Match[<span class="built_in">str</span>] = re.match(<span class="string">r&#x27;[0-9]+&#x27;</span>, <span class="string">&quot;15&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use IO[] for functions that should accept or return any</span></span><br><span class="line"><span class="comment"># object that comes from an open() call (IO[] does not</span></span><br><span class="line"><span class="comment"># distinguish between reading, writing or other modes)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sys_IO</span>(<span class="params">mode: <span class="built_in">str</span> = <span class="string">&#x27;w&#x27;</span></span>) -&gt; IO[<span class="built_in">str</span>]:</span><br><span class="line">    <span class="keyword">if</span> mode == <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> sys.stdout</span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="string">&#x27;r&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> sys.stdin</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> sys.stdout</span><br><span class="line"></span><br><span class="line"><span class="comment"># Forward references are useful if you want to reference a class before</span></span><br><span class="line"><span class="comment"># it is defined</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">foo: A</span>) -&gt; <span class="built_in">int</span>:  <span class="comment"># This will fail</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># If you use the string literal &#x27;A&#x27;, it will pass as long as there is a</span></span><br><span class="line"><span class="comment"># class of that name later on in the file</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">foo: <span class="string">&#x27;A&#x27;</span></span>) -&gt; <span class="built_in">int</span>:  <span class="comment"># Ok</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>（fastapi二）参数校验</title>
    <url>/m42-orion/2022/05/08/%EF%BC%88fastapi%E4%BA%8C%EF%BC%89%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/</url>
    <content><![CDATA[<p>现在有一个实际的问题，我们在完成某一个项目的时候，如果说用户非要从接口传递一些非法参数或者某些人想要搞破坏，传递恶意的参数。如果参数直接与数据库相关，恶意传入一些参数会直接影响到数据库的正常运行，所以我们该怎么处理这些非法参数呢？写个函数验证？但是接口那么多，无穷尽也。但是fastapi提供了一些优雅的解决方式！</p>
<h2 id="额外的校验"><a href="#额外的校验" class="headerlink" title="额外的校验"></a>额外的校验</h2><p>下面是一段代码：  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Query</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/router/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_items</span>(<span class="params">q: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>需求是限制参数<code>q</code>的长度</p>
</blockquote>
<h2 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h2><p>官方提供了一个库叫做Query,这个库可以非常简单的做校验，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Query</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/router/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_items</span>(<span class="params">q: <span class="type">Optional</span>[<span class="built_in">str</span>] = Query(<span class="params"><span class="literal">None</span>, max_length=<span class="number">50</span></span>)</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>我们直接从源码上看：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Query</span>(<span class="params">  <span class="comment"># noqa: N802</span></span></span><br><span class="line"><span class="params">    default: <span class="type">Any</span>,</span></span><br><span class="line"><span class="params">    *,</span></span><br><span class="line"><span class="params">    alias: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    title: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    description: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    gt: <span class="type">Optional</span>[<span class="built_in">float</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    ge: <span class="type">Optional</span>[<span class="built_in">float</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    lt: <span class="type">Optional</span>[<span class="built_in">float</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    le: <span class="type">Optional</span>[<span class="built_in">float</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    min_length: <span class="type">Optional</span>[<span class="built_in">int</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    max_length: <span class="type">Optional</span>[<span class="built_in">int</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    regex: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    example: <span class="type">Any</span> = Undefined,</span></span><br><span class="line"><span class="params">    examples: <span class="type">Optional</span>[<span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>]] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    deprecated: <span class="type">Optional</span>[<span class="built_in">bool</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    include_in_schema: <span class="built_in">bool</span> = <span class="literal">True</span>,</span></span><br><span class="line"><span class="params">    **extra: <span class="type">Any</span>,</span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="type">Any</span>:</span><br></pre></td></tr></table></figure>

<p>其实根据翻译就能够得出这些参数大概是什么意思，如<code>gt、ge、lt、le</code>分别是大于、大于等于、小于、小于等于。但是其中有一个功能却十分强大，即<code>regex</code>。</p>
<p>是的，参数校验可以使用正则表达式，在官方给定的案例中，我们可以看到正则表达式的使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Query</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_items</span>(<span class="params"></span></span><br><span class="line"><span class="params">    q: <span class="type">Optional</span>[<span class="built_in">str</span>] = Query(<span class="params"><span class="literal">None</span>, min_length=<span class="number">3</span>, max_length=<span class="number">50</span>, regex=<span class="string">&quot;^fixedquery$&quot;</span></span>)</span></span><br><span class="line"><span class="params"></span>):</span><br><span class="line">    results = &#123;<span class="string">&quot;items&quot;</span>: [&#123;<span class="string">&quot;item_id&quot;</span>: <span class="string">&quot;Foo&quot;</span>&#125;, &#123;<span class="string">&quot;item_id&quot;</span>: <span class="string">&quot;Bar&quot;</span>&#125;]&#125;</span><br><span class="line">    <span class="keyword">if</span> q:</span><br><span class="line">        results.update(&#123;<span class="string">&quot;q&quot;</span>: q&#125;)</span><br><span class="line">    <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure>

<p>这个指定的正则表达式通过以下规则检查接收到的参数值：</p>
<ul>
<li>^：以该符号之后的字符开头，符号之前没有字符。</li>
<li>fixedquery: 值精确地等于 fixedquery。</li>
<li>$: 到此结束，在 fixedquery 之后没有更多字符。</li>
</ul>
<p>当然，别名参数<code>alias</code>也是十分有用的，如果你不想让调用函数的人通过参数揣测你的接口含义，你可以通过给参数命别名的方式来混淆别人对函数的判断，从而保证函数的安全。当然，别名也可以使得参数更加规范，或许？</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>fastapi</tag>
      </tags>
  </entry>
  <entry>
    <title>连接池</title>
    <url>/m42-orion/2022/05/08/%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
    <content><![CDATA[<h2 id="什么是连接池？"><a href="#什么是连接池？" class="headerlink" title="什么是连接池？"></a>什么是连接池？</h2><p>在网上常常给出这样的解释：数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个。</p>
<p>更通俗一点就是，连接池维护着项目于数据库之间的联系，保证项目不会过于频繁的去连接数据库导致数据库压力过大。</p>
<h2 id="为什么要使用连接池？"><a href="#为什么要使用连接池？" class="headerlink" title="为什么要使用连接池？"></a>为什么要使用连接池？</h2><p>数据库连接是一种关键的有限的昂贵的资源，这一点在多用户的网页应用程序中体现得尤为突出。一个数据库连接对象均对应一个物理数据库连接，每次操作都打开一个物理连接，使用完都关闭连接，这样造成系统的性能低下。如果连接池存在，操作只需要把任务丢给连接池，至于对数据库操作的进程等一系列问题，全权交给连接池来进行操作，由连接池自己控制与数据库的访问与操作。在没有连接池的情况下，连接数据库通常需要以下步骤：  </p>
<ul>
<li>TCP建立连接的三次握手  </li>
<li>MySQL认证的三次握手  </li>
<li>真正的SQL执行  </li>
<li>MySQL的关闭  </li>
<li>TCP的四次握手关闭  </li>
</ul>
<p>这样操作在代码上实现起来是很简单的，但是连接过程太耗时，连接过多容易出现内存泄漏，对于数据库访问大的项目来说这是十分致命的。</p>
<h2 id="连接池的实现"><a href="#连接池的实现" class="headerlink" title="连接池的实现"></a>连接池的实现</h2><h3 id="基于别人的工具"><a href="#基于别人的工具" class="headerlink" title="基于别人的工具"></a>基于别人的工具</h3><p>实际上连接池的问题由来已久，因此早有人考虑到连接池的问题并为此写好了工具，在python语言中，提供一个库：<code>sqlalchemy </code>,这个库可以维护一个连接，让操作者不必担心在项目执行过程中断掉与数据库的联系。</p>
<p>使用案例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">engine = create_engine(<span class="string">&quot;mysql://user:password@hostname/dbname?charset=utf8&quot;</span>,</span><br><span class="line">                       echo=<span class="literal">True</span>,</span><br><span class="line">                       pool_size=<span class="number">8</span>,</span><br><span class="line">                       pool_recycle=<span class="number">60</span>*<span class="number">30</span></span><br><span class="line">                       )</span><br></pre></td></tr></table></figure>

<h3 id="自己写一个"><a href="#自己写一个" class="headerlink" title="自己写一个"></a>自己写一个</h3><p>如果自己写一个也是可以的，自己写连接池需要注意以下几点：</p>
<ul>
<li>最小连接数：是连接池一直保持的数据库连接,所以如果应用程序对数据库连接的使用量不大,将会有大量的数据库连接资源被浪费.</li>
<li>最大连接数：是连接池能申请的最大连接数,如果数据库连接请求超过次数,后面的数据库连接请求将被加入到等待队列中,这会影响以后的数据库操作</li>
<li>最大空闲时间</li>
<li>获取连接超时时间</li>
<li>超时重试连接次数</li>
</ul>
<p>在网上也有不少人写出来了一些自己的连接池</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> tools.setting <span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line">DB_CONFIG = config.mysql_info()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SQLManager</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 初始化实例方法</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">		self.conn = <span class="literal">None</span></span><br><span class="line">		self.cursor = <span class="literal">None</span></span><br><span class="line">		self.connect()</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 连接数据库</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="keyword">try</span>: <span class="comment"># 防止长连接导致挂掉</span></span><br><span class="line">			self.conn.ping()</span><br><span class="line">		<span class="keyword">except</span>:</span><br><span class="line">			self.conn = pymysql.connect(</span><br><span class="line">				host=DB_CONFIG[<span class="string">&quot;HOST&quot;</span>],</span><br><span class="line">				port=<span class="built_in">int</span>(DB_CONFIG[<span class="string">&quot;PORT&quot;</span>]),</span><br><span class="line">				user=DB_CONFIG[<span class="string">&quot;USER&quot;</span>],</span><br><span class="line">				passwd=DB_CONFIG[<span class="string">&quot;PASSWORD&quot;</span>],</span><br><span class="line">				db=DB_CONFIG[<span class="string">&quot;DBNAME&quot;</span>],</span><br><span class="line">				charset=DB_CONFIG[<span class="string">&quot;CHARSET&quot;</span>]</span><br><span class="line">			)</span><br><span class="line">			self.cursor = self.conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 查询多条数据</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">get_list</span>(<span class="params">self, sql, args=<span class="literal">None</span></span>):</span><br><span class="line">		self.connect()</span><br><span class="line">		self.cursor.execute(sql.encode(<span class="string">&#x27;utf8&#x27;</span>), args)</span><br><span class="line">		result = self.cursor.fetchall()</span><br><span class="line">		<span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 查询单条数据</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">get_one</span>(<span class="params">self, sql, args=<span class="literal">None</span></span>):</span><br><span class="line">		self.connect()</span><br><span class="line">		self.cursor.execute(sql.encode(<span class="string">&#x27;utf8&#x27;</span>), args)</span><br><span class="line">		result = self.cursor.fetchone()</span><br><span class="line">		<span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 执行单条SQL语句</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">moddify</span>(<span class="params">self, sql, args=<span class="literal">None</span></span>):</span><br><span class="line">		self.connect()</span><br><span class="line">		self.cursor.execute(sql, args)</span><br><span class="line">		self.conn.commit()</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 我如果要批量执行多个创建操作，虽然只建立了一次数据库连接但是还是会多次提交，可不可以改成一次连接，</span></span><br><span class="line">	<span class="comment"># 一次提交呢？</span></span><br><span class="line">	<span class="comment"># 可以，只需要用上pymysql的executemany()</span></span><br><span class="line">	<span class="comment"># 方法就可以了。</span></span><br><span class="line">	<span class="comment"># 执行多条SQL语句</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">multi_modify</span>(<span class="params">self, sql, args=<span class="literal">None</span></span>):</span><br><span class="line">		self.connect()</span><br><span class="line">		self.cursor.executemany(sql.encode(<span class="string">&#x27;utf8&#x27;</span>), args)</span><br><span class="line">		self.conn.commit()</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 创建单条记录的语句</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, sql, args=<span class="literal">None</span></span>):</span><br><span class="line">		self.connect()</span><br><span class="line">		self.cursor.execute(sql.encode(<span class="string">&#x27;utf8&#x27;</span>), args)</span><br><span class="line">		self.conn.commit()</span><br><span class="line">		last_id = self.cursor.lastrowid</span><br><span class="line">		<span class="keyword">return</span> last_id</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 关闭数据库cursor和连接</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>):</span><br><span class="line">		self.connect()</span><br><span class="line">		self.cursor.close()</span><br><span class="line">		self.conn.close()</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 最后，我们每次操作完数据库之后都要手动关闭，可不可以写成自动关闭的呢？</span></span><br><span class="line">	<span class="comment"># 联想到我们之前学过的文件操作，使用with语句可以实现缩进结束自动关闭文件句柄的例子。</span></span><br><span class="line">	<span class="comment"># 我们来把我们的数据库连接类SQLManager类再优化下，使其支持with语句操作。</span></span><br><span class="line">	<span class="comment"># 进入with语句自动执行</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 退出with语句块自动执行</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">		self.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db = SQLManager()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># info = db.get_list(&#x27;select user_name from user_table where user_name=&quot;张三&quot;&#x27;)</span></span><br><span class="line">	<span class="comment"># time_info=datetime.datetime.now().strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)</span></span><br><span class="line">	<span class="comment"># sql_str = &quot;INSERT INTO user_table (create_time,update_time,user_name,password) VALUES (now(),now(),&#x27;&#123;&#125;&#x27;,&#123;&#125;)&quot;</span></span><br><span class="line">	<span class="comment"># db.create(sql_str)</span></span><br><span class="line">    <span class="comment"># print(info)</span></span><br><span class="line">	<span class="comment"># db.close()</span></span><br><span class="line">	sql_str = <span class="string">&quot;SELECT * FROM articles ORDER BY create_time DESC LIMIT &#123;&#125;,2;&quot;</span>.<span class="built_in">format</span>(<span class="number">2</span>*<span class="number">2</span>)</span><br><span class="line">	result = db.get_list(sql_str)</span><br><span class="line">	<span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>fastapi</tag>
      </tags>
  </entry>
  <entry>
    <title>特殊类型的声明</title>
    <url>/m42-orion/2022/05/10/%E7%89%B9%E6%AE%8A%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%A3%B0%E6%98%8E/</url>
    <content><![CDATA[<p>在类型声明的部分，提供的类型声明大多都是官方给定的类型，如:<code>int</code>,<code>float</code>,<code>str</code>,<code>list</code>,<code>dict</code>,<code>set</code>等等，但是某些时候当我们使用一些特殊的变量的时候，类型并不存在于官方给定的选项中。比如某些python的库创造的变量是具有自定义的类型的，这个时候该怎么操作呢？以下给出两个例子：</p>
<h2 id="库当中的类型"><a href="#库当中的类型" class="headerlink" title="库当中的类型"></a>库当中的类型</h2><p>先看案例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html_doc = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html_doc, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(soup)</span><br></pre></td></tr></table></figure>

<p>这是一段BeautifulSoup库的代码，如果需要将soup当作变量传递到一个函数当中，soup是什么类型的呢？可以用<code>type()</code>方法进行查看：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(soup)</span><br><span class="line"><span class="comment"># &lt;class &#x27;bs4.BeautifulSoup&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在就知道了soup的类型，于是代码就能写成：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> bs4 <span class="comment"># 引入类型对象</span></span><br><span class="line"></span><br><span class="line">html_doc = <span class="string">&quot;&quot;&quot;&lt;html&gt;test&lt;/html&gt;&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html_doc, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">soup:bs4.BeautifulSoup</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h2 id="自定义的类型"><a href="#自定义的类型" class="headerlink" title="自定义的类型"></a>自定义的类型</h2><p>如果是自定义的类型呢？什么情况下有自定义的类型？当然是将class对象当中变量传递的时候了，我们都知道实例化的对象是class或者啥的，但是class并不是对象的类型，对象的类型应该是class的名字.<br>所以代码如下：  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">a = test()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">funcname</span>(<span class="params">parm:test</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    docstring</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>倘若不信也可以亲自使用<code>type()</code>进行验证。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>fastapi启动的初始化问题</title>
    <url>/m42-orion/2022/05/12/fastapi%E5%90%AF%E5%8A%A8%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>在我最开始学习总结fastapi的时候，我就知道了fastapi可以通过命令行启动与调试模式启动，这里有一个巨大的坑需要注意，因为踩过，所以记录一下。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>首先展示一段调试启动的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI(</span><br><span class="line">    title=<span class="string">&quot;My Super Project&quot;</span>,</span><br><span class="line">    description=<span class="string">&quot;This is a very fancy project, with auto docs for the API and everything&quot;</span>,</span><br><span class="line">    version=<span class="string">&quot;2.5.0&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_items</span>():</span><br><span class="line">    <span class="keyword">return</span> [&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Foo&quot;</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    uvicorn.run(app, host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">8080</span>, access_log=<span class="literal">False</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>这段代码目前只是一个单文件，但是假设在单文件当中，我引入了其他文件中的一个class实例化对象，并且将这个对象在app赋值之后也进行一个赋值初始化，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> other <span class="keyword">import</span> otherobject <span class="comment">#otherobject是一个已经实例化之后的对象 </span></span><br><span class="line"></span><br><span class="line">app = FastAPI(</span><br><span class="line">    title=<span class="string">&quot;My Super Project&quot;</span>,</span><br><span class="line">    description=<span class="string">&quot;This is a very fancy project, with auto docs for the API and everything&quot;</span>,</span><br><span class="line">    version=<span class="string">&quot;2.5.0&quot;</span>,</span><br><span class="line">)</span><br><span class="line">otherobject.fun(<span class="number">1</span>) <span class="comment"># 赋值</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_items</span>():</span><br><span class="line">    <span class="keyword">return</span> [&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Foo&quot;</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    uvicorn.run(app, host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">8080</span>, access_log=<span class="literal">False</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>问题来了，在项目启动之后otherobject还会是赋值后的otherobject吗？</p>
<p>答案是：<strong>不是</strong></p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>因为这里必须搞清楚一件事情，python作为一种脚本语言，是逐行进行执行的，所以在启动的时候，python会按照顺序进行赋值，但是一旦执行到<code>uvicorn.run(app, host=&quot;0.0.0.0&quot;, port=8080, access_log=False, debug=True)</code>,这个时候就是交由uvicorn来启动一个项目了，当把权限交由给了uvicorn，它在启动服务的同时会重新引入其他文件的变量，但是却不会再一次执行当前的文件。因此otherobject会被导入两次但是第二次却不会被赋值。</p>
]]></content>
      <categories>
        <category>错误</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch之python总结</title>
    <url>/m42-orion/2022/05/12/ElasticSearch%E4%B9%8Bpython%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="对于ES"><a href="#对于ES" class="headerlink" title="对于ES"></a>对于ES</h2><p>ES数据库本身作为一种分布式的、查询优势、拓展优势、容错优势…..等等众多优点的数据库。更多的特点还是自行百度吧</p>
<h2 id="python操作"><a href="#python操作" class="headerlink" title="python操作"></a>python操作</h2><p>安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install elasticsearch</span><br></pre></td></tr></table></figure>

<p>安装也就那样吧。</p>
<h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><p>过热推荐，如果需要学习一个新的库的使用的时候，看源码与看官方文档是一个好习惯，因此本文仅列出少数操作，以使用入门讲解为主要核心。首先附上官方文档：<a href="https://elasticsearch-py.readthedocs.io/">https://elasticsearch-py.readthedocs.io/</a>  点击链接会直接跳转到最新版本的官方文档。</p>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>在使用python进行操作的时候，首先需要连接数据库，在启动数据库之后采用以下代码进行数据库连接：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> elasticsearch <span class="keyword">import</span> Elasticsearch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化一个ip为localhost，端口为9200，允许超时一小时的es对象</span></span><br><span class="line">client = Elasticsearch(<span class="string">&quot;http://IP:9200&quot;</span>) <span class="comment"># 替换成对应IP</span></span><br></pre></td></tr></table></figure>

<p>但是其实还有更多可选参数，在VScode当中只需要按住ctrl后点击Elasticsearch就能够看到源码，源码给出了更多可选参数与可选参数类型对数据库lz做了配置,部分源码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self,</span></span><br><span class="line"><span class="params">        hosts: t.<span class="type">Optional</span>[_TYPE_HOSTS] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        *,</span></span><br><span class="line"><span class="params">        <span class="comment"># API</span></span></span><br><span class="line"><span class="params">        cloud_id: t.<span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        api_key: t.<span class="type">Optional</span>[t.<span class="type">Union</span>[<span class="built_in">str</span>, t.<span class="type">Tuple</span>[<span class="built_in">str</span>, <span class="built_in">str</span>]]] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        basic_auth: t.<span class="type">Optional</span>[t.<span class="type">Union</span>[<span class="built_in">str</span>, t.<span class="type">Tuple</span>[<span class="built_in">str</span>, <span class="built_in">str</span>]]] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        bearer_auth: t.<span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        opaque_id: t.<span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        <span class="comment"># Node</span></span></span><br><span class="line"><span class="params">        headers: t.<span class="type">Union</span>[DefaultType, t.Mapping[<span class="built_in">str</span>, <span class="built_in">str</span>]] = DEFAULT,</span></span><br><span class="line"><span class="params">        connections_per_node: t.<span class="type">Union</span>[DefaultType, <span class="built_in">int</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        http_compress: t.<span class="type">Union</span>[DefaultType, <span class="built_in">bool</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        verify_certs: t.<span class="type">Union</span>[DefaultType, <span class="built_in">bool</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        ca_certs: t.<span class="type">Union</span>[DefaultType, <span class="built_in">str</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        client_cert: t.<span class="type">Union</span>[DefaultType, <span class="built_in">str</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        client_key: t.<span class="type">Union</span>[DefaultType, <span class="built_in">str</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        ssl_assert_hostname: t.<span class="type">Union</span>[DefaultType, <span class="built_in">str</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        ssl_assert_fingerprint: t.<span class="type">Union</span>[DefaultType, <span class="built_in">str</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        ssl_version: t.<span class="type">Union</span>[DefaultType, <span class="built_in">int</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        ssl_context: t.<span class="type">Union</span>[DefaultType, t.<span class="type">Any</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        ssl_show_warn: t.<span class="type">Union</span>[DefaultType, <span class="built_in">bool</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        <span class="comment"># Transport</span></span></span><br><span class="line"><span class="params">        transport_class: t.<span class="type">Type</span>[Transport] = Transport,</span></span><br><span class="line"><span class="params">        request_timeout: t.<span class="type">Union</span>[DefaultType, <span class="literal">None</span>, <span class="built_in">float</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        node_class: t.<span class="type">Union</span>[DefaultType, t.<span class="type">Type</span>[BaseNode]] = DEFAULT,</span></span><br><span class="line"><span class="params">        node_pool_class: t.<span class="type">Union</span>[DefaultType, t.<span class="type">Type</span>[NodePool]] = DEFAULT,</span></span><br><span class="line"><span class="params">        randomize_nodes_in_pool: t.<span class="type">Union</span>[DefaultType, <span class="built_in">bool</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        node_selector_class: t.<span class="type">Union</span>[DefaultType, t.<span class="type">Type</span>[NodeSelector]] = DEFAULT,</span></span><br><span class="line"><span class="params">        dead_node_backoff_factor: t.<span class="type">Union</span>[DefaultType, <span class="built_in">float</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        max_dead_node_backoff: t.<span class="type">Union</span>[DefaultType, <span class="built_in">float</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        serializer: t.<span class="type">Optional</span>[Serializer] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        serializers: t.<span class="type">Union</span>[DefaultType, t.Mapping[<span class="built_in">str</span>, Serializer]] = DEFAULT,</span></span><br><span class="line"><span class="params">        default_mimetype: <span class="built_in">str</span> = <span class="string">&quot;application/json&quot;</span>,</span></span><br><span class="line"><span class="params">        max_retries: t.<span class="type">Union</span>[DefaultType, <span class="built_in">int</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        retry_on_status: t.<span class="type">Union</span>[DefaultType, <span class="built_in">int</span>, t.Collection[<span class="built_in">int</span>]] = DEFAULT,</span></span><br><span class="line"><span class="params">        retry_on_timeout: t.<span class="type">Union</span>[DefaultType, <span class="built_in">bool</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        sniff_on_start: t.<span class="type">Union</span>[DefaultType, <span class="built_in">bool</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        sniff_before_requests: t.<span class="type">Union</span>[DefaultType, <span class="built_in">bool</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        sniff_on_node_failure: t.<span class="type">Union</span>[DefaultType, <span class="built_in">bool</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        sniff_timeout: t.<span class="type">Union</span>[DefaultType, <span class="literal">None</span>, <span class="built_in">float</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        min_delay_between_sniffing: t.<span class="type">Union</span>[DefaultType, <span class="literal">None</span>, <span class="built_in">float</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        sniffed_node_callback: t.<span class="type">Optional</span>[</span></span><br><span class="line"><span class="params">            t.<span class="type">Callable</span>[[t.<span class="type">Dict</span>[<span class="built_in">str</span>, t.<span class="type">Any</span>], NodeConfig], t.<span class="type">Optional</span>[NodeConfig]]</span></span><br><span class="line"><span class="params">        ] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        meta_header: t.<span class="type">Union</span>[DefaultType, <span class="built_in">bool</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        timeout: t.<span class="type">Union</span>[DefaultType, <span class="literal">None</span>, <span class="built_in">float</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        randomize_hosts: t.<span class="type">Union</span>[DefaultType, <span class="built_in">bool</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        host_info_callback: t.<span class="type">Optional</span>[</span></span><br><span class="line"><span class="params">            t.<span class="type">Callable</span>[</span></span><br><span class="line"><span class="params">                [t.<span class="type">Dict</span>[<span class="built_in">str</span>, t.<span class="type">Any</span>], t.<span class="type">Dict</span>[<span class="built_in">str</span>, t.<span class="type">Union</span>[<span class="built_in">str</span>, <span class="built_in">int</span>]]],</span></span><br><span class="line"><span class="params">                t.<span class="type">Optional</span>[t.<span class="type">Dict</span>[<span class="built_in">str</span>, t.<span class="type">Union</span>[<span class="built_in">str</span>, <span class="built_in">int</span>]]],</span></span><br><span class="line"><span class="params">            ]</span></span><br><span class="line"><span class="params">        ] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        sniffer_timeout: t.<span class="type">Union</span>[DefaultType, <span class="literal">None</span>, <span class="built_in">float</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        sniff_on_connection_fail: t.<span class="type">Union</span>[DefaultType, <span class="built_in">bool</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        http_auth: t.<span class="type">Union</span>[DefaultType, t.<span class="type">Any</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        maxsize: t.<span class="type">Union</span>[DefaultType, <span class="built_in">int</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        <span class="comment"># Internal use only</span></span></span><br><span class="line"><span class="params">        _transport: t.<span class="type">Optional</span>[Transport] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    </span>)</span><br></pre></td></tr></table></figure>

<p>源码对参数进行可分类，分别是：API、Node、Transport、Internal use only四个大类，还有一个必选的host参数。其实根据参数已经能够明白该库该如何使用了，以API为例，对应ES数据库的实际使用即可创建API接口。</p>
<p>同理，在源码中给出了一些其他操作，如create、delete、close等等。</p>
]]></content>
      <categories>
        <category>错误</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python海象语法</title>
    <url>/m42-orion/2022/05/22/python%E6%B5%B7%E8%B1%A1%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>在我的工作当中，无意间接触到了一个别人写的一段代码,像这样：<code>if (n := len(a)) &gt; 10:</code>，凭借我的直觉，我能够轻易的读懂这段代码，但是我却从来没见过，于是我搜了一下，才知道这是python3.8的新语法，叫做海象语法，因为冒号像眼睛，等号像牙齿，所以被成为海象语法。</p>
<h2 id="海象语法"><a href="#海象语法" class="headerlink" title="海象语法"></a>海象语法</h2><p>官方给出了几个案例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 赋值表达式有助于避免调用 len（） 两次</span></span><br><span class="line"><span class="keyword">if</span> (n := <span class="built_in">len</span>(a)) &gt; <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;List is too long (<span class="subst">&#123;n&#125;</span> elements, expected &lt;= 10)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一次用于测试是否发生了匹配，另一次用于提取子组</span></span><br><span class="line">discount = <span class="number">0.0</span></span><br><span class="line"><span class="keyword">if</span> (mo := re.search(<span class="string">r&#x27;(\d+)% discount&#x27;</span>, advertisement)):</span><br><span class="line">    discount = <span class="built_in">float</span>(mo.group(<span class="number">1</span>)) / <span class="number">100.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Loop over fixed length blocks</span></span><br><span class="line"><span class="keyword">while</span> (block := f.read(<span class="number">256</span>)) != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">    process(block)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其中表达式正文中还需要在筛选条件中计算的值</span></span><br><span class="line">[clean_name.title() <span class="keyword">for</span> name <span class="keyword">in</span> names</span><br><span class="line"> <span class="keyword">if</span> (clean_name := normalize(<span class="string">&#x27;NFC&#x27;</span>, name)) <span class="keyword">in</span> allowed_names]</span><br></pre></td></tr></table></figure>

<p>在原来的python语言当中，需要判断的时候不能够将表达式赋值给变量，因此在进行判断操作之前，必须首先对判断变量进行赋值，而海象运算符使用得当可以极大程度的减少对于冗余代码的使用，免去过多的赋值操作。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>该写点什么，还是算吧！</p>
]]></content>
      <categories>
        <category>海象语法</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>静态资源与动态资源</title>
    <url>/m42-orion/2022/05/29/%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E4%B8%8E%E5%8A%A8%E6%80%81%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<h2 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h2><p>简单理解WEB服务静态和动态资源请求过程 </p>
<ul>
<li>用户发起访问  </li>
<li>服务器端接收到请求，该请求到达服务器的内核空间，因为tcp/ip协议工作在内核空间；到达内核空间后，发现访问的是80端口的套接字，通过路由和相关解码，请求被转到服务器的用户空间，也就是转到了web服务上；  </li>
<li>请求到达用户空间后，发现请求的是一个文件，然后继续把请求转到内核空间，内核空间通过内核在磁盘上获取对应文件；  </li>
<li>请求在内核空间获取到对应文件后，把文件返回至用户空间即web服务；  </li>
<li>请求结果到达用户空间的web服务上后，把结果再通过套接字回到内核空间；  </li>
<li>内核空间把结果通过网络tcp/ip协议栈返回至客户端。  </li>
</ul>
<h2 id="动态资源请求"><a href="#动态资源请求" class="headerlink" title="动态资源请求"></a>动态资源请求</h2><p>简单理解WEB服务静态和动态资源请求过程</p>
<ul>
<li>用户发起访问  </li>
<li>服务器端接收到请求，该请求到达服务器的内核空间，因为tcp/ip协议工作在内核空间；到达内核空间后，发现访问的是80端口的套接字，通过路由和相关解码，请求被转到服务器的用户空间，也就是转到了web服务上；  </li>
<li>请求到达用户空间后，发现请求的是一个动态页面，然后根据相关协议调用php解释器程序；  </li>
<li>请求到达php解释器中，把请求转至内核空间从磁盘上获取对应文件；  </li>
<li>获取到文件后，请求到达用户空间的解释器中执行一遍；  </li>
<li>解释器把执行结果返回至web服务上，然后解释器进程自行销毁；  </li>
<li>请求结果到达用户空间的web服务上后，把结果再通过套接字回到内核空间；  </li>
<li>内核空间把结果通过网络tcp/ip协议栈返回至客户端。</li>
</ul>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>（fastapi三）中间件</title>
    <url>/m42-orion/2022/05/31/%EF%BC%88fastapi%E4%B8%89%EF%BC%89%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>blog_img/fastapi系列/（fastapi一）安装与简单使用/封面.jpg<br>“中间件”是一个函数,它在每个请求被特定的路径操作处理之前,以及在每个响应返回之前工作.</p>
<ul>
<li>它接收你的应用程序的每一个请求.  </li>
<li>然后它可以对这个请求做一些事情或者执行任何需要的代码.  </li>
<li>然后它将请求传递给应用程序的其他部分 (通过某种路径操作).  </li>
<li>然后它获取应用程序生产的响应 (通过某种路径操作).  </li>
<li>它可以对该响应做些什么或者执行任何需要的代码.  </li>
<li>然后它返回这个 响应.  </li>
</ul>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Request</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.middleware(<span class="params"><span class="string">&quot;http&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">add_process_time_header</span>(<span class="params">request: Request, call_next</span>):</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    response = <span class="keyword">await</span> call_next(request)</span><br><span class="line">    process_time = time.time() - start_time</span><br><span class="line">    response.headers[<span class="string">&quot;X-Process-Time&quot;</span>] = <span class="built_in">str</span>(process_time)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<p>其中：</p>
<ul>
<li>request：项目接受的请求，可以获取请求信息  </li>
<li>call_next：将 request 传递给相应的 路径操作.然后它将返回由相应的路径操作生成的 response.</li>
<li> response.headers[“X-Process-Time”]：修改返回头信息</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>中间件能够在每一个请求接受之前对请求进行操作，捕获请求的信息，并对请求或者返回信息进行修改。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>fastapi</tag>
      </tags>
  </entry>
  <entry>
    <title>127.0.0.1与localhost的区别</title>
    <url>/m42-orion/2022/05/31/127-0-0-1%E4%B8%8Elocalhost%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id="127-0-0-1"><a href="#127-0-0-1" class="headerlink" title="127.0.0.1"></a>127.0.0.1</h2><ul>
<li>地址而非域名</li>
<li>127.0.0.1在Windows等系统的正确解释是：本机地址（本机服务器或回送地址）  </li>
<li>127.0.0.1是一个环回地址，根本不是一个网络地址  </li>
<li>127.0.0.1是通过网卡传输的，依赖网卡，并受到网络防火墙和网卡相关的限制</li>
<li>检测本机的回路是否正常，如果得到一个成功的ping返回，则可以认定你的IP栈是被初始化过的，TCP/IP协议安装正确。如果失败，那么你的IP栈失败，TCP/IP协议必须重新安装</li>
<li>不联网、网卡传输，受防火墙和网卡的限制、本机访问    </li>
</ul>
<h2 id="localhost"><a href="#localhost" class="headerlink" title="localhost"></a>localhost</h2><ul>
<li>域名而非地址</li>
<li>localhost也叫local ，正确的解释是：本地服务器</li>
<li>localhost 是一个域名，在过去它指向 127.0.0.1 这个IP地址。在操作系统支持 ipv6 后，它同时还指向ipv6 的地址 [::1] </li>
<li>在计算机网络中，localhost是回路网络接口的一个标准主机名，相对应的ip地址是127.0.0.1</li>
<li>localhost是一个保留域名，同时也是一个特殊的DNS主机名，代表分配给引用这个名称的计算机的ip地址，即所在计算机本身</li>
<li>localhost是不经过网卡传输的，它不受网络防火墙和网卡相关的限制</li>
<li>windows系统，在host文件中，localhost指向的ip是127.0.0.1,可通过编辑host文件改变指向</li>
<li>不联网、不使用网卡，不受防火墙和网卡的限制、本机访问</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>loclhost是作为域名被解析的，因此两者虽然有类似的效果但是并不相同，一般设置程序时本地服务用localhost是最好的，localhost不会解析成IP，也不会占用网卡、网络资源。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>（fastapi四）文件传输</title>
    <url>/m42-orion/2022/06/07/%EF%BC%88fastapi%E5%9B%9B%EF%BC%89%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/</url>
    <content><![CDATA[<h2 id="StreamingResponse"><a href="#StreamingResponse" class="headerlink" title="StreamingResponse"></a>StreamingResponse</h2><p>先看案例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> fastapi.responses <span class="keyword">import</span> StreamingResponse</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">fake_video_streamer</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">b&quot;some fake video bytes&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">return</span> StreamingResponse(fake_video_streamer())</span><br></pre></td></tr></table></figure>

<p>该方法在返回过程当时会将数据以流的形式进行返回,官方对此描述：采用异步生成器或普通生成器/迭代器，然后流式传输响应主体。在作用与文件返回的时候可以这样写：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> fastapi.responses <span class="keyword">import</span> StreamingResponse</span><br><span class="line"></span><br><span class="line">some_file_path = <span class="string">&quot;large-video-file.mp4&quot;</span></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iterfile</span>():  <span class="comment"># (1)</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(some_file_path, mode=<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> file_like:  <span class="comment"># (2)</span></span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">from</span> file_like  <span class="comment"># (3)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> StreamingResponse(iterfile(), media_type=<span class="string">&quot;video/mp4&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="FileResponse"><a href="#FileResponse" class="headerlink" title="FileResponse"></a>FileResponse</h2><p>与其他响应类型相比，接受不同的参数集进行实例化：  </p>
<ul>
<li>path - 要流式传输的文件的文件路径。  </li>
<li>headers - 任何自定义响应头，传入字典类型。  </li>
<li>media_type - 给出媒体类型的字符串。如果未设置，则文件名或路径将用于推断媒体类型。  </li>
<li>filename - 如果给出，它将包含在响应的 Content-Disposition 中。  </li>
</ul>
<p>文件响应将包含适当的 Content-Length，Last-Modified 和 ETag 的响应头。 使用案例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> fastapi.responses <span class="keyword">import</span> FileResponse</span><br><span class="line"></span><br><span class="line">some_file_path = <span class="string">&quot;large-video-file.mp4&quot;</span></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">return</span> FileResponse(some_file_path)</span><br></pre></td></tr></table></figure>

<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>两种都是文件传输的一种方式，但是相对于<code>FileResponse</code>,如果面临文件较大的话不推荐使用，虽然该方法可以增加文件大小的容量，但是大文件传输与返回更推荐使用<code>StreamingResponse</code></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>fastapi</tag>
      </tags>
  </entry>
  <entry>
    <title>文章关键字提取</title>
    <url>/m42-orion/2022/06/27/%E6%96%87%E7%AB%A0%E5%85%B3%E9%94%AE%E5%AD%97%E6%8F%90%E5%8F%96/</url>
    <content><![CDATA[<h2 id="关键字提取"><a href="#关键字提取" class="headerlink" title="关键字提取"></a>关键字提取</h2><p>关键字提取作为文本分析的重要一环，现在已经拥有很多工具可以使用，一般工具被分为两类，第一类是基于算法的关键字提取，也就是将文本进行分词操作后对文本当中词语出现的频率做出统计，同时对一些助词或者语气词进行过滤操作得到较为准确的关键词。第二类就是基于机器学习的关键词提取，需要对文章进行相应的向量计算，具体的算法需要依据实际情况考量。本文只展示第一种：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加载模块</span></span><br><span class="line"><span class="keyword">from</span> textrank4ch.TextRank4Keyword <span class="keyword">import</span> TextRank4Keywords</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 准备预料, 输入时一个字符长串, 可含特殊字符</span></span><br><span class="line">corpus =  <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">据了解，为全面强化边境禁毒“清源断流”，严查严打跨境涉毒违法犯罪，国家移民管理机构广大移民管理警察在血与火、生与死的考验中，不惧牺牲，勇于担当，以“边境多查毒、内地少受害”为使命，昼夜坚守边境缉毒一线，充分发挥党政军警民合力强边固防机制作用，综合采取人防、物防、技防措施，严密边境前沿查堵、强化专案攻坚、紧抓边境辖区社会面管控、深化口岸边境执法协作，全力遏制境外毒品渗透内流和制毒物品走私出境，坚决筑起口岸边境禁毒的坚固防线。其间，广大移民管理警察还深入边境辖区村寨、学校，大力宣传法律法规及毒品危害，广泛发动群众参与到禁毒人民战争中来，有力构建群防群治的禁毒网络，营造了边境辖区对涉毒违法犯罪“人人喊打”的良好局面。</span></span><br><span class="line"><span class="string">国家移民管理局有关负责人表示，下一步，移民管理机构将继续深入研判毒品犯罪藏毒方式、涉毒群体、贩运方式、绕关避卡等规律特点，动态调整布设执勤点位织密边境查缉堵截网络；以大案复盘扩线为突破口，摸排盘踞本地、辐射周边的涉毒群体，深挖贩毒团伙网络，采取专班运作、专案经营、挂牌督办、多警种协同作战、口岸边境执法协作等方式推进大案专案侦办；结合“法治宣传固边防”活动，加大边境辖区禁毒宣传力度，持续开展“禁毒流动课堂”“禁毒宣传下基层”“全民禁毒宣传月”等集中宣传活动，努力提高群众自觉参与禁毒斗争的意识，进一步阻断境外毒品渗透内流通道，最大限度减少毒品渗透危害。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对输入进行分析、得到全量的关键词相关信息, 如权重(PR)、词性</span></span><br><span class="line">t4kw = TextRank4Keywords()</span><br><span class="line">t4kw.analyze(text=corpus)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 再基于上述analyze的结果进行按需提取需要的关键字</span></span><br><span class="line"><span class="built_in">print</span>(t4kw.get_key_words(<span class="number">4</span>))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>关于office解密的一个库</title>
    <url>/m42-orion/2022/07/17/%E5%85%B3%E4%BA%8Eoffice%E8%A7%A3%E5%AF%86%E7%9A%84%E4%B8%80%E4%B8%AA%E5%BA%93/</url>
    <content><![CDATA[<p>在工作中偶然的机会需要我使用python实现word的解密，已知密码需要解密或者进行爆破行为，但是苦苦没有找到合适的方法，但是偶然间fa</p>
<h2 id="msoffcrypto-tool"><a href="#msoffcrypto-tool" class="headerlink" title="msoffcrypto-tool"></a><code>msoffcrypto-tool</code></h2><p>msoffcrypto-tool（以前称为ms-offcrypto-tool）是Python工具和库，用于使用密码，中间密钥或生成其托管密钥的私钥解密加密的MS Office文件。</p>
<p><strong>安装：</strong> <code>pip install msoffcrypto-tool</code></p>
<p><strong>使用方式：</strong> <code>msoffcrypto-tool encrypted.docx decrypted.docx -p 你的密码</code></p>
<p><strong>测试是否有加密：</strong> <code>msoffcrypto-tool document.doc --test -v</code></p>
<h3 id="代码用法"><a href="#代码用法" class="headerlink" title="代码用法"></a>代码用法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> msoffcrypto</span><br><span class="line"></span><br><span class="line">encrypted = <span class="built_in">open</span>(<span class="string">&quot;encrypted.docx&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">file = msoffcrypto.OfficeFile(encrypted)</span><br><span class="line"></span><br><span class="line">file.load_key(password=<span class="string">&quot;Passw0rd&quot;</span>)  <span class="comment"># Use password</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;decrypted.docx&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    file.decrypt(f)</span><br><span class="line"></span><br><span class="line">encrypted.close()</span><br></pre></td></tr></table></figure>

<p>结合pandas</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> msoffcrypto</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">decrypted = io.BytesIO()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;encrypted.xlsx&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    file = msoffcrypto.OfficeFile(f)</span><br><span class="line">    file.load_key(password=<span class="string">&quot;Passw0rd&quot;</span>)  <span class="comment"># Use password</span></span><br><span class="line">    file.decrypt(decrypted)</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(decrypted)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure>

<h3 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Verify password before decryption (default: False)</span></span><br><span class="line"><span class="comment"># The ECMA-376 Agile/Standard crypto system allows one to know whether the supplied password is correct before actually decrypting the file</span></span><br><span class="line"><span class="comment"># Currently, the verify_password option is only meaningful for ECMA-376 Agile/Standard Encryption</span></span><br><span class="line">file.load_key(password=<span class="string">&quot;Passw0rd&quot;</span>, verify_password=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use private key</span></span><br><span class="line">file.load_key(private_key=<span class="built_in">open</span>(<span class="string">&quot;priv.pem&quot;</span>, <span class="string">&quot;rb&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use intermediate key (secretKey)</span></span><br><span class="line">file.load_key(secret_key=binascii.unhexlify(<span class="string">&quot;AE8C36E68B4BB9EA46E5544A5FDB6693875B2FDE1507CBC65C8BCF99E25C2562&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check the HMAC of the data payload before decryption (default: False)</span></span><br><span class="line"><span class="comment"># Currently, the verify_integrity option is only meaningful for ECMA-376 Agile Encryption</span></span><br><span class="line">file.decrypt(<span class="built_in">open</span>(<span class="string">&quot;decrypted.docx&quot;</span>, <span class="string">&quot;wb&quot;</span>), verify_integrity=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>（fastapi五）后台执行程序</title>
    <url>/m42-orion/2022/07/17/%EF%BC%88fastapi%E4%BA%94%EF%BC%89%E5%90%8E%E5%8F%B0%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<p>在web开发过程当中，总会需要一种情况，就是用户发送完请求之后只需要确认自己已经发送了指令，并不着急等待最终结果的返回，仅仅需要一个响应状态，如果这个时候程序要等待执行完毕后返回结果，肯定是不合理的，因此fastapi提供一种自己的后台程序处理方法。</p>
<h2 id="BackgroundTasks"><a href="#BackgroundTasks" class="headerlink" title="BackgroundTasks"></a>BackgroundTasks</h2><p>代码案例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> BackgroundTasks, FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_notification</span>(<span class="params">email: <span class="built_in">str</span>, message=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;log.txt&quot;</span>, mode=<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> email_file:</span><br><span class="line">        content = <span class="string">f&quot;notification for <span class="subst">&#123;email&#125;</span>: <span class="subst">&#123;message&#125;</span>&quot;</span></span><br><span class="line">        email_file.write(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/send-notification/&#123;email&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">send_notification</span>(<span class="params">email: <span class="built_in">str</span>, background_tasks: BackgroundTasks</span>):</span><br><span class="line">    background_tasks.add_task(write_notification, email, message=<span class="string">&quot;some notification&quot;</span>) <span class="comment"># 执行后台任务</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Notification sent in the background&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>结合依赖注入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> BackgroundTasks, Depends, FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_log</span>(<span class="params">message: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;log.txt&quot;</span>, mode=<span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> log:</span><br><span class="line">        log.write(message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_query</span>(<span class="params">background_tasks: BackgroundTasks, q: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> q:</span><br><span class="line">        message = <span class="string">f&quot;found query: <span class="subst">&#123;q&#125;</span>\n&quot;</span></span><br><span class="line">        background_tasks.add_task(write_log, message)</span><br><span class="line">    <span class="keyword">return</span> q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/send-notification/&#123;email&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">send_notification</span>(<span class="params">email: <span class="built_in">str</span>, </span></span><br><span class="line"><span class="params">                            background_tasks: BackgroundTasks, </span></span><br><span class="line"><span class="params">                            q: <span class="built_in">str</span> = Depends(<span class="params">get_query</span>)</span>):</span><br><span class="line">    message = <span class="string">f&quot;message to <span class="subst">&#123;email&#125;</span>\n&quot;</span></span><br><span class="line">    background_tasks.add_task(write_log, message)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Message sent&quot;</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>fastapi</tag>
      </tags>
  </entry>
  <entry>
    <title>中文ocr</title>
    <url>/m42-orion/2022/07/17/%E4%B8%AD%E6%96%87ocr/</url>
    <content><![CDATA[<h2 id="cnocr"><a href="#cnocr" class="headerlink" title="cnocr"></a>cnocr</h2><p>cnocr是用来做中文OCR的Python 3包。cnocr自带了训练好的识别模型，所以安装后即可直接使用。目前使用的识别模型是crnn，识别准确度约为 98.7%。</p>
<p><strong>安装：</strong><code>pip install cnocr</code></p>
<p>代码引用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> cnocr <span class="keyword">import</span> CnOcr </span><br><span class="line">ocr = CnOcr() </span><br><span class="line">res = ocr.ocr_for_single_line(<span class="string">&#x27;test.png&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Predicted Chars:&quot;</span>, res)</span><br></pre></td></tr></table></figure>

<p>首次使用cnocr时，系统会自动从Dropbox下载zip格式的模型压缩文件，并存于 <del>/.cnocr目录。 下载后的zip文件代码会自动对其解压，然后把解压后的模型相关文件放于</del>/.cnocr/models目录。 如果系统不能自动从Dropbox成功下载zip文件，则需要手动下载此zip文件并把它放于 ~/.cnocr目录。 另一个下载地址是百度云盘(提取码为pg26)。 放置好zip文件后，后面的事代码就会自动执行了。</p>
<p>但是这样的识别并不准确，当图片中的文字太复杂的时候就需要另一个库的支持用于识别文字。</p>
<h2 id="cnstd"><a href="#cnstd" class="headerlink" title="cnstd"></a>cnstd</h2><p><strong>安装：</strong><code>pip install cnstd</code>  </p>
<p>该库可以与cnocr无缝衔接：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> cnstd <span class="keyword">import</span> CnStd</span><br><span class="line"><span class="keyword">from</span> cnocr <span class="keyword">import</span> CnOcr</span><br><span class="line"></span><br><span class="line">std = CnStd()</span><br><span class="line">cn_ocr = CnOcr()</span><br><span class="line"></span><br><span class="line">box_infos = std.detect(<span class="string">&#x27;examples/taobao.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> box_info <span class="keyword">in</span> box_infos[<span class="string">&#x27;detected_texts&#x27;</span>]:</span><br><span class="line">    cropped_img = box_info[<span class="string">&#x27;cropped_img&#x27;</span>]</span><br><span class="line">    ocr_res = cn_ocr.ocr_for_single_line(cropped_img)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ocr result: %s&#x27;</span> % <span class="built_in">str</span>(ocr_res))</span><br></pre></td></tr></table></figure>

<p>官方链接： <img src="https://github.com/breezedeus/cnstd" alt="cnstd"> <img src="https://github.com/breezedeus/cnocr" alt="cnocr"></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>git分支怎样改名字</title>
    <url>/m42-orion/2022/07/25/git%E5%88%86%E6%94%AF%E6%80%8E%E6%A0%B7%E6%94%B9%E5%90%8D%E5%AD%97/</url>
    <content><![CDATA[<p>假设分支名称为oldName,想要修改为 newName</p>
<p>1.本地分支重命名(还没有推送到远程)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -m oldName newName</span><br></pre></td></tr></table></figure>

<p>2.远程分支重命名 (已经推送远程-假设本地分支和远程对应分支名称相同)</p>
<p>a. 重命名远程分支对应的本地分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -m oldName newName</span><br></pre></td></tr></table></figure>

<p>b. 删除远程分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push --delete origin oldName</span><br></pre></td></tr></table></figure>

<p>c. 上传新命名的本地分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin newName</span><br></pre></td></tr></table></figure>

<p>d.把修改后的本地分支与远程分支关联</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch --set-upstream-to origin/newName</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>supervisor</title>
    <url>/m42-orion/2022/07/17/supervisor/</url>
    <content><![CDATA[<h2 id="supervisor"><a href="#supervisor" class="headerlink" title="supervisor"></a>supervisor</h2><p>supervisor是一个Python开发的通用的进程管理程序，可以管理和监控Linux上面的进程，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启，但它不能管理原本就是daemon的进程。并且supervisor本身自己也是一个python库，因此可以使用pip进行直接安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install supervisor</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>supervisor管理进程依赖的相应的配置文件，配置文件可以通过命令生成：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">echo_supervisord_conf &gt; /app/install_files/supervisor.conf</span><br></pre></td></tr></table></figure>

<p>配置文件当中有许多可以配置的选项，这里不一一列举，只给出部分配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[program:project_name]</span><br><span class="line">directory = 工作目录</span><br><span class="line"><span class="built_in">command</span> = 脚本的启动命令</span><br><span class="line">autostart = <span class="literal">true</span></span><br><span class="line">autorestart = <span class="literal">true</span></span><br><span class="line">user = loanward</span><br><span class="line">stdout_logfile = /data/log/pro_stdout.log</span><br></pre></td></tr></table></figure>

<ul>
<li><code>project_name</code>: 必须是唯一的，否则将会出现错乱  </li>
<li><code>directory</code>: 填写你启动脚本时的工作目录，如果你使用脚本的绝对目录，那么directory可以不设置  </li>
<li><code>command</code>:是执行脚本的命令，不需要使用nohup让其变为后代进程，supervisor会自动将其变为后台进程  </li>
<li><code>autostart</code>: 配置为True， supervisor 启动时，任务跟随启动  </li>
<li><code>autorestart</code>: 配置为True， 进程不存在时会自动重启， 默认重启3次，想修改重启次数，可以配置startretries， 设置最多重启的次数  </li>
<li><code>user</code>: 设置启动任务时所用的用户，supervisor 有必要使用root账号启动，这样才有权限配置其他启动账号  </li>
<li><code>stdout_logfile</code>: 配置输出日志  </li>
</ul>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">supervisord -c /etc/supervisord.conf</span><br></pre></td></tr></table></figure>
<p>这里路径为你当前文件所处的路径</p>
<p>其他命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">supervisorctl status                         <span class="comment"># 查看进程状态</span></span><br><span class="line">supervisorctl stop project_name              <span class="comment"># 终止某个进程</span></span><br><span class="line">supervisorctl start project_name             <span class="comment"># 启动某个进程</span></span><br><span class="line">supervisorctl restart project_name           <span class="comment"># 重启某个进程</span></span><br><span class="line">supervisorctl reread                         <span class="comment"># 更新配置，根据最新的配置启动程序，会启动已经运行的程序</span></span><br><span class="line">supervisorctl update                         <span class="comment"># 更新配置，重启配置有变化的进程，不会重启那些配置没有变化</span></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当你的程序需要对程序的进程进行管理的时候，尤其是部署服务的时候，这个工具非常适合python。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git新增命令</title>
    <url>/m42-orion/2022/07/25/git%E6%96%B0%E5%A2%9E%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>在以前的git切换分支还有回滚版本的时候使用命令<code>checkout</code>，但是这略微繁琐了一点，也不容区分与记忆，因此后来git就更新了两个命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git switch aaa <span class="comment"># 切换到 aaa分支</span></span><br><span class="line">$ git switch -c aaa <span class="comment"># 创建aaa，然后切换到 aaa分支</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ git restore [--worktree] aaa <span class="comment"># 从staged中恢复aaa到worktree</span></span><br><span class="line">$ git restore --staged aaa <span class="comment"># 从repo中恢复aaa到staged</span></span><br><span class="line">$ git restore --staged --worktree aaa <span class="comment"># 从repo中恢复aaa到staged和worktree</span></span><br><span class="line">$ git restore --<span class="built_in">source</span> dev aaa <span class="comment"># 从指定commit中恢复aaa到worktree</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个更新是很早以前的事情了，但是碍于现在有时候开发git版本被统一，没有跟上导致查到命令没办法使用，所以记录一下而已，所以这篇文章的配乐也不是那么促进学习。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>python进程基础</title>
    <url>/m42-orion/2022/08/01/python%E8%BF%9B%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>在学习python进程相关知识的时候，查询各种网站或者博客，对于进程的解释都没有那么全面，有时候仅给出部分案例，导致代码有时候爆出一些莫名其妙的错误，因此写下这篇基础文章。</p>
<h2 id="python-的三种进程模式"><a href="#python-的三种进程模式" class="headerlink" title="python 的三种进程模式"></a>python 的三种进程模式</h2><p>在python当中进程被分为三种模式，不同的模式有不同的约束条件，也有不同的运行场景，需要依据情况而定：</p>
<table>
<thead>
<tr>
<th><code>fork</code></th>
<th><code>spawn</code></th>
<th><code>forkserver</code></th>
</tr>
</thead>
<tbody><tr>
<td>拷贝几乎程序拥有的所有资源</td>
<td>需要从启动函数处传入程序运行的必要资源</td>
<td>需要从启动函数处传入程序运行的必要资源</td>
</tr>
<tr>
<td>支持文件对象/线程锁等传参</td>
<td>不支持文件对象/线程锁等传参</td>
<td>不支持文件对象/线程锁等传参</td>
</tr>
<tr>
<td>unix</td>
<td>unix/win</td>
<td>部分unix</td>
</tr>
<tr>
<td>快</td>
<td>慢</td>
<td>—</td>
</tr>
<tr>
<td>任意位置创建</td>
<td>main函数开始</td>
<td>main函数开始</td>
</tr>
</tbody></table>
<blockquote>
<p>注：main函数指:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">   <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>并非指代函数名为main函数的函数。</p>
</blockquote>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="fork"><a href="#fork" class="headerlink" title="fork"></a><code>fork</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>():</span><br><span class="line">    <span class="built_in">print</span>(ele) <span class="comment"># 不需要传参，创建进程的时候会拷贝资源</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    multiprocessing.set_start_method(<span class="string">&quot;fork&quot;</span>)</span><br><span class="line">    ele = []</span><br><span class="line"></span><br><span class="line">    res = multiprocessing.Process(target=task)</span><br><span class="line">    res.start()</span><br></pre></td></tr></table></figure>

<h3 id="spawn"><a href="#spawn" class="headerlink" title="spawn"></a><code>spawn</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">ele</span>):</span><br><span class="line">    <span class="built_in">print</span>(ele) <span class="comment"># 需要传参,否则会报错，但是不能传递文件对象/线程锁等</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    multiprocessing.set_start_method(<span class="string">&quot;spawn&quot;</span>)</span><br><span class="line">    ele = []</span><br><span class="line"></span><br><span class="line">    res = multiprocessing.Process(target=task,args=(ele,))</span><br><span class="line">    res.start()</span><br></pre></td></tr></table></figure>

<h3 id="forkserver"><a href="#forkserver" class="headerlink" title="forkserver"></a><code>forkserver</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">ele</span>):</span><br><span class="line">    <span class="built_in">print</span>(ele) <span class="comment"># 需要传参,否则会报错，但是不能传递文件对象/线程锁等</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    multiprocessing.set_start_method(<span class="string">&quot;forkserver&quot;</span>)</span><br><span class="line">    ele = []</span><br><span class="line"></span><br><span class="line">    res = multiprocessing.Process(target=task,args=(ele,))</span><br><span class="line">    res.start()</span><br></pre></td></tr></table></figure>

<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>进程创建的时候提到了mmain函数，这里补充一下什么是main函数，在程序运行的过程当中main函数扮演的什么角色。</p>
<h3 id="name-是个啥？"><a href="#name-是个啥？" class="headerlink" title="__name__是个啥？"></a><code>__name__</code>是个啥？</h3><ul>
<li><code>__name__</code>是一个python的内置函数</li>
<li>__name__是python的一个内置类属性，它天生就存在于一个 python 程序中</li>
<li>直接运行python程序时，__name__的值为<code>&quot;__main__&quot;</code></li>
<li>而在其它程序中导入.py文件运行时，__name__的值为文件名，即模块名</li>
</ul>
<h3 id="if-name-quot-main-quot-的作用"><a href="#if-name-quot-main-quot-的作用" class="headerlink" title="if  __name__ == &quot;__main__&quot;的作用"></a><code>if  __name__ == &quot;__main__&quot;</code>的作用</h3><p>最简单的情况：运行当前的module（Py文件）时，因为__name__为”<strong>main</strong>“，所以__main__下方的代码会被顺序执行到。除了这种情况，还有就是在B文件导入A文件的时候，<code>if  __name__ == &quot;__main__&quot;</code>条件下的代码模块不会被一同导入执行。</p>
]]></content>
      <categories>
        <category>学习</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>python进程基本使用</title>
    <url>/m42-orion/2022/08/01/python%E8%BF%9B%E7%A8%8B%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="p-start-与-p-join"><a href="#p-start-与-p-join" class="headerlink" title="p.start() 与 p.join()"></a><code>p.start()</code> 与 <code>p.join()</code></h3><ul>
<li><code>p.start()</code>:当前进程准备就绪，等待被CPU调度，简单理解也就是启动进程</li>
<li><code>p.join()</code>:等待当前进程的任务执行完毕后再向下继续执行</li>
</ul>
<p>代码如下：  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">ele</span>):</span><br><span class="line">    <span class="built_in">print</span>(ele)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;执行中&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    multiprocessing.set_start_method(<span class="string">&quot;spawn&quot;</span>)</span><br><span class="line">    ele = []</span><br><span class="line"></span><br><span class="line">    res = multiprocessing.Process(target=task,args=(ele,))</span><br><span class="line">    res.start()</span><br><span class="line">    res.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;继续执行&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><code>res.join()</code>的出现会使得程序在执行完子进程之后再继续执行主进程，当然，上述案例已经让程序按顺序执行了，进程意义不大了。</p>
<h3 id="p-daemon-bool-守护进程（必须放置在start之前）"><a href="#p-daemon-bool-守护进程（必须放置在start之前）" class="headerlink" title="p.daemon = bool,守护进程（必须放置在start之前）"></a><code>p.daemon = bool</code>,守护进程（必须放置在start之前）</h3><ul>
<li><code>p.daemon = True</code>,设置为守护进程，主进程执行完毕后子进程也将被自动关闭。</li>
<li><code>p.daemon = Flase</code>,设置为非守护进程，主进程等待子进程执行结束之后，主进程才会被关闭结束。</li>
</ul>
<h3 id="获取进程的信息"><a href="#获取进程的信息" class="headerlink" title="获取进程的信息"></a>获取进程的信息</h3><ul>
<li><code>os.getpid</code>与<code>os.getppid</code>:获取进程与父进程的pid</li>
<li><code>len(threading.enumerate())</code>:获取进程下线程个数</li>
<li><code>p.name = &quot;第一个进程&quot;</code>:设置进程名字</li>
<li><code>multiprocessing.current_process().name</code>:获取当前进程的名字</li>
</ul>
<h3 id="自定义进程类"><a href="#自定义进程类" class="headerlink" title="自定义进程类"></a>自定义进程类</h3><p>可以直接讲线程需要做的事情写run方法当中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyProcess</span>(multiprocessing.Process):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始执行&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    multiprocessing.set_start_method(<span class="string">&quot;spawn&quot;</span>)</span><br><span class="line">    p = MyProcess(args=(<span class="string">&quot;info&quot;</span>,))</span><br><span class="line">    p.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;继续执行&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="CPU个数"><a href="#CPU个数" class="headerlink" title="CPU个数"></a>CPU个数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">multiprocessing.cpu_count()</span><br></pre></td></tr></table></figure>

<h2 id="数据共享"><a href="#数据共享" class="headerlink" title="数据共享"></a>数据共享</h2><p>数据共享分为三种情况</p>
<ul>
<li>第一种情况是进程方式选择为<code>fork</code>模式，子进程拷贝了主进程的资源与数据，但是拷贝了已经是完全一个新的变量了，子进程改变并不能导致主进程改变，但是可以共享<code>文件对象对象</code>，实现多个进程同时写入一个文件当中。</li>
<li>第二种情况是接入第三方数据共享平台，如多个进程操控同一个数据库或者同一个文件，通过修改第三方的数据进程数据共享。</li>
<li>最后一种情况是创建一个数据共享对象实现数据共享，案例如下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing、</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">key,value</span>):</span><br><span class="line">    dic[key]=value</span><br><span class="line"></span><br><span class="line"><span class="comment"># 共享字典</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    m = multiprocessing.Manager()</span><br><span class="line">    dic = m.<span class="built_in">dict</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">         p = multiprocessing.Process(target=task,args=(i,<span class="number">100</span>))</span><br><span class="line">         p.start()</span><br><span class="line">         p.join()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">args</span>):</span><br><span class="line">    q.put(args)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 共享队列</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    q = multiprocessing.Queue()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        p = multiprocessing.Process(target=task,args=(i,))</span><br><span class="line">        p.start()</span><br><span class="line">        p.join()</span><br><span class="line">    v1 = q.get()</span><br><span class="line">    <span class="built_in">print</span>(v1)</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>学习</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>三层架构/MVC/MTV</title>
    <url>/m42-orion/2022/08/01/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84-MVC-MTV/</url>
    <content><![CDATA[<p>在以前的时候，我总是把这三者混为一谈，总以为是不同语言或者不同环境条件下的称呼或者变种，后来我逐渐明白这是不一样的。</p>
<h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><p>web开发其实并不一定需要遵循某一个框架进行开发，其实上能够实现web服务就行，但是在长期的摸索跟探究过程中，前人根据自己的经验进行总结，得出依据某个框架或者某个模式进行开发是一个较为高效的过程。</p>
<ul>
<li><strong>界面层（表示层）</strong>:用户看的界面。用户可以通过界面上的组件和服务器进行交互</li>
<li><strong>业务处理逻辑</strong>:处理业务逻辑的</li>
<li><strong>数据访问层</strong>:操作数据存储文件</li>
</ul>
<p>本质上这是一个线性结构，从上往下：</p>
<ul>
<li>表示层请求数据，发送给业务逻辑层</li>
<li>业务逻辑层根据情况去数据访问层进行数据查询</li>
</ul>
<p>从下往上：</p>
<ul>
<li>数据访问层提交原始数据给业务逻辑层</li>
<li>业务逻辑层将处理后的数据提交给表示层</li>
</ul>
<p>整个过程是一个线性结构从上至下的请求数据，数据从下往上进行返回</p>
<h3 id="三层架构的优缺点"><a href="#三层架构的优缺点" class="headerlink" title="三层架构的优缺点"></a>三层架构的优缺点</h3><p>优点:<br>1、高内聚，低耦合<br>2、方便维护，易于扩展<br>3、开发人员可以只关注某一层，有利于分工协作，加快开发速度  </p>
<p>缺点:<br>1、降低了系统的性能。这是不言而喻的。如果不采用分层式结构，很多业务可以直接造访数据库，以此获取相应的数据，如今却必须通过中间层来完成。<br>2、有时会导致级联的修改。这种修改尤其体现在自上而下的方向。如果在表示层中需要增加一个功能，为保证其设计符合分层式结构，可能需要在相应的业务逻辑层和数据访问层中都增加相应的代码。<br>3、增加了代码量，增加了工作量  </p>
<h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p><strong>M-model模型:</strong> 数据存储层，和数据库打交道。<br><strong>V-view视图:</strong> 视图层，用户看到并与之交互的界面，如由html元素组成的网页界面，或软件的客户端界面。<br><strong>C-controler控制器:</strong> 控制层，控制器把视图层所给的指令用来检索数据层的数据，该层编写代码产生结果并输出。</p>
<p>这个模型的运行过程如下：</p>
<ul>
<li>用户与人机交互输入信息到控制器</li>
<li>控制器将数据指令传递给业务模型</li>
<li>业务模型从数据库当中进行数据从存取</li>
<li>最后根据不同的业务逻辑选择不同的视图</li>
<li>视图给用户之后，用户再选择下一步操作</li>
</ul>
<p>相比于三层模型，MVC没有直接与数据库进行交互，而是通过模型操控数据库，同时根据：用户-&gt;控制器-&gt;模型-&gt;视图-&gt;用户形成一个闭环。相比于三层结构的层层深入再返回，这就不再是一个线性结构，而是一个基于用户操作三角闭环结构。</p>
<h3 id="MVC的优点"><a href="#MVC的优点" class="headerlink" title="MVC的优点"></a>MVC的优点</h3><p>1.<strong>耦合性低</strong>，视图层和业务层分离，这样就允许更改视图层代码而不用重新编译模型和控制器代码，同样，一个应用的业务流程或者业务规则的改变只需要改动MVC的模型层即可。因为模型与控制器和视图相分离，所以很容易改变应用程序的数据层和业务规则。</p>
<p>2.<strong>重用性高</strong>，MVC模式允许使用各种不同样式的视图来访问同一个服务器端的代码，因为多个视图能共享一个模型，它包括任何WEB（HTTP）浏览器或者无线浏览器（wap），比如，用户可以通过电脑也可通过手机来订购某样产品，虽然订购的方式不一样，但处理订购产品的方式是一样的。由于模型返回的数据没有进行格式化，所以同样的构件能被不同的界面使用。</p>
<p>3.<strong>部署快，生命周期成本低</strong>，MVC使开发和维护用户接口的技术含量降低。使用MVC模式使开发时间得到相当大的缩减，它使程序员（Java开发人员）集中精力于业务逻辑，界面程序员（HTML和JSP开发人员）集中精力于表现形式上。</p>
<p>4.<strong>可维护性高</strong>，分离视图层和业务逻辑层也使得WEB应用更易于维护和修改。</p>
<h3 id="MVC的缺点"><a href="#MVC的缺点" class="headerlink" title="MVC的缺点"></a>MVC的缺点</h3><p>1.<strong>完全理解MVC比较复杂</strong>，由于MVC模式提出的时间不长，加上同学们的实践经验不足，所以完全理解并掌握MVC不是一个很容易的过程。</p>
<p>2.<strong>调试困难</strong>，因为模型和视图要严格的分离，这样也给调试应用程序带来了一定的困难，每个构件在使用之前都需要经过彻底的测试。</p>
<p>3.<strong>不适合小型，中等规模的应用程序</strong>，在一个中小型的应用程序中，强制性的使用MVC进行开发，往往会花费大量时间，并且不能体现MVC的优势，同时会使开发变得繁琐。</p>
<p>4.<strong>增加系统结构和实现的复杂性</strong>，对于简单的界面，严格遵循MVC，使模型、视图与控制器分离，会增加结构的复杂性，并可能产生过多的更新操作，降低运行效率。</p>
<p>5.<strong>视图与控制器间的过于紧密的连接并且降低了视图对模型数据的访问</strong>，视图与控制器是相互分离，但却是联系紧密的部件，视图没有控制器的存在，其应用是很有限的，反之亦然，这样就妨碍了他们的独立重用。依据模型操作接口的不同，视图可能需要多次调用才能获得足够的显示数据。对未变化数据的不必要的频繁访问，也将损害操作性能。</p>
<h2 id="MTV"><a href="#MTV" class="headerlink" title="MTV"></a>MTV</h2><p><strong>M-Model模型:</strong> 数据存储层，和数据库打交道。相当于mvc的m</p>
<p><strong>T-Template模板:</strong> 模板层，用来处理页面的显示。相当于mvc的v</p>
<p><strong>V-View视图:</strong> 业务逻辑层，处理具体的业务逻辑，如下图所示，它的作用是通过请求响应获取Model 层，把Model层与 Template层联通。相当于mvc的c</p>
<p>第一次遇见MTV的时候是学习Django的时候，虽然在通用的描述过程当中，会将MTV与MCV相对比起来，建立对应关系，但是其本质运行逻辑是有一定不同的，不能够完全对比。</p>
<p>在MTV中存在以下几种数据交换或者请求：</p>
<ul>
<li>网络请求根据web服务器找到web框架中的路由</li>
<li>路由将消息传递给视图</li>
<li>视图可以发消息给模型，模型也能够直接返回视图信息。</li>
<li>视图可以操作模板，模板也能够直接返回模板结果给视图。</li>
<li>模型也能通过模板语言与模板进行数据交互形成有数据的模板。</li>
<li>最后结构再通过视图从新根据路由原路返回。</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>RGB与CMYK</title>
    <url>/m42-orion/2022/08/01/RGB%E4%B8%8ECMYK/</url>
    <content><![CDATA[<p>在最近的工作中经常遇到图像处理相关知识，因此做一个记录：</p>
<h3 id="RGB模式"><a href="#RGB模式" class="headerlink" title="RGB模式"></a>RGB模式</h3><p>RGB模式是以色光三原色为基础建立的色彩模式，RGB图像只使用三种颜色，当不等量的三种色光进行叠加混合时，即会在屏幕上重现自然界各种各样的颜色。红、绿、蓝每一种颜色各有256级亮度，用数字表示为从0、1、2…..直到255，256级的RGB色彩总共能组合出约1678万种色彩。RGB模式是电脑、手机、投影仪、电视等屏幕显示的最佳颜色模式。</p>
<h3 id="CMYK模式"><a href="#CMYK模式" class="headerlink" title="CMYK模式"></a>CMYK模式</h3><p>CMYK是4种印刷油墨名称的首字母：青色Cyan、洋红色Magenta、黄色Yellow和黑色Black。之所以没有缩写成B（Black），是为了和RGB的B区分开，此外表示K印版是起关键作用的印版，在图像中能起到一种”骨架”的作用。CMYK主要应用于印刷，它的颜色由四个通道组成。印刷时，C、M、Y、K各出一张菲林。</p>
<blockquote>
<p>两者都是作为计算机颜色的表示工具，前者更适合电脑，后者更适合打印，前者的色域更广，后者略微少，但是两者都有自己独特的色域。</p>
</blockquote>
<blockquote>
<p>补充</p>
</blockquote>
<h3 id="灰度"><a href="#灰度" class="headerlink" title="灰度"></a>灰度</h3><p>RGB 是以三原色为基础的图像，因此被成为三通道图，而灰度图就是单通道图，只有一个颜色阶级，因此图像总体呈现灰色。在一些算法或者特征提取的时候，总是要将图片转化为灰度图，这是因为相比于三通道，单通道能够减少运算量，利于梯度计算等优势。</p>
<h3 id="图像二值化"><a href="#图像二值化" class="headerlink" title="图像二值化"></a>图像二值化</h3><p>二值化就是将图像像素的灰度值设置成只有最大值和最小值两种取值，使整个图像呈现出 “非黑即白” 的效果，是最简单的图像分割的方法。相比于灰度图，图像二值化为了更加凸显图像的边缘、线条、轮廓，会将图像转变为仅有黑白两色的图像，使得图像更加利于计算。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>图像</tag>
      </tags>
  </entry>
  <entry>
    <title>进程锁与进程池</title>
    <url>/m42-orion/2022/08/08/python%E8%BF%9B%E7%A8%8B%E9%94%81%E4%B8%8E%E8%BF%9B%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[<p>如果多个进程抢占去对某一个共同的对象的操作的时候，为了防止操作产生冲突，这个时候就可以通过锁的操作来避免。</p>
<h2 id="案例展示"><a href="#案例展示" class="headerlink" title="案例展示"></a>案例展示</h2><p>以下展示没有使用锁的案例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Value,Array</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_func</span>(<span class="params">n,</span>):</span><br><span class="line">    n.value = n.value + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    num = Value(<span class="string">&#x27;i&#x27;</span>,<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        p = Process(target=test_func,args=(num,))</span><br><span class="line">        p.start()</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(num.value)</span><br></pre></td></tr></table></figure>

<p>当改变<code>time.sleep()</code>的时间，就会发现每一次打印的结果都不一样，是因为多个进程在操作同一个对象的原因，在实际的工作当中，多个进程操作同一个对象是非常危险的时候，很有可能导致数据错乱或者数据不同步的情况发生。但是有两种情况列外，就是在操作队列与管道的时候，这两种数据结构由于自身的性质，只能排队被操作，因此不用担心可能出现的错误。</p>
<p>想要保证操作对象时候数据不会被其他进程串改，需要保证在一个进程操作的时候，其他进程不能够访问该对象，即当前进程锁住该对象。操作如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Lock</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">for_fun</span>(<span class="params">lock</span>):</span><br><span class="line">    lock.acquire() <span class="comment"># 加锁</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    lock.release() <span class="comment"># 释放锁</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    lock = Lock()</span><br><span class="line">    p = Process(target=for_fun(), args=(lock, ))</span><br></pre></td></tr></table></figure>

<h2 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h2><blockquote>
<p>为什么要有进程池的概念？</p>
</blockquote>
<p>在实际的需求当中，往往需要创建多个进程，但是进程也不能够随意创建，进程太多不方便管理的同时还会降低效率，因此诞生了进程池，进程池这个对象维护了一个进程管理器，在这个进程池当中，进程是恒定的，被事先设置过。进程池会稳定维护四个进程，并且当任务传递过来后，进程池会接纳所有任务并且让任务等待也存在于进程池当中，不会因为进程不够用而阻塞程序的正常运行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor,ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;执行&quot;</span>,num)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    pool = ProcessPoolExecutor(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">for</span> ele <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        pool.submit(task,ele)</span><br></pre></td></tr></table></figure>

<p>在进程池当中，进程都被进程池管理，如果想要进程在执行完毕后再做其他操作可以使用回调函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;进程池 回调函数 回调函数会把任务函数的结果作为参数执行&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work</span>():</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d 进程 work&quot;</span> % os.getpid())</span><br><span class="line">    <span class="keyword">return</span> time.time()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call</span>(<span class="params">res</span>):</span><br><span class="line">    <span class="comment"># time.sleep(1)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;处理回调结果：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(res)))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pool = Pool(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="comment"># 在进程池中的每个任务执行完毕时，执行回调函数</span></span><br><span class="line">        <span class="comment"># 使用callback回调函数时，会把工作任务func方法的返回结果传给callback方法进行处理</span></span><br><span class="line">        res = pool.apply_async(func=work, callback=call)</span><br><span class="line">    pool.close()  <span class="comment"># 必须等进程池关闭后，才能使用join()方法</span></span><br><span class="line">    pool.join()  <span class="comment"># 主进程等待子进程结束</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;main end&quot;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：如果进程池当中要使用进程锁。则需要基于Manager钟的Lock和RLock来实现。</p>
</blockquote>
<p>这篇写得草率了，唉！</p>
]]></content>
      <categories>
        <category>学习</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>一个简单的定时任务</title>
    <url>/m42-orion/2022/08/10/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<p>在编写某些脚本的时候往往需要使用到定时执行任务，定时执行任务可以通过下发多进程或者使用某些调度算法实现，在python中为开发者提供了一个库可以快速实现定时任务并且不让主进程受到干扰。这个库就叫做：<code>APScheduler</code>。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>dvanced Python Scheduler (APScheduler) 是一个Python库，可实现延迟调度要执行Python代码的功能，可以只执行一次，也可以定期执行。可以随时添加新任务或删除旧任务。如果将job任务存储在数据库中，这些任务还将在重新启动调度程序后保持它们的状态并继续运行。当重新启动调度程序时，它将运行离线时应该运行的所有job任务，这个功能可以让程序弥补由于外部情况损失的任务。这个库有四个组件：</p>
<ul>
<li><strong><code>triggers</code>触发器</strong> : 包含调度逻辑，每一个job有它自己的触发器，用于决定job下一次运行时间。除了初始配置外，触发器完全是无状态的。</li>
<li><strong><code>job stores</code>作业存储</strong> : 存储被调度的job，默认的job存储是简单地把job存储在内存中，其他的job存储是保存在数据库中。Job的数据在保存到持久化存储时被序列化，并在加载时进行反序列化。job存储(默认存储除外)不将job数据保存在内存中，而是充当后台保存、加载、更新和搜索job的中间人。job存储永远不能在调度程序之间共享。</li>
<li><strong><code>executors</code>执行器</strong> : 负责处理job的运行，通过将job中指定的可调用对象 提交给一个线程或进程池来运行。当job完成时，执行器将会通知调度器，然后调度程序发出相应event。</li>
<li><strong><code>schedulers</code>调度器</strong> : 一个应用程序中通常只有一个调度器在运行，应用程序开发人员通常不会直接处理job存储、执行器和触发器，相反，调度器程序提供了处理这些事件的接口。<br>配置job存储和执行器都是在调度器中完成，例如添加、修改和移除job。</li>
</ul>
<h3 id="简单实用"><a href="#简单实用" class="headerlink" title="简单实用"></a>简单实用</h3><p>APScheduler能够很轻易的实现定时任务的三个步骤：</p>
<ul>
<li>新建scheduler调度器  </li>
<li>向调度器添加一个job调度任务  </li>
<li>运行job调度任务  </li>
</ul>
<p>即创建任务，添加任务，启动任务</p>
<p>案例一：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用blocking阻塞调度程序来调度每隔3秒执行一次的作业</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> apscheduler.schedulers.blocking <span class="keyword">import</span> BlockingScheduler</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tick</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    scheduler = BlockingScheduler()</span><br><span class="line">    scheduler.add_job(tick, <span class="string">&#x27;interval&#x27;</span>, seconds=<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;Break&#x27;</span> <span class="keyword">if</span> os.name == <span class="string">&#x27;nt&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;C&#x27;</span>))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        scheduler.start()</span><br><span class="line">    <span class="keyword">except</span> (KeyboardInterrupt, SystemExit):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>但是这个案例是会阻塞程序运行的，本质上与for循环实现的功能差不多一般情况下大多数人不会在有这样需求的情况下考虑它，多数时候我们希望我们是任务在后台被调度，不会阻塞程序的正常执行,如下</p>
<p>案例二：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> apscheduler.schedulers.background <span class="keyword">import</span> BackgroundScheduler</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tick</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    scheduler = BackgroundScheduler()</span><br><span class="line">    scheduler.add_job(tick, <span class="string">&#x27;interval&#x27;</span>, seconds=<span class="number">3</span>)</span><br><span class="line">    scheduler.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;Break&#x27;</span> <span class="keyword">if</span> os.name == <span class="string">&#x27;nt&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;C&#x27;</span>))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># This is here to simulate application activity (which keeps the main thread alive).</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">except</span> (KeyboardInterrupt, SystemExit):</span><br><span class="line">        <span class="comment"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class="line">        scheduler.shutdown()</span><br></pre></td></tr></table></figure>

<p>这个调度器实现了同样的功能，也是每三秒执行一次，但是调度程序不会阻塞主进程的正常进行，更多调度方法如下：</p>
<ul>
<li><strong>BlockingScheduler</strong> : 调度器在当前进程的主线程中运行，也就是会阻塞当前线程。</li>
<li><strong>BackgroundScheduler</strong> : 调度器在后台线程中运行，不会阻塞当前线程。（在没有使用下面5个框架时使用）</li>
<li><strong>AsyncIOScheduler</strong> : 结合 asyncio 模块（一个异步框架）一起使用。</li>
<li><strong>GeventScheduler</strong> : 程序中使用 gevent（高性能的Python并发框架）作为IO模型，和 GeventExecutor 配合使用。</li>
<li><strong>TornadoScheduler</strong> : 程序中使用 Tornado（一个web框架）的IO模型。</li>
<li><strong>TwistedScheduler</strong> : 配合 TwistedExecutor使用。</li>
<li><strong>QtScheduler</strong> : 配合 Qt 应用使用。</li>
</ul>
<p>除了定时任务，当我们程序只需要在某一个特定时间执行一件事情，不需要重复执行的时候，调度器很明显就不够使用了，这时候就需要定时器也叫触发器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 2019-03-29 14:00:00 时刻运行一次 job_func 方法</span></span><br><span class="line">scheduler.add_job(job_func, <span class="string">&#x27;date&#x27;</span>, run_date=datetime(<span class="number">2019</span>, <span class="number">3</span>, <span class="number">29</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">0</span>), args=[<span class="string">&#x27;text&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p>触发器同时也支持其他的时间格式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sched.add_job(my_job, <span class="string">&#x27;date&#x27;</span>, run_date=date(<span class="number">2019</span>, <span class="number">3</span>, <span class="number">29</span>), args=[<span class="string">&#x27;text&#x27;</span>])</span><br><span class="line">sched.add_job(my_job, <span class="string">&#x27;date&#x27;</span>, run_date=<span class="string">&#x27;2019-03-29 14:30:05&#x27;</span>, args=[<span class="string">&#x27;text&#x27;</span>])</span><br><span class="line">sched.add_job(my_job, args=[<span class="string">&#x27;text&#x27;</span>]) <span class="comment">#立即运行</span></span><br></pre></td></tr></table></figure>

<p>触发器除了能够定时触发还能够在某一个固定的时间段内执行指定数量的任务：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 2019-03-29 14:00:01 ~ 2019-03-29 14:00:10 之间, 每隔两分钟执行一次job_func方法。</span></span><br><span class="line">scheduler.add_job(job_func, <span class="string">&#x27;interval&#x27;</span>, minutes=<span class="number">2</span>, start_date=<span class="string">&#x27;2019-03-29 14:00:01&#x27;</span> , end_date=<span class="string">&#x27;2019-03-29 14:00:10&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>以及周期性触发：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在2019-03-30 00:00:00之前，每周一到周五的5:30(am)触发</span></span><br><span class="line">sched.add_job(job_function, <span class="string">&#x27;cron&#x27;</span>, day_of_week=<span class="string">&#x27;mon-fri&#x27;</span>, hour=<span class="number">5</span>, minute=<span class="number">30</span>, end_date=<span class="string">&#x27;2019-03-30&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>conda那些命令</title>
    <url>/m42-orion/2022/08/11/conda%E9%82%A3%E4%BA%9B%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><ul>
<li><p>创建虚拟环境 ： <code>conda create --name my_first_env python=3.6</code></p>
</li>
<li><p>列出虚拟环境 ： <code>conda env list</code></p>
</li>
<li><p>激活虚拟环境 ： <code>conda activate my_first_env</code></p>
</li>
<li><p>查看环境信息 ： <code>conda info -e</code></p>
</li>
<li><p>根据路径激活虚拟环境 ： <code>conda source /root/python/bin/activate</code></p>
</li>
<li><p>推出虚拟环境 ： <code>conda deactivate</code></p>
</li>
<li><p>删除虚拟环境 ： <code>conda remove -n your_env_name --all</code></p>
</li>
<li><p>创建时候安装需要的包 ： <code>conda create -n env_name numpy matplotlib python=2.7</code></p>
</li>
<li><p>在离线的时候创建虚拟环境 ： <code>conda create -n env_name --offline python=3.8</code></p>
</li>
<li><p>环境复制 ： <code>conda create --name new_env_name --clone old_env_name</code></p>
</li>
<li><p>查看所有包 : <code>conda list</code></p>
</li>
</ul>
<h2 id="conda-环境打包"><a href="#conda-环境打包" class="headerlink" title="conda 环境打包"></a>conda 环境打包</h2><p>安装需要的包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> activate sample</span><br><span class="line">conda install conda-pack</span><br><span class="line">conda isntall -c conda-forge conda-pack</span><br></pre></td></tr></table></figure>

<p>或pip:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install conda-pack</span><br><span class="line"><span class="comment"># 或者源码</span></span><br><span class="line">pip install git+https://github.com/conda/conda-pack.git</span><br></pre></td></tr></table></figure>

<p>打包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda-pack</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="comment"># example.tar.gz 即为打包完成的输出文件</span></span><br><span class="line"><span class="built_in">source</span> deactivate</span><br></pre></td></tr></table></figure>

<p>解压与激活：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xf example.tar.gz -C myenv</span><br><span class="line"><span class="built_in">source</span> myenv/bin/activate</span><br></pre></td></tr></table></figure>

<blockquote>
<p>值得注意的是，打包好的环境不需要系统当中提前安装基础环境，而是在解压激活之后就能够即刻使用。</p>
</blockquote>
<h2 id="关于conda的源"><a href="#关于conda的源" class="headerlink" title="关于conda的源"></a>关于conda的源</h2><p>添加源命令:</p>
<p><code>conda config --add channels https://mirrors.sjtug.sjtu.edu.cn/anaconda/pkgs/main/</code></p>
<p>删除源命令：</p>
<p><code>conda config --remove channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</code></p>
<p>换回默认源：</p>
<p><code>conda config --remove-key channels</code></p>
<p>查看已经添加的源:</p>
<p><code>conda config --show-sources</code></p>
<p>移除镜像源:</p>
<p><code>conda config --remove-key channels</code></p>
<p>直接安装镜像源的某package：</p>
<p><code>conda install -c 镜像源地址 package-name</code></p>
<h2 id="pip的源"><a href="#pip的源" class="headerlink" title="pip的源"></a>pip的源</h2><p>换源：</p>
<p><code>pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</code></p>
<p>临时源：</p>
<p><code>pip install package -i https://pypi.tuna.tsinghua.edu.cn/simple</code></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>shell环境变量</title>
    <url>/m42-orion/2022/08/18/shell%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<p><code>bash shell</code>用一个叫作环境变量(environment variable)的特性来存储有关shell会话和工作环境的信息(这也是它们被称作环境变量的原因)。这项特性允许你在内存中存储数据，以便程序或shell中运行的脚本能够轻松访问到它们。这也是存储持久数据的一种简便方法。</p>
<p>简单来说环境变量就是在交互环境中预先被设定的变量，能够让程序启动的时候更快的找到他们或者为某些程序预先设置运行条件的变量设置。如电脑中两个Java，指定环境变量能够让Java默认启动第一个或者第二个。</p>
<blockquote>
<p>在shell编程中尽量使用大写字符作为变量名称。并且环境变量不能够以数字作为变量名的开头。</p>
</blockquote>
<h2 id="环境变量发赋值与输出"><a href="#环境变量发赋值与输出" class="headerlink" title="环境变量发赋值与输出"></a>环境变量发赋值与输出</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">变量名称=变量值</span><br><span class="line">echo $变量名称</span><br></pre></td></tr></table></figure>

<h2 id="全局变量与局部变量"><a href="#全局变量与局部变量" class="headerlink" title="全局变量与局部变量"></a>全局变量与局部变量</h2><p>全局变量生效与所有的shell环境中。 <code>export a=1</code> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@my server~]# echo $b</span><br><span class="line">2</span><br><span class="line">[root@myserver~]# b=2</span><br><span class="line">[root@myserver~]# export b</span><br><span class="line">[root@myserver~]# bash</span><br><span class="line">[root@myserver~]# echo $b</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<p>局部:仅生效与当前的环境中  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@myserver~]# b=2</span><br></pre></td></tr></table></figure>

<p>如何查看系统中的环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@myserver~]#env | grep HOME</span><br><span class="line">HOME=/root</span><br></pre></td></tr></table></figure>

<h2 id="删除环境变量"><a href="#删除环境变量" class="headerlink" title="删除环境变量"></a>删除环境变量</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@myserver~]# env | grep a=1</span><br><span class="line">a=1</span><br><span class="line">[root@myserver~]# unset a </span><br><span class="line">[root@myserver~]# env | grep a=1 </span><br></pre></td></tr></table></figure>

<h2 id="etc-profile"><a href="#etc-profile" class="headerlink" title="/etc/profile"></a>/etc/profile</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看环境变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line"><span class="comment"># 新增环境变量</span></span><br><span class="line">PATH=<span class="variable">$PATH</span>:/root</span><br><span class="line"><span class="comment"># 修改文件</span></span><br><span class="line">vim /etc/profie</span><br><span class="line"><span class="comment"># 重新加载环境变量生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<h2 id="环境变量涉及的文件"><a href="#环境变量涉及的文件" class="headerlink" title="环境变量涉及的文件"></a>环境变量涉及的文件</h2><ul>
<li><code>/etc/profile</code> : The systemwide initialization file, executed for login shells。系统初始化文件，在login shells时执行</li>
<li><code>/etc/bash.bash_logout</code> : The systemwide login shell cleanup file, executed when a login shell exits。系统的登录shell清理文件，当一个登录shell退出时执行。</li>
<li><code>~/.bash_profile</code> : The personal initialization file, executed for login shells。个人初始化文件，为登录shell执行。</li>
<li><code>~/.bashrc</code> : The individual per-interactive-shell startup file。每个交互式shell启动文件。</li>
<li><code>~/.bash_logout</code> : The individual login shell cleanup file, executed when a login shell exits。单个登录shell清理文件，当一个登录shell退出时执行。</li>
</ul>
<p>这些文件涉及到bash与shell相关的知识，但是在个人配置环境变量的时候经常接触到，了解文件的作用机制可以更好的在不同文件当中设置环境变量</p>
<h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>java 环境变量的配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>

<p>添加以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/java/jdk1.8.0_241</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">export CLASSPATH=.:$JAVA_HIOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>top命令基础</title>
    <url>/m42-orion/2022/08/18/top%E5%91%BD%E4%BB%A4%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>top命令是Linux下常用的性能分析工具,能够实时显示系统中各个进程的资源占用状况,类似于Windows的任务管理器。top命令展示的信息众多，初学者可能不能够快速掌握所有信息概况，以下对top命令基础进行简单讲解。</p>
<h2 id="top"><a href="#top" class="headerlink" title="top"></a>top</h2><p>在使用了top命令后会出现以下数据样式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">top - 01:05:24 up 9 min,  0 <span class="built_in">users</span>,  load average: 0.00, 0.04, 0.05</span><br><span class="line">Tasks: 138 total,   1 running, 137 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  0.1 us,  0.3 sy,  0.0 ni, 99.6 <span class="built_in">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem :  7990064 total,  7001532 free,   698000 used,   290532 buff/cache</span><br><span class="line">KiB Swap:  8257532 total,  8257532 free,        0 used.  7043352 avail Mem </span><br><span class="line"></span><br><span class="line">   PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                                                                                   </span><br><span class="line">  1620 root      20   0  699732  38824  15664 S   0.7  0.5   0:02.71 node                                                                                                                                                      </span><br><span class="line">  1655 root      20   0 1023288 124372  21240 S   0.7  1.6   0:05.07 node                                                                                                                                                      </span><br><span class="line">  1398 root      20   0  157084   6040   4352 S   0.3  0.1   0:00.33 sshd                                                                                                                                                      </span><br><span class="line">  1474 root      20   0  954828  60136  18520 S   0.3  0.8   0:02.79 node                                                                                                                                                      </span><br><span class="line">     1 root      20   0  193704   6772   4140 S   0.0  0.1   0:00.95 systemd                                                                                                                                                   </span><br><span class="line">     2 root      20   0       0      0      0 S   0.0  0.0   0:00.00 kthreadd                                                                                                                                                  </span><br><span class="line">     3 root      20   0       0      0      0 S   0.0  0.0   0:00.06 kworker/0:0                                                                                                                                               </span><br><span class="line">     4 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker/0:0H                                                                                                                                              </span><br><span class="line">     6 root      20   0       0      0      0 S   0.0  0.0   0:00.01 ksoftirqd/0                                                                                                                                               </span><br><span class="line">     7 root      rt   0       0      0      0 S   0.0  0.0   0:00.02 migration/0  </span><br></pre></td></tr></table></figure>

<h3 id="系统概况"><a href="#系统概况" class="headerlink" title="系统概况"></a>系统概况</h3><p>首先是第一行，内容是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">top - 01:05:24 up 9 min,  0 <span class="built_in">users</span>,  load average: 0.00, 0.04, 0.05</span><br></pre></td></tr></table></figure>

<p>内容分别是：</p>
<ul>
<li><code>top</code> : 名称</li>
<li><code>01:05:24</code> ： 系统当前时间</li>
<li><code>up 9 min</code> ： 用户登录时间</li>
<li><code>0 users</code> ： 当前登录用户数量</li>
<li><code>load average: 0.00, 0.04, 0.05</code> ： 系统负载 一分钟/五分钟/十五分钟 三个时间段的统计</li>
</ul>
<blockquote>
<p>注意 ： 对于单CPU的机器而言，1.00已经是满负载了</p>
</blockquote>
<h3 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h3><p>然后是第二行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Tasks: 138 total,   1 running, 137 sleeping,   0 stopped,   0 zombie</span><br></pre></td></tr></table></figure>

<p>内容分别是：</p>
<ul>
<li><code>Tasks: 138 total</code> : 进程任务总数138个</li>
<li><code>1 running</code> : 运行进程1个</li>
<li><code>137 sleeping</code> : 137个进程正在睡眠状态</li>
<li><code>0 stopped</code> : 停止进程0个</li>
<li><code>0 zombie</code> : 僵尸进程0个</li>
</ul>
<h3 id="CPU-状态"><a href="#CPU-状态" class="headerlink" title="CPU 状态"></a>CPU 状态</h3><p>接着第三行： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%Cpu(s):  0.1 us,  0.3 sy,  0.0 ni, 99.6 <span class="built_in">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br></pre></td></tr></table></figure>

<ul>
<li><code>0.1 us</code> : 用户空间</li>
<li><code>0.3 sy</code> : 内核空间</li>
<li><code>0.0 ni</code> : 用户定义优先级</li>
<li><code>99.6 id</code> : 空闲</li>
<li><code>0.0 wa</code> : 等待io</li>
<li><code>0.0 hi</code> : 硬中断</li>
<li><code>0.0 si</code> : 软中断</li>
<li><code>0.0 st</code> : 虚拟机</li>
</ul>
<p>以上数字含义为百分比</p>
<h3 id="内存和Swap交换区状态"><a href="#内存和Swap交换区状态" class="headerlink" title="内存和Swap交换区状态"></a>内存和Swap交换区状态</h3><p>紧接第四行与第五行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">KiB Mem :  7990064 total,  7001532 free,   698000 used,   290532 buff/cache</span><br><span class="line">KiB Swap :  8257532 total,  8257532 free,        0 used.  7043352 avail Mem </span><br></pre></td></tr></table></figure>

<p><code>KiB Mem</code>为物理内存区，<code>KiB Swap</code>是交换区，从左至右分别是总量、空闲、已经使用、（内核缓存用量与可用内存）</p>
<h3 id="最后内容"><a href="#最后内容" class="headerlink" title="最后内容"></a>最后内容</h3><p>紧接着是关于系统中正在运行的进程信息，信息<strong>title</strong>如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND</span><br></pre></td></tr></table></figure>

<ul>
<li><code>PID</code> : 进程id</li>
<li><code>USER</code> : 进程归属者</li>
<li><code>PR</code> : 优先级</li>
<li><code>NI</code> : nice值</li>
<li><code>VIRT</code> : 虚拟内存</li>
<li><code>RES</code> : 无力内存</li>
<li><code>SHR S  %CPU %MEM</code> : 共享内存/CPU/内存</li>
<li><code>TIME+ COMMAND</code> : CPU总时间/命令</li>
</ul>
<h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><ul>
<li><code>shift+e</code> : 切换内存显示模式（可重复按键切换）</li>
<li><code>z</code> : 切换是否彩色显示（可重复按键切换）</li>
<li><code>m</code> : 切换内存显示模式（可重复按键切换）</li>
<li><code>e</code> : 切换底部进程中单位的显示模式（可重复按键切换）</li>
<li><code>b</code> : 切换高亮选中（可重复按键切换）</li>
<li><code>W</code> : 把当前配置保存到文件中，下次启动top会使用当前的配置</li>
<li><code>h</code> : 进入帮助菜单 (进入菜单后，可按ESC或q退出帮助菜单)</li>
<li><code>q</code> : 退出top命令</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>md5加密与AES加密</title>
    <url>/m42-orion/2022/08/21/md5%E5%8A%A0%E5%AF%86%E4%B8%8EAES%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<h2 id="md5加密"><a href="#md5加密" class="headerlink" title="md5加密"></a>md5加密</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>消息摘要算法第五版（英语：Message-Digest Algorithm 5，缩写为MD5），是当前计算机领域用于确保信息传输完整一致而广泛使用的散列算法之一（又译哈希算法、摘要算法等），主流编程语言普遍已有MD5的实现。将数据 （如一段文字）运算变为另一固定长度值，是散列算法的基础原理，MD5的前身有MD2、MD3和MD4。MD5由MD4、MD3、MD2改进而来，主要增强算法复杂度和不可逆性。目前，MD5算法因其普遍、稳定、快速的特点，仍广泛应用于普通 数据的错误检查领域。例如在一些BitTorrent下载中，软件将通过计算MD5检验下载到的文件片段的完整性。MD5已经广泛使用在为文件传输提供一定的可靠性方面。例如，服务器预先提供一个MD5校验和，用户下载完文件以后， 用MD5算法计算下载文件的MD5校验和，然后通过检查这两个校验和是否一致，就能判断下载的文件是否出错。MD5是输入不定长度信息，输出固定长度128-bits的算法。经过程序流程，生成四个32位数据，最后联合起来成为一个 128-bits散列。基本方式为，求余、取余、调整长度、与链接变量进行循环运算,得出结果。</p>
<h3 id="md5算法描述"><a href="#md5算法描述" class="headerlink" title="md5算法描述"></a>md5算法描述</h3><p>假设输入信息(input message)的长度为b(bit)，我们想要产生它的报文摘要，在此处b为任意的非负整数：b也可能为0，也不一定为8的整数倍，且可能是任意大的长度。设该信息的比特流表示如下： M[0] M[1] M[2] … M[b-1] 计算此信息的报文摘要需要如下5步：</p>
<h4 id="补位"><a href="#补位" class="headerlink" title="补位"></a>补位</h4><p>信息计算前先要进行位补位，设补位后信息的长度为LEN(bit)，则LEN%512 = 448(bit)，即数据扩展至 K * 512 + 448(bit)。即K * 64+56(byte)，K为整数。补位操作始终要执行，即使补位前信息的长度对512求余的结果是448。具体补位操作：补一个1，然后补0至满足上述要求。总共最少要补1bit，最多补512bit。</p>
<h4 id="尾部加上信息长度"><a href="#尾部加上信息长度" class="headerlink" title="尾部加上信息长度"></a>尾部加上信息长度</h4><p>将输入信息的原始长度b(bit)表示成一个64-bit的数字，把它添加到上一步的结果后面(在32位的机器上，这64位将用2个字来表示并且低位在前)。当遇到b大于2^64这种极少的情况时，b的高位被截去，仅使用b的低64位。经过上面两步，数据就被填补成长度为512(bit)的倍数。也就是说，此时的数据长度是16个字(32byte)的整数倍。此时的数据表示为： M[0 … N-1] 其中的N是16的倍数。</p>
<h4 id="初始化缓存区"><a href="#初始化缓存区" class="headerlink" title="初始化缓存区"></a>初始化缓存区</h4><p>用一个四个字的缓冲器(A，B，C，D)来计算报文摘要，A,B,C,D分别是32位的寄存器，初始化使用的是十六进制表示的数字，注意低字节在前：<br>        word A: 01 23 45 67<br>        word B: 89 ab cd ef<br>        word C: fe dc ba 98<br>        word D: 76 54 32 10</p>
<h4 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h4><p>首先定义4个辅助函数，每个函数的输入是三个32位的字，输出是一个32位的字：<br>        F(X,Y,Z) = XY v not(X) Z<br>        G(X,Y,Z) = XZ v Y not(Z)<br>        H(X,Y,Z) = X xor Y xor Z<br>        I(X,Y,Z) = Y xor (X v not(Z))</p>
<pre><code>    FF(a,b,c,d,Mj,s,ti）表示 a = b + ((a + F(b,c,d) + Mj + ti) &lt;&lt; s)
    GG(a,b,c,d,Mj,s,ti）表示 a = b + ((a + G(b,c,d) + Mj + ti) &lt;&lt; s)
    HH(a,b,c,d,Mj,s,ti）表示 a = b + ((a + H(b,c,d) + Mj + ti) &lt;&lt; s)
    Ⅱ（a,b,c,d,Mj,s,ti）表示 a = b + ((a + I(b,c,d) + Mj + ti) &lt;&lt; s)
</code></pre>
<p>这四轮（64步）是：</p>
<p>第一轮</p>
<p>FF(a,b,c,d,M0,7,0xd76aa478）<br>FF(d,a,b,c,M1,12,0xe8c7b756）<br>FF(c,d,a,b,M2,17,0x242070db)<br>FF(b,c,d,a,M3,22,0xc1bdceee)<br>FF(a,b,c,d,M4,7,0xf57c0faf)<br>FF(d,a,b,c,M5,12,0x4787c62a)<br>FF(c,d,a,b,M6,17,0xa8304613）<br>FF(b,c,d,a,M7,22,0xfd469501）<br>FF(a,b,c,d,M8,7,0x698098d8）<br>FF(d,a,b,c,M9,12,0x8b44f7af)<br>FF(c,d,a,b,M10,17,0xffff5bb1）<br>FF(b,c,d,a,M11,22,0x895cd7be)<br>FF(a,b,c,d,M12,7,0x6b901122）<br>FF(d,a,b,c,M13,12,0xfd987193）<br>FF(c,d,a,b,M14,17,0xa679438e)<br>FF(b,c,d,a,M15,22,0x49b40821）</p>
<p>第二轮</p>
<p>GG(a,b,c,d,M1,5,0xf61e2562）<br>GG(d,a,b,c,M6,9,0xc040b340）<br>GG(c,d,a,b,M11,14,0x265e5a51）<br>GG(b,c,d,a,M0,20,0xe9b6c7aa)<br>GG(a,b,c,d,M5,5,0xd62f105d)<br>GG(d,a,b,c,M10,9,0x02441453）<br>GG(c,d,a,b,M15,14,0xd8a1e681）<br>GG(b,c,d,a,M4,20,0xe7d3fbc8）<br>GG(a,b,c,d,M9,5,0x21e1cde6）<br>GG(d,a,b,c,M14,9,0xc33707d6）<br>GG(c,d,a,b,M3,14,0xf4d50d87）<br>GG(b,c,d,a,M8,20,0x455a14ed)<br>GG(a,b,c,d,M13,5,0xa9e3e905）<br>GG(d,a,b,c,M2,9,0xfcefa3f8）<br>GG(c,d,a,b,M7,14,0x676f02d9）<br>GG(b,c,d,a,M12,20,0x8d2a4c8a)</p>
<p>第三轮</p>
<p>HH(a,b,c,d,M5,4,0xfffa3942）<br>HH(d,a,b,c,M8,11,0x8771f681）<br>HH(c,d,a,b,M11,16,0x6d9d6122）<br>HH(b,c,d,a,M14,23,0xfde5380c)<br>HH(a,b,c,d,M1,4,0xa4beea44）<br>HH(d,a,b,c,M4,11,0x4bdecfa9）<br>HH(c,d,a,b,M7,16,0xf6bb4b60）<br>HH(b,c,d,a,M10,23,0xbebfbc70）<br>HH(a,b,c,d,M13,4,0x289b7ec6）<br>HH(d,a,b,c,M0,11,0xeaa127fa)<br>HH(c,d,a,b,M3,16,0xd4ef3085）<br>HH(b,c,d,a,M6,23,0x04881d05）<br>HH(a,b,c,d,M9,4,0xd9d4d039）<br>HH(d,a,b,c,M12,11,0xe6db99e5）<br>HH(c,d,a,b,M15,16,0x1fa27cf8）<br>HH(b,c,d,a,M2,23,0xc4ac5665）</p>
<p>第四轮</p>
<p>Ⅱ（a,b,c,d,M0,6,0xf4292244）<br>Ⅱ（d,a,b,c,M7,10,0x432aff97）<br>Ⅱ（c,d,a,b,M14,15,0xab9423a7）<br>Ⅱ（b,c,d,a,M5,21,0xfc93a039）<br>Ⅱ（a,b,c,d,M12,6,0x655b59c3）<br>Ⅱ（d,a,b,c,M3,10,0x8f0ccc92）<br>Ⅱ（c,d,a,b,M10,15,0xffeff47d)<br>Ⅱ（b,c,d,a,M1,21,0x85845dd1）<br>Ⅱ（a,b,c,d,M8,6,0x6fa87e4f)<br>Ⅱ（d,a,b,c,M15,10,0xfe2ce6e0)<br>Ⅱ（c,d,a,b,M6,15,0xa3014314）<br>Ⅱ（b,c,d,a,M13,21,0x4e0811a1）<br>Ⅱ（a,b,c,d,M4,6,0xf7537e82）<br>Ⅱ（d,a,b,c,M11,10,0xbd3af235）<br>Ⅱ（c,d,a,b,M2,15,0x2ad7d2bb)<br>Ⅱ（b,c,d,a,M9,21,0xeb86d391）</p>
<h3 id="MD5算法总结"><a href="#MD5算法总结" class="headerlink" title="MD5算法总结"></a>MD5算法总结</h3><p>MD5算法本质上是将数据按照长度进行补位后，成为可以被算法处理长度的数据，然后按照64字节也就是512位进行切割，切割后会对每一个64字节进行计算。第一次计算会输入四个长度为16字节的固定幻数，每一次计算完成后也会得到相应的四个数，并将计算结果用于下一个64字节计算的输入值，反复如此直到所有的字节全部被运算完毕，最后得出的值就是加密后的结果。正式因为设计到长度和反复计算，因此每增加一个或者减少一个字节都会对最后结果产生巨大影响。</p>
<h2 id="AES加密"><a href="#AES加密" class="headerlink" title="AES加密"></a>AES加密</h2><p>AES是一种经典的对称加密算法，也是一种区块加密算法，对称加密算法是指加密解密使用的是同一个密钥，区块加密指的是加密过程当中会将加密对象切分成块进程逐步加密，AES加密过程当中区块长出被限制在128位，但是密码长度有三种可选，分别是：128位、192位、256位。</p>
<h2 id="加密计算过程"><a href="#加密计算过程" class="headerlink" title="加密计算过程"></a>加密计算过程</h2><p>以128位为例，加密过程是以126位一块明文信息与128位密钥作为输入，得出128位的密文信息，在加密过程当中明文区块会经过十一次计算才能得出最后结果。而原始的密钥会在这个过程当中生成11个子密码分别参与到该过程当中。</p>
<p>十一步的第一步是是对加密信息进行诸位异或运算，接着是对同一个子模块循环递归十次计算。在加密子模块当中一共有四步操作，前三次分别是非线性运算-&gt;线性运算-&gt;非线性运算，最后是异或运算，输入的内容依然是明文与密钥，但是密钥仅仅参与最后一次异或运算当中。</p>
<h3 id="第一次线性运算"><a href="#第一次线性运算" class="headerlink" title="第一次线性运算"></a>第一次线性运算</h3><p>第一次的线性运算hui将输入的值也就是一个128位16比特的数据按照矩阵进行排列：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">B1 B5 B9 B13  </span><br><span class="line">B2 B6 B10 B14  </span><br><span class="line">B3 B7 B11 B15  </span><br><span class="line">B4 B8 B12 B16  </span><br></pre></td></tr></table></figure>

<p>随后这个矩阵会被一个固定的映射表按照对应的映射关系替换掉：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A1 A5 A9 A13  </span><br><span class="line">A2 A6 A10 A14  </span><br><span class="line">A3 A7 A11 A15  </span><br><span class="line">A4 A8 A12 A16  </span><br></pre></td></tr></table></figure>

<h3 id="第二次运算"><a href="#第二次运算" class="headerlink" title="第二次运算"></a>第二次运算</h3><p>第二次运算将改变矩阵结构对每一行进行移位得到如下结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A1 A5 A9 A13  </span><br><span class="line">A6 A10 A14 A2  </span><br><span class="line">A11 A15 A3 A7  </span><br><span class="line">A16 A4 A8 A12 </span><br></pre></td></tr></table></figure>

<p>也就是第一行第0个移到第一行的最右边，第二行移1个，第三行2个，第四行3个。</p>
<h3 id="第三次运算"><a href="#第三次运算" class="headerlink" title="第三次运算"></a>第三次运算</h3><p>第三次运算会诸列取出数据，并将每一列与一个4x4的矩阵进程乘法操作，然后将结果放回矩阵当中，由此三次运算结束。</p>
<p>反复进过多次加密子模块的处理后，最终输出加密密文。</p>
<h2 id="python-AES-加密"><a href="#python-AES-加密" class="headerlink" title="python AES 加密"></a>python AES 加密</h2><p>最后附上python的AES加密</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">password = <span class="string">b&#x27;1234567812345678&#x27;</span> <span class="comment">#秘钥，b就是表示为bytes类型</span></span><br><span class="line">text = <span class="string">b&#x27;abcdefghijklmnhi&#x27;</span> <span class="comment">#需要加密的内容，bytes类型</span></span><br><span class="line">aes = AES.new(password,AES.MODE_ECB) <span class="comment">#创建一个aes对象</span></span><br><span class="line"><span class="comment"># AES.MODE_ECB 表示模式是ECB模式</span></span><br><span class="line">en_text = aes.encrypt(text) <span class="comment">#加密明文</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;密文：&quot;</span>,en_text) <span class="comment">#加密明文，bytes类型</span></span><br><span class="line">den_text = aes.decrypt(en_text) <span class="comment"># 解密密文</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;明文：&quot;</span>,den_text)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title>经典七层网络模型</title>
    <url>/m42-orion/2022/08/21/%E7%BB%8F%E5%85%B8%E4%B8%83%E5%B1%82%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<p>以前： 为什么我用不到面试还要问？<br>现在： 为什么我会用到这东西啊？</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>七层网络模型是每一个程序员在基础学习的时候都需要面对的一个知识点，与其相关的还有五层模型与四层模型，其实都是一个东西在不同场景使用和描述的不同，本质上差不多。</p>
<p>七层模型全称是OSI七层模型，其中OSI叫做国际标准化组织，这个组织专门为全球制定一些标准。</p>
<h2 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h2><p>依照顺序从上往下分别是：</p>
<ul>
<li>应用层</li>
<li>表示层</li>
<li>会话层</li>
<li>传输层</li>
<li>网络层</li>
<li>数据链路层</li>
<li>物理层</li>
</ul>
<p>建立七层模型的主要目的是为解决各种网络互联时遇到的兼容性问题。其最大的优点是将服务、接口和协议这三个概念明确地区分开来：服务说明某一层为上一层提供一些什么功能，接口说明上一层如何使用下层的服务，而协议则是如何实现本层的服务。如此各层之间就具有很强的独立性，互联网络中各实体采用什么样的协议是没有限制的，只要向上提供服务并且不改变相临层的接口就可以了。网络七层的划分也是为了使用网络的不同功能模块分担起不同的职责，也就带来如下好处：</p>
<ul>
<li>减轻问题的复杂程度，一旦发生网络故障，可迅速定位故障所处层次</li>
<li>在各层分别定义标准接口，使具备相同对等层的不同网络设备能实现互操作。各层之间相对独立，一种高层次协议可放在多种低层次协议上运行。</li>
<li>能有效刺激网络技术革新，因为每次更新都可以在小范围内进行，不需要更改整个系统</li>
</ul>
<p>七层模型每一层都有属于自己层的特殊协议，担任着该层的数据传输功能，数据在物理介质当中传输的时候，协议解析是从下往上解析，然后再从上往下封装。</p>
<h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><p>是最靠近应用程序的OSI层。由用户使用相应的接口实现自己的服务。</p>
<p>协议有：HTTP FTP SMTP等</p>
<h3 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h3><p>数据的表示、安全、压缩。可确保一个系统的应用层所发送的信息被另一个系统的应用层读取。格式有: JPEG、ASCII、加密格式等。</p>
<p>在表示层，数据按照网络能理解的方案进行格式化。管理数据的加密与解密。</p>
<h3 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h3><p>建立、管理、终止会话，对应主机进程，指本地主机与远程主机正在进行的会话。负责在网络的两节点之间建立、维持和终止通信。</p>
<p>会话层的功能包括：建立通信链接，保持会话过程通信连接的畅通，同步两个节点之间的对话，决定通信是否被终端以及通信中断时从何处重新发送。</p>
<p>有人会把会话层称为网络通信得到“交通警察”。当通过拨号向你的ISP（因特网服务提供商）请求连接到因特网时，ISP服务器上的会话层向你与你的PC客户机上的会话层进行协商连接。若你的电话线偶然脱落时，会话层将会检测到连接中断并重新发起连接。会话层通过决定节点通信的优先级和通信时间的长短来设置通信期限。</p>
<h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><p>定义传输数据的协议端口号，以及流控和差错校验。</p>
<p>协议有：TCP UDP等，数据包一旦离开网卡即进入网络传输层。定义了一些传输数据的协议和端口号，如：TCP（传输控制协议，传输效率低，可靠性强，用于传输可靠性要求高，数据量大的数据），UDP（用户数据报协议，用于传输可靠性要求不高，数据量小的数据）。主要是讲从下层接收的数据进行分段和传输，到达目的地后再进行重组。常常把这一层数据叫做段。</p>
<p>OSI模型中最终要的一层。传输协议同时进行浏览控制或是基于接收方可接收数据的快慢程度规定适当的发送速率。除此之外，传输层按照网络能处理的最大尺寸将较长的数据包进行强制分割。例如，以太网无法接收大于1500字节的数据包。发送方节点的传输层将数据分割成较小的数据片，同时对每一数据片安排一个序列号，以便数据到达接收方节点的传输层时，能以正确的顺序重组。该过程称作排序。</p>
<h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><p>进行逻辑地址寻址，实现不同网络之间的路径选择等。协议有：ICMP IGMP IP ARP RARP等。</p>
<p>在位于不同地理位置的网络中的两个主机系统之间提供连接和路径选择。Internet的发展使得从世界各站点访问信息的用户量大大增加，网络层正式管理这种连接的层。</p>
<p>OSI模型的第三层，其主要功能是将网络地址翻译成对应的物理地址，并决定如何将数据从发送方路由到接收方。</p>
<p>网络层通过综合考虑发送优先权、网络拥塞程度、服务质量以及可选路由的花费来决定从一个网络中节点A到另一个网络节点B的最佳路径。由于网络层处理，并智能指导数据传送，路由器连接网络各段，所以路由器属于网络层。在网络中，”路由“是基于编址方案、使用模式以及可达性来指导数据的发送。</p>
<p>网络层用于本地LAN网段之上的计算机系统建立通信，它之所以可以这样做，是因为它有自已的路由地址结构，这种结构与第二层机器地址是分开的、独立的。这种协议称为路由或可路由协议。路由协议包括IP、Novell公司的IPX以及AppleTalk协议。</p>
<h3 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h3><p>建立逻辑连接、进行硬件地址寻址、差错校验等功能。将比特组合成字节进而组合成帧，用MAC地址访问介质，错误发现但不能纠正。</p>
<p>主要功能是如何在不可靠的物理线路上进行数据的可靠传递。为了保证传输，从网络层接收的数据被分割成特定的可被物理层传输的帧。帧是用来移动数据的结构包，它不仅包括原始数据，还包括发送方和接收方的物理地址以及检错和控制信息。其中的地址确定了帧将发往何处，而纠错和控制信息则确保帧无差错到达。如果在传送数据时，接收点检测到所传数据中有差错，就要通知发送方重发这一帧。</p>
<p>数据链路层在物理层提供比特流服务的基础上，建立相邻节点之间的数据链路，通过差错控制提供数据帧在信道上无差错的传输，并进行各电路上的动作系列。作用主要是物理地址寻址、数据的成帧、流量控制、数据的检错、重发等。</p>
<h3 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h3><p>建立、维护、断开物理连接。</p>
<p>主要定义物理设备标准，如网线的接口类型，光纤的接口类型，各种传输介质的传输速率等。主要作用是传输比特流（就是有1、0转化为电力强弱来进行传输，到达目的地后在转化为1、0）。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>深入理解网模型有利于在逆向方向深入理解。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>协议</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>霍夫线变换</title>
    <url>/m42-orion/2022/08/23/%E9%9C%8D%E5%A4%AB%E7%BA%BF%E5%8F%98%E6%8D%A2/</url>
    <content><![CDATA[<p>霍夫线变化适用于在检测某一张图像中线段的位置，在实际使用过程当中可用于对图像线段特征进行查找过滤。个人能够想到的实际用途可能是用于作业检测，检测在横线上填写的答案。霍夫变换是图像分析，机器视觉，数字图像处理中常用的处理方法。这种方法能从图像中分离出一些特定的形状的图形。经典的霍夫变换研究的是如何在图像中分离出直线，随着研究的深入，霍夫变换可以分离出图像中的圆，椭圆，甚至是任意形状。</p>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>首先需要明白一个基础知识，就是在笛卡尔坐标系当中，一条线段的表示方法是：<code>y = kx + q</code>，其中<code>q</code>是常量。但是在霍夫空间中，一条线段是以<strong>一个点</strong>来表示的。反之，霍夫空间中的线代表笛卡尔坐标系当中的点。即：</p>
<ul>
<li>霍夫空间点 == 笛卡尔坐标系线</li>
<li>笛卡尔坐标系点 == 霍夫空间线</li>
</ul>
<p>这很重要！！！当我们需要找到图像中的一条线段的时候，需要确定被处理后的图像的多个点是否交于同一线。如果多个点在笛卡尔坐标系当中是同一线，反之在霍夫空间当中多条线会交于同一点上。由此实现点与线的对应关系。</p>
<p>在霍夫空间当中，只需要统计相交于同一点的线最多的点，就能找到图像中越接近线的部分。接下来看看具体转化过程。</p>
<h2 id="原理讲解"><a href="#原理讲解" class="headerlink" title="原理讲解"></a>原理讲解</h2><p>首先确认笛卡尔坐标系当中想要确定一条线需要确定两个值,即方程式<code>y = kx + q</code>当中的<code>k</code>与<code>q</code>,确认了这两个值之后就能确认一条线的位置。于是乎，在霍夫空间中就以<code>(k,q)</code>的点来表示一条线段，由此实现了笛卡尔坐标系到霍夫空间的转化。</p>
<p>反之如果知道笛卡尔坐标系当中的一个点，如<code>(4,5)</code>，怎么推导霍夫空间的函数呢？此时只需要带入方程式：<code>y = kx + q</code>,即可得出<code>q = 5-4x</code>。</p>
<h3 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h3><p>在特殊的情况下，如果出现由<code>(1,2)、(1,2)、(1,3)、(1,4)</code>这四个点组成的直线，直线垂直于坐标轴x轴。原来的方程<code>y = kx + q</code>已经不能够适用在这样的情况之下了，该怎么办呢？</p>
<p>这时候就需要祭出我们的极坐标系了！在极坐标系当中，一条线的方程式是<code>ρ = xcosθ + ysinθ</code>。其中<code>ρ</code>代表线上一点到原点的距离，<code>θ</code>代表线上一点于原点的连线和x轴的夹角，因此同理可以得出极坐标系于霍夫空间的对应关系，以极坐标系上的点为例。以<code>(1,0)</code>为例，带入方程：<code>ρ = xcosθ + ysinθ</code>可得<code>ρ = cosθ</code></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>笛卡尔坐标系通过与霍夫空间进行转化，能够将两者的点与线进行映射从而找到图像中的线，因此只要使用适当的线的函数通过映射关系理论上可以找出任意的线甚至多边形。而在opnecv当中，已经通过python代码写好工具提供给我们使用了，代码案例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">img = cv.imread(cv.samples.findFile(<span class="string">&#x27;sudoku.png&#x27;</span>))</span><br><span class="line">gray = cv.cvtColor(img,cv.COLOR_BGR2GRAY)</span><br><span class="line">edges = cv.Canny(gray,<span class="number">50</span>,<span class="number">150</span>,apertureSize = <span class="number">3</span>)</span><br><span class="line">lines = cv.HoughLines(edges,<span class="number">1</span>,np.pi/<span class="number">180</span>,<span class="number">200</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    rho,theta = line[<span class="number">0</span>]</span><br><span class="line">    a = np.cos(theta)</span><br><span class="line">    b = np.sin(theta)</span><br><span class="line">    x0 = a*rho</span><br><span class="line">    y0 = b*rho</span><br><span class="line">    x1 = <span class="built_in">int</span>(x0 + <span class="number">1000</span>*(-b))</span><br><span class="line">    y1 = <span class="built_in">int</span>(y0 + <span class="number">1000</span>*(a))</span><br><span class="line">    x2 = <span class="built_in">int</span>(x0 - <span class="number">1000</span>*(-b))</span><br><span class="line">    y2 = <span class="built_in">int</span>(y0 - <span class="number">1000</span>*(a))</span><br><span class="line">    cv.line(img,(x1,y1),(x2,y2),(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),<span class="number">2</span>)</span><br><span class="line">cv.imwrite(<span class="string">&#x27;houghlines3.jpg&#x27;</span>,img)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>图像处理</tag>
      </tags>
  </entry>
  <entry>
    <title>python保存变量</title>
    <url>/m42-orion/2022/08/29/python%E4%BF%9D%E5%AD%98%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<p>在python程序当中，如果需要涉及到读取体积较大文件或者涉及较为复杂的变量处理的时候，在变量的处理或者序列化的阶段可能非常耗费时间，基于此我们可以提前将变量保存起来形成文件的格式。与原来的读取文本文件的方式不同，变量保存的文件读取之后直接就是包含数据结构与对象类型的变量，并且读取速度也会相应的快很多。</p>
<p>python为不同的情况提供了多种变量的保存方式，有些库自己也提供某些变量的保存方式。以下展示几种python保存变量的方式。</p>
<p>方法一：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储变量的文件的名字</span></span><br><span class="line">filename = <span class="string">&#x27;shoplist.data&#x27;</span></span><br><span class="line"><span class="comment"># 初始化变量</span></span><br><span class="line">shoplist = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;mango&#x27;</span>, <span class="string">&#x27;carrot&#x27;</span>]</span><br><span class="line"><span class="comment"># 以二进制写模式打开目标文件</span></span><br><span class="line">f = <span class="built_in">open</span>(filename, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"><span class="comment"># 将变量存储到目标文件中区</span></span><br><span class="line">pickle.dump(shoplist, f)</span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">f.close()</span><br><span class="line"><span class="comment"># 删除变量</span></span><br><span class="line"><span class="keyword">del</span> shoplist</span><br><span class="line"><span class="comment"># 以二进制读模式打开目标文件</span></span><br><span class="line">f = <span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line"><span class="comment"># 将文件中的变量加载到当前工作区</span></span><br><span class="line">storedlist = pickle.load(f)</span><br><span class="line"><span class="built_in">print</span>(storedlist)</span><br></pre></td></tr></table></figure>

<p>方法二：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#当然如果你安了sklearn，保存东西会简单一点。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.externals <span class="keyword">import</span> joblib</span><br><span class="line"><span class="comment"># 保存x</span></span><br><span class="line">joblib.dump(x, <span class="string">&#x27;x.pkl&#x27;</span>) </span><br><span class="line"><span class="comment"># 加载x</span></span><br><span class="line">x = joblib.load(<span class="string">&#x27;x.pkl&#x27;</span>) </span><br><span class="line">对于dataframe数据类型，也有自己的保存方法。</span><br></pre></td></tr></table></figure>

<p>方法三：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">20</span>).reshape(<span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;写入数据\n&#x27;</span>,df)</span><br><span class="line"><span class="comment"># 使用DataFrame的to_pickle属性就可以生成pickle文件对数据进行永久储存</span></span><br><span class="line">df.to_pickle(<span class="string">&#x27;foo.pkl&#x27;</span>)</span><br><span class="line"><span class="comment"># 使用pandas库的pd.read_pickle读取pickle数据</span></span><br><span class="line">dr = pd.read_pickle(<span class="string">&#x27;foo.pkl&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;读取数据\n&#x27;</span>, dr)</span><br></pre></td></tr></table></figure>

<p>方法四：</p>
<p>numpy保存文件</p>
<p>二进制文件</p>
<ul>
<li>只保存数据不保存形状和元素类型<code>a.tofile(&#39;a.bin)</code></li>
<li>读入时需要指定元素类型<code>b=np.fromfile(&#39;a.bin’,dtype=np.int32)</code></li>
</ul>
<p>npy文件</p>
<ul>
<li>保存：<code>np.save(&#39;a.npy&#39;,a)</code></li>
<li>读取：<code>c=np.load(&#39;a.npy&#39;)</code></li>
</ul>
<p>txt和csv等文件</p>
<ul>
<li>保存：<code>np.savetxt(&#39;a.txt&#39; ,a,fmt=&#39;%d&#39;)</code></li>
<li>读取：<code>np.loadtxt(&#39;a.txt&#39;,dtype=&#39;int&#39;)</code></li>
</ul>
<blockquote>
<p><strong>注意：</strong>并不是所有的变量都能够保存并且落盘，某些变量不能够进行序列化或者本身只包含索引，因此会导致保存失败</p>
</blockquote>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>（fastapi六）fastapi当中的多进程方案</title>
    <url>/m42-orion/2022/08/29/%EF%BC%88fastapi%E5%85%AD%EF%BC%89fastapi%E5%BD%93%E4%B8%AD%E7%9A%84%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>在使用python创建web服务过程当中，往往有时候需要使用到多进程，这个时候就会出现以下一些问题：</p>
<ul>
<li>多进程怎么管理？</li>
<li>python创建进程拷贝资源导致占用太多怎么办？</li>
<li>进程之间数据怎么通信？</li>
<li>出现某些变量无法被序列化的时候进程通信怎么办？</li>
<li>共享内存的时候数据传输问题？</li>
</ul>
<p>以上问题是我个人在使用fastapi的时候遇到的，问题在于我想要使用fastapi结合某些机器学习的模型为别人提供服务，由于机器学习的模型太过于庞大并且每一次计算都相当的耗费计算资源，因此想要使用多进程的方式进行解决。以下是解决问题的过程！</p>
<h2 id="直接使用fastapi的多进程"><a href="#直接使用fastapi的多进程" class="headerlink" title="直接使用fastapi的多进程"></a>直接使用fastapi的多进程</h2><p>没错fastapi自己也有多进程，只需要在启动的时候添加一个wokers参数就可以了，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">uvicorn.run(app=<span class="string">&#x27;main:app&#x27;</span>, host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">8000</span>, reload=<span class="literal">True</span>, debug=<span class="literal">True</span>,works=<span class="number">2</span>)<span class="comment"># 启动命令</span></span><br></pre></td></tr></table></figure>

<p>用起来确实可以，但是一启动就炸了，这个多进程本质上多个fastapi一起启动的用法，在我启动之后我就发现了事情的不对，内存占用飙升，因为我第一次开了16个进程，多进程诶！！不过分吧，然后就炸了。</p>
<h3 id="使用python的多进程"><a href="#使用python的多进程" class="headerlink" title="使用python的多进程"></a>使用python的多进程</h3><p>我后来打算直接使用python的多进程，使用倒是没问题，但是我发现把开多进程的位置放在那个地方很有讲究，因为按照程序的设计，我想要的是每一次一个请求分配一个进程才合理，所以如果函数调用太深入，进程越靠后越慢，几乎没啥乱用，并且效率还会更低。并且然后更离谱的事情就出现了，在使用原生的多进程的时候，CPU倒是不会停留在一个CPU上了，但是每次跑满的也只有一个CPU，我日他仙人，这跟没有什么区别。</p>
<p>再就是进程创建使用的是fork模式，直接拷贝父进程的所有资源，我不出意外的内存又炸了。</p>
<h3 id="使用线程池加共享内存"><a href="#使用线程池加共享内存" class="headerlink" title="使用线程池加共享内存"></a>使用线程池加共享内存</h3><p>线程池是我后来想的，害怕请求太多内存炸了，想搞个线程池，然后加上一段共享内存，不久能够保证子进程内存不会激增，又能够保证多个进程数量被控制么。当时觉得简直机智！我才用python自己的进程池还有<code>Manager.dict()</code>保存一些较大的变量，比如机器学习的模型之类的。</p>
<p>但是，但是，但是……真正上手的时候发现，我需要等待进程的返回结果啊，我把进程池声明一个全局变量的话我该怎么去拿到子进程的结果呢？我还要等待进程？没办法，先妥协一下，把进程池改成多进程，每个路由下发一个进程。然后又是坑爹的事情，<code>onnx模型</code>属于复杂模型，不能够被序列化，报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">can‘t pickle onnxruntime.capi.onnxruntime_pybind11_state.InferenceSession objects</span><br></pre></td></tr></table></figure>

<p>所以从一个进程共享到另一个进程的时候报错了。我内心是崩溃的！因为没办法进程共享内存的话，意味着每一个子进程都要占用相当多的资源，这根本不可取。</p>
<h2 id="最后的办法"><a href="#最后的办法" class="headerlink" title="最后的办法"></a>最后的办法</h2><p>最后使用了一种看起来复杂的办法，就是自己创建一个多进程的对象，在多进程对象当中注册一个共享内存的对象，在使用的时候一切都在对象内部发生，注册的对象也能够正常调用，也不会发生复杂模型在共享的时候序列化问题了。</p>
<p>部分代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> app.selfmodel.bo_zh <span class="keyword">import</span> main_t</span><br><span class="line"><span class="keyword">from</span> cnocr <span class="keyword">import</span> CnOcr  <span class="comment"># type:ignore</span></span><br><span class="line"><span class="keyword">from</span> cnstd <span class="keyword">import</span> CnStd  <span class="comment"># type:ignore yum install mesa-libGL -y</span></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> managers</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor</span><br><span class="line"><span class="keyword">from</span> app.ocr_cn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> app.selftranslation <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> app.translation <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> utils.tools <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> setting.setting <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GlobalObject</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.ocr_std = CnStd()</span><br><span class="line">        self.model_dict = self.create_model_dict()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_model_dict</span>(<span class="params">self</span>):</span><br><span class="line">        model_dict = &#123;<span class="string">&quot;Helsinki-NLP/opus-mt-en-zh&quot;</span>: get_var(<span class="string">&quot;utils/save_var/opus_mt_en_zh.bin&quot;</span>)&#125; <span class="comment"># 这是被序列化之后保存在本地的模型</span></span><br><span class="line">        <span class="keyword">return</span> model_dict</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getStd</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.ocr_std</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_model</span>(<span class="params">self, model_list</span>):</span><br><span class="line">        models = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> model_list:</span><br><span class="line">            models.append(self.model_dict.get(i))</span><br><span class="line">        <span class="keyword">return</span> models</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ocr</span>(<span class="params">self, path</span>):</span><br><span class="line">        res_cn, soc_cn = ocr_std(path, self) <span class="comment"># 遇到不能够序列化的时候可以传递整个对象到到函数当中去，就可以避免这个问题了</span></span><br><span class="line">        <span class="keyword">return</span> res_std, soc_std</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyManager</span>(managers.BaseManager):</span><br><span class="line">    <span class="keyword">pass</span><span class="comment"># 自定义多进程类</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proc_callback</span>(<span class="params">res</span>):</span><br><span class="line">    res_dict[res.result()[<span class="string">&#x27;task_id&#x27;</span>]] = res.result()[<span class="string">&#x27;res&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> res_dict <span class="comment"># 需要一个全局变量用于捕捉结果</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proc_worker_ocr</span>(<span class="params">gobj, task_id, path: <span class="built_in">str</span> = <span class="string">&quot;&quot;</span></span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;task_id&quot;</span>: task_id, <span class="string">&quot;res&quot;</span>: gobj.ocr(path)&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proc_worker_standTran</span>(<span class="params">gobj, task_id, tran_dict</span>):</span><br><span class="line">    models = gobj.get_model(tran_dict.get(<span class="string">&quot;model_name_list&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;task_id&quot;</span>: task_id, <span class="string">&quot;res&quot;</span>: tran_distribution(models, tran_dict)&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proc_worker_default</span>(<span class="params">task_id</span>):</span><br><span class="line">    <span class="keyword">return</span> task_id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ServerExecutor</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 在Manager中注册自定义类（GlobalObject是我的自定义类, 类内部分别包含普通模型与复杂模型两种）</span></span><br><span class="line">        MyManager.register(<span class="string">&quot;GlobalObject&quot;</span>, GlobalObject)</span><br><span class="line">        manager = MyManager()</span><br><span class="line">        manager.start()</span><br><span class="line">        <span class="comment"># 创建共享对象</span></span><br><span class="line">        self.global_object = manager.GlobalObject()  <span class="comment"># type: ignore</span></span><br><span class="line">        <span class="comment"># 这里不仅可以是ProcessPoolExecutor，也可以是多进程Process或者进程池Pool，各自用法略有不同</span></span><br><span class="line">        _cpu_cunt = multiprocessing.cpu_count() <span class="keyword">if</span> cpu_cunt == <span class="literal">None</span> <span class="keyword">else</span> cpu_cunt <span class="comment"># 配置文件获取两个进程池占用比例以及CPU总数信息</span></span><br><span class="line">        self.executor = ProcessPoolExecutor(<span class="built_in">round</span>(_cpu_cunt*ocr_cunt)) <span class="comment"># 这里可以开展多个进程池，进程池不会互相干扰</span></span><br><span class="line">        self.executor_trans = ProcessPoolExecutor(<span class="built_in">round</span>(_cpu_cunt*tran_cunt))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">submit</span>(<span class="params">self, task_id, task_type, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span>(task_type == <span class="string">&quot;OcrManager&quot;</span>):</span><br><span class="line">            future = self.executor.submit(</span><br><span class="line">                proc_worker_ocr, self.global_object, task_id, path=kwargs.get(<span class="string">&quot;path&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">        <span class="keyword">elif</span>(task_type == <span class="string">&quot;TranManager&quot;</span>):</span><br><span class="line">            future = self.executor_trans.submit(</span><br><span class="line">                proc_worker_standTran, self.global_object, task_id, tran_dict=kwargs.get(<span class="string">&quot;tran_dict&quot;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            future = self.executor.submit(proc_worker_default, task_id)</span><br><span class="line">        <span class="keyword">return</span> future</span><br><span class="line">executor = ServerExecutor()</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意：</strong>子进程本身需要从主进程获取自己所需要的资源，如果子进程获取太多就会导致一个问题，进程太多资源抢占导致内存交换问题，程序会直接崩溃。</p>
</blockquote>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>fastapi</tag>
        <tag>多进程</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux当中解压命令基础</title>
    <url>/m42-orion/2022/08/30/Linux%E5%BD%93%E4%B8%AD%E8%A7%A3%E5%8E%8B%E5%91%BD%E4%BB%A4%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>在常见的Linux压缩当中，有两种格式是十分常见的，分别是<code>zip</code>与<code>tar</code>，这边文章对两种格式需要用到的命令做了基础性的总结。</p>
<h2 id="zip和unzip"><a href="#zip和unzip" class="headerlink" title="zip和unzip"></a>zip和unzip</h2><p>zip和unzip命令可以分别对文件进行压缩和解压缩</p>
<h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><p>zip可以对文件快速创建压缩包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zip archive inpath inpath  ...</span><br><span class="line"><span class="comment"># archive指定生成压缩归档文件的路径</span></span><br><span class="line"><span class="comment"># inpath inpath ...要添加到压缩包中的文件路径</span></span><br></pre></td></tr></table></figure>

<p>如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zip backup.zip <span class="built_in">test</span>/*.txt</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在windows当中压缩文件可以右键进行压缩，并且有多种选项，相对的在Linux也可以做这些选项，不过这些都涵盖在命令当中。</p>
</blockquote>
<h3 id="zip分卷压缩"><a href="#zip分卷压缩" class="headerlink" title="zip分卷压缩"></a>zip分卷压缩</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zip -s 64k new.zip *.txt</span><br><span class="line"><span class="comment"># -s 64k 指定分卷大小为64K，zip允许的最小分卷大小为64k。</span></span><br><span class="line">zip test.zip  /bin/zsh  -s 100k</span><br></pre></td></tr></table></figure>

<p>对压缩包重新分卷 如果你有一个较大的压缩包，要进行分卷也可以采用类似的方法。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zip big.ziph --out new.zip -s 1m</span><br></pre></td></tr></table></figure>

<h3 id="zip的更多参数"><a href="#zip的更多参数" class="headerlink" title="zip的更多参数"></a>zip的更多参数</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zip options archive inpath inpath ...</span><br></pre></td></tr></table></figure>

<blockquote>
<p>options在这里是指一系列的选项参数。</p>
</blockquote>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-r</td>
<td>递归遍历目录</td>
</tr>
<tr>
<td>-q</td>
<td>不显示压缩命令的执行过程（q为quite缩写，安静模式）</td>
</tr>
<tr>
<td>-d</td>
<td>删除压缩包中指定文件</td>
</tr>
<tr>
<td>-p</td>
<td>添加密码，密码在命令行是明文</td>
</tr>
<tr>
<td>-e</td>
<td>添加密码，密码是隐藏的</td>
</tr>
</tbody></table>
<blockquote>
<ul>
<li>不使用-r参数，压缩遇到目录，只会添加目录路径本身，不会遍历目录内其他文件</li>
<li>-d 的含义是删除已经压缩好的压缩包当中的文件，不是在压缩过程中排除某个文件</li>
<li>使用-p的时候需要添加密码参数，使用-e的时候不需要添加密码，等待输入回车后提示输入密码</li>
</ul>
</blockquote>
<h3 id="unzip解压缩文件"><a href="#unzip解压缩文件" class="headerlink" title="unzip解压缩文件"></a>unzip解压缩文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip filepath</span><br><span class="line"><span class="comment"># filepath 要解压缩的文件的路径。</span></span><br><span class="line">unzip test.zip</span><br></pre></td></tr></table></figure>

<h3 id="unzip其他参数"><a href="#unzip其他参数" class="headerlink" title="unzip其他参数"></a>unzip其他参数</h3><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-v</td>
<td>查看压缩包内容</td>
</tr>
<tr>
<td>-d</td>
<td>指定解压缩路径</td>
</tr>
</tbody></table>
<h2 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h2><p>gzip命令是一个既能进行压缩，又能进行解压缩的全能选手</p>
<p><strong>使用方法</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gzip [OPTION] ... [FILE] ...</span><br></pre></td></tr></table></figure>

<ul>
<li><code>[OPTION]</code> 选项参数，可以指定多个选项参数</li>
<li><code>[FILE]</code> 要压缩的文件路径，可以指定多个要压缩文件</li>
</ul>
<p>下面是常用参数的一个列表:</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>参数长名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-c</td>
<td>—stdout</td>
<td>在标准输出上输出，保持原始文件</td>
</tr>
<tr>
<td>-d</td>
<td>—decompress</td>
<td>解压缩</td>
</tr>
<tr>
<td>-f</td>
<td>—force</td>
<td>强制覆盖输出文件并压缩链接</td>
</tr>
<tr>
<td>-h</td>
<td>—help</td>
<td>显示帮助</td>
</tr>
<tr>
<td>-k</td>
<td>—keep</td>
<td>保留（不删除）输入文件</td>
</tr>
<tr>
<td>-l</td>
<td>—list</td>
<td>列出压缩文件的内容</td>
</tr>
<tr>
<td>-L</td>
<td>—license</td>
<td>显示软件许可证</td>
</tr>
<tr>
<td>-n</td>
<td>—no</td>
<td>name</td>
</tr>
<tr>
<td>-N</td>
<td>—name</td>
<td>保存或恢复原始文件名称和时间戳</td>
</tr>
<tr>
<td>-q</td>
<td>—quiet</td>
<td>禁用所有警告，安静模式</td>
</tr>
<tr>
<td>-r</td>
<td>—recursive</td>
<td>对目录启动递归操作</td>
</tr>
<tr>
<td></td>
<td>—syncable</td>
<td>制作对rsync友好的存档</td>
</tr>
<tr>
<td>-S</td>
<td>—suffix=SUF</td>
<td>在压缩文件上使用后缀 SUF</td>
</tr>
<tr>
<td></td>
<td>—synchronous</td>
<td>同步输出（如果系统崩溃，则更安全，但是更慢）</td>
</tr>
<tr>
<td>-t</td>
<td>—test</td>
<td>测试压缩文件的完整性</td>
</tr>
<tr>
<td>-v</td>
<td>—verbose</td>
<td>详细输出执行过程</td>
</tr>
<tr>
<td>-V</td>
<td>—version</td>
<td>显示版本号</td>
</tr>
<tr>
<td>-1</td>
<td>—fast</td>
<td>更快的压缩速度</td>
</tr>
<tr>
<td>-9</td>
<td>—best</td>
<td>最好的压缩率</td>
</tr>
</tbody></table>
<h2 id="tar命令归档"><a href="#tar命令归档" class="headerlink" title="tar命令归档"></a>tar命令归档</h2><p>tar命令可以将多个文件归档到一个文件，或者从归档中还原出所有文件。</p>
<p>这里tar命令的作用是把多个文件打包成一个文件，如果此时再对打包后的这个文件进行gzip压缩，这就会生成一个带压缩的归档文件，通常会看到.tar.gz这样的文件后缀。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar [options...] [file] ...</span><br></pre></td></tr></table></figure>

<ul>
<li>options为可选参数，可以有多个options参数</li>
<li>file为要归档的文件路径，可以有多个这样的file</li>
</ul>
<p>下面是tar命令的一些常用的options参数。</p>
<table>
<thead>
<tr>
<th>选项参数</th>
<th>长选项</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-c</td>
<td>—create</td>
<td>创建一个新的归档文件</td>
</tr>
<tr>
<td>-r</td>
<td>—append</td>
<td>往归档文件末尾追加文件</td>
</tr>
<tr>
<td>-u</td>
<td>—update</td>
<td>将更新的文件更新到归档中</td>
</tr>
<tr>
<td>-x</td>
<td>—get —extract</td>
<td>将归档中解压文件</td>
</tr>
<tr>
<td>-d</td>
<td>—diff —compare</td>
<td>对归档和文件系统中的文件进行差异比较</td>
</tr>
<tr>
<td></td>
<td>—delete</td>
<td>从归档文件中删除指定文件</td>
</tr>
<tr>
<td>-t</td>
<td>—list</td>
<td>查看归档文件中的内容列表</td>
</tr>
<tr>
<td>-v</td>
<td>—verbose</td>
<td>显示执行过程</td>
</tr>
<tr>
<td>-z</td>
<td>—gzip</td>
<td>使用gzip进行压缩</td>
</tr>
<tr>
<td>-f</td>
<td>—file</td>
<td>指定备份文件名称</td>
</tr>
</tbody></table>
<p>并且以上面的这些选项参数可以叠加使用,如下：</p>
<h3 id="创建归档"><a href="#创建归档" class="headerlink" title="创建归档"></a>创建归档</h3><p>下面的这条命令，是对当前路径下所有的.txt后缀的文件进行归档，并使用gzip对归档文件进行压缩。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -czvf test.tar.gz <span class="built_in">test</span>/</span><br></pre></td></tr></table></figure>

<p>-czvf 这是一个多个选项合并的写法，</p>
<ul>
<li>c 创建归档</li>
<li>z 使用gzip进行压缩处理</li>
<li>v 显示执行过程</li>
<li>f 指定归档文件的名称，</li>
<li><code>test.tar.gz</code> 为归档文件的名称</li>
<li><code>test/</code> 为要归档的文件路径</li>
</ul>
<h3 id="解压归档"><a href="#解压归档" class="headerlink" title="解压归档"></a>解压归档</h3><p>使用下面这条命令，我们可以把一个gzip压缩的归档文件进行解压缩。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf test.tar.gz</span><br></pre></td></tr></table></figure>

<p>注意实验前，先把test目录删除干净，然后再进行解压操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf <span class="built_in">test</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>何为ssh?</title>
    <url>/m42-orion/2022/09/03/%E4%BD%95%E4%B8%BAssh/</url>
    <content><![CDATA[<p>在初学Linux的时候或者第一次使用git的时候一定会出现一种协议叫做ssh,并且不可避免的需要配置ssh协议，但是使用了很久都没有去关注ssh到底是什么？</p>
<h2 id="ssh协议（Secure-Shell）"><a href="#ssh协议（Secure-Shell）" class="headerlink" title="ssh协议（Secure Shell）"></a>ssh协议（Secure Shell）</h2><p>ssh中文名为安全外壳,是一种网络安全<strong>协议</strong>，通过加密和认证机制实现安全的访问和文件传输等业务。SSH协议通过对网络数据进行加密和验证，在不安全的网络环境中提供了安全的登录和其他安全网络服务。作为Telnet和其他不安全远程shell协议的安全替代方案。</p>
<p>SSH服务由服务端软件OpenSSH和连接客户端组成（SSH、SecureCRT,xshell等），默认端口是22。SSH是一个守护进程，负责实时监听客户端请求，并进行处理。</p>
<p>ssh是一种应用层协议，它的传输层协议是tcp。</p>
<h2 id="ssh连接流程"><a href="#ssh连接流程" class="headerlink" title="ssh连接流程"></a>ssh连接流程</h2><p>ssh协议建立连接的过程为：</p>
<ul>
<li>tcp三次握手  </li>
<li>ssh协议版本协商  </li>
<li>服务器端把公钥发给客户端  </li>
<li>加密算法协商  </li>
<li>客户端使用公钥对服务器端的密码加密并发送给服务器端  </li>
<li>服务器端收到后用自己的私钥解密后得到用户名密码和本地密码对比，验证成功允许登录，否则需要客户端再次输入密码验证</li>
</ul>
<p>这里出现了两次协商，第一次见到协商的时候可能不理解怎么协商，会以为是什么专业名词，但是其实协商的意思。</p>
<h3 id="版本协商"><a href="#版本协商" class="headerlink" title="版本协商"></a>版本协商</h3><p>SSH目前包括 SSH1和SSH2两个版本， 双方通过版本协商确定使用的版本。建立连接后，服务端向客户端发送报文<code>（版本标志字符串：SSH－&lt;主协议版本号&gt;.&lt;次协议版本号&gt;－&lt;软件版本号&gt;&gt;）</code>客户端收到报文后，解析数据包，如果服务端的协议版本号比自己的低，且客户端能支持服务端的低版本，就采用服务器端的低版本协议号，否则采用客户端自己的协议版本号。</p>
<p>客户端回应服务器一个报文，包含客户端决定使用的协议版本号。服务端会比较客户端发来的版本号，决定是否能同客户端进行正常工作。</p>
<p>协商成功，就会进入密钥和算法协商阶段，否则服务端断开TCP连接。</p>
<h3 id="算法协商"><a href="#算法协商" class="headerlink" title="算法协商"></a>算法协商</h3><p>SSH支持多种加密算法， 在服务端和客户端分别发送算法协商报文给对方后，报文中包含自己支持的公钥算法列表、加密算法列表、MAC（Message Authentication Code，消息验证码）算法列表、压缩算法列表等协商信息。</p>
<p>服务端和客户端根据对方和自己支持的算法列表确定最终使用的算法。</p>
<h2 id="SSH的认证方式"><a href="#SSH的认证方式" class="headerlink" title="SSH的认证方式"></a>SSH的认证方式</h2><p>password认证</p>
<p>客户端向服务端发出 password认证请求，然后将用户名和密码加密后发送给服务器；服务器将该信息解密后得到用户名和密码的明文，与自己设备上保存的用户名和密码进行比较，并返回认证成功或失败的消息。</p>
<hr>
<p>publickey 认证  </p>
<p>采用数字签名的方法来认证客户端。目前，设备上可以利用RSA和 DSA两种公共密钥算法实现数字签名。</p>
<p>客户端发送包含用户名、公共密钥和公共密钥算法的 publickey 认证请求给服务端。服务器、端对公钥进行合法性检查，如果不合法，则直接发送失败消息；否则，服务器利用数字签名对客户端进行认证，并返回认证成功或失败的消息。</p>
<hr>
<p>password-publickey 认证(SSH2.0)  </p>
<p>指定该用户的认证方式为 password 和 publickey认证必须同时满足。</p>
<blockquote>
<p>说明：客户端版本为 SSH1的用户只要通过其中一种认证即可登录；客户端版本为 SSH2的用户必须两种认证都通过才能登录。</p>
</blockquote>
<hr>
<p>any认证(SSH2.0)  </p>
<p>指定该用户的认证方式可以是 password、 publickey中任意一种。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>协议</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>neo4j基础</title>
    <url>/m42-orion/2022/09/03/neo4j%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>曾经使用neo4j实现了一个娱乐圈明星关系网络，那次在安装的时候耗费了我一上午的时间，距离上次使用之后我已经一年没使用过了，忘得差不多了，现在有需要要重新使用neo4j。再次使用docker安装使用想要记录一下。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="neo4j简介"><a href="#neo4j简介" class="headerlink" title="neo4j简介"></a><code>neo4j</code>简介</h3><p><code>neo4j</code>是一种图数据库，与常见的关系型数据库不同，图数据库不以表结构存储数据。图数据库本身属于<code>NoSql</code>数据库中的一种，是基于数学中图论实现的一种数据库。图数据库将数据和数据之间的关系存在节点和边中，在图数据库中这被称作<strong>节点</strong>和<strong>关系</strong>。没有了库表字段的概念，相当于是把数据存在了一张大宽表中。</p>
<p><code>Neo4j</code>是图数据库中一个主要代表，其开源，且用<code>Java</code>实现。经过几年的发展，已经可以用于生产环境。其有两种运行方式，一种是服务的方式，对外提供REST接口；另外一种是嵌入式模式，数据以文件的形式存放在本地，可以直接对本地文件进行操作。</p>
<p>举一个简单但不是很恰当的案例，图数据库将数据按<strong>图数据结构</strong>进行存储数据，按数据节点与关系进行存储，保存节点和关系的数据以及其属性信息。</p>
<hr>
<h3 id="docker简介"><a href="#docker简介" class="headerlink" title="docker简介"></a>docker简介</h3><p><code>docker</code>的英文意思是 码头工人，意思就是搬运东西的意思，其实这和<code>docker</code>的特点是一样的，<code>docker</code>提供的就是一种容器化搬运东西（我们的软件、程序）的过程。<code>docker</code>自己本来是运行在操作系统上一个程序软件，它会提供一个容器环境，使我们的程序独立地运行在容器中。</p>
<p>举一个简单但不是很恰当的案例，如果需要拷贝自己电脑上的环境给别人，最好的办法是把环境搞成虚拟机，直接把虚拟机给别人，但是这样太过于庞大。<code>docker</code>创建了一个容器，可以达到仅仅拷贝环境就行的程度，并且这个容器可以被迁移到其他有<code>docker</code>的机器上正常运行。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>由于自己是基于docker进行安装的，所以安装十分简单,访问docker<a href="https://hub.docker.com/_/neo4j">官网</a>,按照教程输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">docker pull neo4j</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">docker run --publish=7474:7474 --publish=7687:7687 --volume=<span class="variable">$HOME</span>/neo4j/data:/data neo4j</span><br></pre></td></tr></table></figure>

<p>安装启动好之后，需要访问对应端口设置账号密码，初始帐号密码为：<code>neo4j/neo4j</code></p>
<blockquote>
<p>个人推荐通过portainer管理docker</p>
</blockquote>
<h2 id="基础语法-增删改查"><a href="#基础语法-增删改查" class="headerlink" title="基础语法(增删改查)"></a>基础语法(增删改查)</h2><p>neo4j的语法非常简单，语法本身就像画图一样，这里只列举简单操作。</p>
<h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><p>作为图数据库，一定存在两种对象，一是节点，二是关系。当需要创建节点时候需要明确节点信息，假设我们需要创建一个<strong>Cat</strong>类别，并且具有以下属性的节点：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;tom&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;color&quot;</span><span class="punctuation">:</span><span class="string">&quot;blue&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="string">&quot;1940-?&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;height&quot;</span><span class="punctuation">:</span><span class="number">92</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span><span class="string">&quot;man&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hobby&quot;</span><span class="punctuation">:</span><span class="string">&quot;Catch mice&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>改写成数据库语句如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> (n:Cat &#123;name:&quot;tom&quot;,color:&quot;blue&quot;,age:&quot;1940-?&quot;,height:<span class="number">92</span>,sex:&quot;man&quot;,hobby:&quot;Catch mice&quot;&#125;) <span class="keyword">return</span> n;</span><br></pre></td></tr></table></figure>

<p>其中Cat是属性，n是对当前节点起的别名，其他字母也行，注意return的时候一致。</p>
<hr>
<p>对于关系，一样的有这样的信息，因此sql语句也类似。但是关系不是凭空出现的，一定是两个节点存在才能够创建关系，因此要么创建关系的时候也创建节点，要么就需要优先找到关系，如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">MATCH</span> (a:Cat), (b:Mouse) <span class="keyword">WHERE</span> a.name <span class="operator">=</span> &quot;tom&quot; <span class="keyword">AND</span> b.name <span class="operator">=</span> &quot;jerry&quot; </span><br><span class="line"><span class="keyword">CREATE</span> (a)<span class="operator">-</span>[r:Catch &#123;<span class="keyword">function</span>:&quot;chase&quot;&#125;]<span class="operator">-</span><span class="operator">&gt;</span>(b) </span><br><span class="line"><span class="keyword">RETURN</span> a, b</span><br></pre></td></tr></table></figure>

<p>如果没有节点就想要关系，就需要创建节点的时候一并创建关系,简写如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> (fb1:FaceBookProfile1)<span class="operator">-</span>[<span class="keyword">like</span>:LIKES]<span class="operator">-</span><span class="operator">&gt;</span>(fb2:FaceBookProfile2) </span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意：</strong>关系的创建只能够单向创建，不能够创建双向关系。</p>
</blockquote>
<p>就这么简单，像画图一样</p>
<h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><p>对于删除，涉及到删除节点、删除关系、删除属性，其中删除节点与删除关系类似。但是删除了节点之后，节点附带的所有关系也会被一并删除，因此删除节点需要十分小心。</p>
<p>删除节点或者关系：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">MATCH</span>(node:Cat&#123;name:&quot;Tom&quot;&#125;)</span><br><span class="line">DETACH <span class="keyword">DELETE</span> node</span><br></pre></td></tr></table></figure>

<p>这种删除模式本质上都是先找定位到这个节点或者关系，然后删除掉。</p>
<hr>
<p>当涉及到删除其属性信息的时候语法需要做一点点改变:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">MATCH</span>(node:Cat)</span><br><span class="line">REMOVE node.property_name </span><br><span class="line"><span class="comment">-- 或者可以将属性制空</span></span><br><span class="line"><span class="keyword">MATCH</span>(node:Cat)</span><br><span class="line"><span class="keyword">SET</span> node.name <span class="operator">=</span> <span class="keyword">null</span></span><br><span class="line"><span class="keyword">return</span>  node</span><br></pre></td></tr></table></figure>

<hr>
<p>最后说一种，由于自己是实验，因此常常用到全部删除：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">match</span> (n) detach <span class="keyword">delete</span> n</span><br></pre></td></tr></table></figure>

<h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><p>修改一般来说就是修改属性信息，关系的指向不能够被修改，只能删除重建。修改属性如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">MATCH</span>(node:Cat)</span><br><span class="line"><span class="keyword">SET</span> node.mood <span class="operator">=</span> good</span><br><span class="line"><span class="keyword">return</span>  node</span><br></pre></td></tr></table></figure>

<p>新增亦如此</p>
<h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><p>查询其实在上面已经被提及过了即<code>MATCH</code>，如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">MATCH</span>(node:Cat) <span class="keyword">return</span> node</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>以上仅为简单使用操作</strong></p>
</blockquote>
<h2 id="python操作"><a href="#python操作" class="headerlink" title="python操作"></a>python操作</h2><p>python当中很早便为neo4j提供了便利的操作API：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> py2neo <span class="keyword">import</span> Graph</span><br><span class="line"></span><br><span class="line">graph = Graph(<span class="string">&quot;http://localhost:7474&quot;</span>, auth=(<span class="string">&quot;neo4j&quot;</span>, <span class="string">&quot;test123&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>python 当中既包含操作的函数同时也提供直接的sql语句操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = Node(<span class="string">&quot;概念&quot;</span>, name=<span class="string">&quot;向量&quot;</span>, chapter = <span class="number">1</span> , ID = <span class="number">100</span>)</span><br><span class="line">B = Node(<span class="string">&quot;属性&quot;</span>, name=<span class="string">&quot;向量叉积&quot;</span>, chapter = <span class="number">2</span> , ID = <span class="number">99</span>)</span><br><span class="line">graph.create(A)</span><br><span class="line">graph.create(B)</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">graph_.run(<span class="string">&#x27;MATCH (n) detach delete n&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>篇幅所限就不展开详述讲解了</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>Neo4j</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx基础概念</title>
    <url>/m42-orion/2022/09/04/Nginx%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<p>在操作web的时候常常会遇到一个关键词叫做<code>Nginx</code>代理，或者说在提到负载均衡的时候也会提到这个关键词，但是很久都没有去关注这个是啥</p>
<h2 id="什么是Nginx"><a href="#什么是Nginx" class="headerlink" title="什么是Nginx"></a>什么是<code>Nginx</code></h2><p><code>Nginx</code>是一款轻量级的<code>Web服务器/反向代理服务器</code>及<code>电子邮件（IMAP/POP3）代理服务器</code>。<code>Nginx</code>本身是一个<code>web</code>服务器也可以用来做<strong>负载均衡</strong>及<strong>反向代理</strong>使用，目前使用最多的就是负载均衡。其特点是<strong>占有内存少</strong>，<strong>并发能力强</strong>。<code>nginx</code>的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx的网站有：百度、京东、新浪、网易、腾讯、淘宝等。</p>
<p>Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。2011年6月1日，nginx 1.0.4发布。在全球活跃的网站中有12.18%的使用比率，大约为2220万个网站。Nginx 是一个安装非常的简单、配置文件非常简洁（还能够支持perl语法）、Bug非常少的服务。Nginx 启动特别容易，并且几乎可以做到7*24不间断运行，即使运行数个月也不需要重新启动。你还能够不间断服务的情况下进行软件版本的升级。Nginx代码完全用C语言从头写成。官方数据测试表明能够支持高达 50,000 个并发连接数的响应。</p>
<p>这里涉及两个关键词，一个是<strong>负载均衡</strong>，另一个是<strong>反向代理</strong>。</p>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p><strong>负载均衡（Load Balance，简称 LB）</strong>是高并发、高可用系统必不可少的关键组件，目标是尽力将网络流量平均分发到多个服务器上，以提高系统整体的响应速度和可用性。当服务端涉及多个服务器的时候，每一个服务器所能够接受或者处理数据的能力是不同的，因此负载均衡就是需要根据不同服务器的性能状态分配给不同的服务器不同的数据处理量，实现动态的维护整体工作效率。</p>
<p>负载均衡的主要作用如下：</p>
<ul>
<li><strong>高并发：</strong> 负载均衡通过算法调整负载，尽力均匀的分配应用集群中各节点的工作量，以此提高应用集群的并发处理能力（吞吐量）。</li>
<li><strong>伸缩性：</strong> 添加或减少服务器数量，然后由负载均衡进行分发控制。这使得应用集群具备伸缩性。</li>
<li><strong>高可用：</strong> 负载均衡器可以监控候选服务器，当服务器不可用时，自动跳过，将请求分发给可用的服务器。这使得应用集群具备高可用的特性。</li>
<li><strong>安全防护：</strong> 有些负载均衡软件或硬件提供了安全性功能，如：黑白名单处理、防火墙，防 DDos 攻击等。</li>
</ul>
<h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p><strong>反向代理（Reverse Proxy）</strong>实际运行方式是指以代理服务器来接受<code>internet</code>上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给<code>internet</code>上请求连接的客户端，此时代理服务器对外就表现为一个服务器。</p>
<p>简单来说就是在互联网上的资源需要通过一个中间服务器作为跳板才能将数据正常返回到我们的客户端电脑上，当数据传输面临某些限制或者需要负载均衡的时候就需要这样一个服务器作为数据传输的桥梁。反向代理具有以下特点：</p>
<ul>
<li>使用反向代理，可以对客户端隐藏服务器的IP地址 。保证内网的安全，阻止web攻击，大型网站通常将反向代理作为公网访问地址，Web服务器是内网。</li>
<li>反向代理服务器可以作为应用层防火墙，为网站提供对基于Web的攻击行为（例如DoS/DDoS）的防护，更容易排查恶意软件等。</li>
<li>为后端服务器统一提供加密和SSL加速（如SSL终端代理），提供HTTP访问认证等。</li>
<li>负载均衡，通过反向代理服务器来优化网站的负载。反向代理服务器可以做负载均衡，根据所有真实服务器的负载情况，将客户端请求分发到不同的真实服务器上</li>
<li>提高访问速度：反向代理服务器可以对于静态内容及短时间内有大量访问请求的动态内容提供缓存服务，提高访问速度。</li>
</ul>
<h2 id="Nginx使用场景"><a href="#Nginx使用场景" class="headerlink" title="Nginx使用场景"></a><code>Nginx</code>使用场景</h2><!-- Nginx包含负载均衡以及反向代理的作用， -->

<p>在实际开发过程当中，以前的时候可能是一个服务器作为服务端。但是伴随着工作业务的扩展，带来一个问题，访问量不够了，需要更多的计算资源。当涉及到添加多台服务器用于处理数据的时候需要考虑到以下几个问题：</p>
<ul>
<li>多台服务器需要一个统一的出口保证数据不会混乱</li>
<li>多台服务器需要被管理</li>
<li>服务器硬件的差异导致整体工作效率有差异，需要动态调整</li>
</ul>
<p>而这些问题恰好可以被Nginx解决，在部署过程当中，可以将多台2服务器当中的某一台作为代理服务器，在代理服务器上安装Nginx。</p>
<p>而Nginx提供的负载均衡策略有2种：内置策略和扩展策略。内置策略为轮询，加权轮询，Ip hash。</p>
<hr>
<p>轮询指的是后台有多个服务器，代理服务器按照顺序给每一个服务发送请求。而加权轮询则是根据每一个服务器的权重不同，分配不同量级的请求。</p>
<p>并且有一点值得注意的是，网站的资源分为动态资源与静态资源，动态资源是需要通过后台服务器计算的资源，而静态资源是不需要计算的资源，可以直接访问服务器的资源。因此可以在代理服务器上做动静分离操作，静态资源直接访问静态资源对应的服务器，反之亦如此。</p>
<blockquote>
<p> 动静分离，在我们的软件开发中，有些请求是需要后台处理的，有些请求是不需要经过后台处理的（如：css、html、jpg、js等等文件），这些不需要经过后台处理的文件称为静态文件。让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作。提高资源响应的速度。</p>
</blockquote>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>go语言操作txt文件</title>
    <url>/m42-orion/2022/09/04/go%E8%AF%AD%E8%A8%80%E6%93%8D%E4%BD%9Ctxt%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="打开txt"><a href="#打开txt" class="headerlink" title="打开txt"></a>打开txt</h2><p>二进制打开：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	i, v := os.Open(<span class="string">&quot;test.txt&quot;</span>) <span class="comment">//打开文件</span></span><br><span class="line">	<span class="keyword">if</span> v != <span class="literal">nil</span> &#123;                                                                      <span class="comment">//如果报错了进入if</span></span><br><span class="line">		fmt.Println(<span class="string">&quot;打开文件失败&quot;</span>, v)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> i.Close()           <span class="comment">//最后关闭文件</span></span><br><span class="line">	<span class="keyword">var</span> k = <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">128</span>) <span class="comment">//创建一个容量为128字节的切片</span></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		h, l := i.Read(k)                <span class="comment">//开始读取，把读取的数据放入切片k中，h是读取了多少字节，l是报错信息</span></span><br><span class="line">		fmt.Println(<span class="type">string</span>(k[:h]), h, l) <span class="comment">//打印读取的内容</span></span><br><span class="line">		<span class="keyword">if</span> h &lt; <span class="number">128</span> &#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>按行打开：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bufio&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;io&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	i, v := os.Open(<span class="string">&quot;test.txt&quot;</span>) <span class="comment">//打开文件</span></span><br><span class="line">	<span class="keyword">if</span> v != <span class="literal">nil</span> &#123;                                                                      <span class="comment">//如果报错了进入if</span></span><br><span class="line">		fmt.Println(<span class="string">&quot;打开文件失败&quot;</span>, v)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> i.Close() <span class="comment">//最后关闭文件</span></span><br><span class="line">	h := bufio.NewReader(i)</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		l, err := h.ReadString(<span class="string">&#x27;\n&#x27;</span>) <span class="comment">//读到换行</span></span><br><span class="line">		fmt.Print(l)</span><br><span class="line">		<span class="keyword">if</span> err == io.EOF &#123; <span class="comment">//如果读到末尾就会进入</span></span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="写入txt"><a href="#写入txt" class="headerlink" title="写入txt"></a>写入txt</h2><p>普通写入：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bufio&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    filePath := <span class="string">&quot;test.txt&quot;</span></span><br><span class="line">    file, err := os.OpenFile(filePath, os.O_WRONLY|os.O_CREATE, <span class="number">0666</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;文件打开失败&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//及时关闭file句柄</span></span><br><span class="line">    <span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写入文件时，使用带缓存的 *Writer</span></span><br><span class="line">    write := bufio.NewWriter(file)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        write.WriteString(<span class="string">&quot;test info&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Flush将缓存的文件真正写入到文件中</span></span><br><span class="line">    write.Flush()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以追加的形式写入：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bufio&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    filePath := <span class="string">&quot;test.txt&quot;</span></span><br><span class="line">    file, err := os.OpenFile(filePath, os.O_WRONLY|os.O_APPEND, <span class="number">0666</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;文件打开失败&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//及时关闭file句柄</span></span><br><span class="line">    <span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写入文件时，使用带缓存的 *Writer</span></span><br><span class="line">    write := bufio.NewWriter(file)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        write.WriteString(<span class="string">&quot;test info&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Flush将缓存的文件真正写入到文件中</span></span><br><span class="line">    write.Flush()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
        <category>go</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>不常见的python类型校验</title>
    <url>/m42-orion/2022/09/06/%E4%B8%8D%E5%B8%B8%E8%A7%81%E7%9A%84python%E7%B1%BB%E5%9E%8B%E6%A0%A1%E9%AA%8C/</url>
    <content><![CDATA[<p>以前写过关于python类型校验的相关总结，但是不怎么全面，有些不常见的特殊情况并未被记录。</p>
<h2 id="任意类型any"><a href="#任意类型any" class="headerlink" title="任意类型any"></a>任意类型any</h2><p>若声明某函数时指定函数传入参数的数据类型为any，则调用该函数时该参数的参数类型可以为任意类型。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">demo</span>(<span class="params">name: <span class="built_in">any</span>, age: <span class="string">&#x27;int &gt; 0&#x27;</span> = <span class="number">20</span></span>) -&gt; <span class="built_in">str</span>:  <span class="comment"># -&gt;str 表示该函数的返回值是str类型的</span></span><br><span class="line">    <span class="built_in">print</span>(name, <span class="built_in">type</span>(name))</span><br><span class="line">    <span class="built_in">print</span>(age, <span class="built_in">type</span>(age))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 给List[float]类型取个别名为Vector</span></span><br><span class="line">Vector = <span class="type">List</span>[<span class="built_in">float</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scale</span>(<span class="params">scalar: <span class="built_in">float</span>, vector: Vector</span>) -&gt; Vector:</span><br><span class="line">    <span class="keyword">return</span> [scalar * num <span class="keyword">for</span> num <span class="keyword">in</span> vector]</span><br><span class="line"></span><br><span class="line">new_vector = scale(<span class="number">2.0</span>, [<span class="number">1.0</span>, -<span class="number">4.2</span>, <span class="number">5.4</span>])</span><br></pre></td></tr></table></figure>

<h2 id="内容与长度限制"><a href="#内容与长度限制" class="headerlink" title="内容与长度限制"></a>内容与长度限制</h2><p>在需要限制声明变量的长度以及包含类型的时候可以这样做：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Tuple</span></span><br><span class="line"></span><br><span class="line">version: <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>] = (<span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<h2 id="泛型与嵌套类型"><a href="#泛型与嵌套类型" class="headerlink" title="泛型与嵌套类型"></a>泛型与嵌套类型</h2><p>类型结构包含多种样式的时候可以使用泛型与嵌套类型的方式处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var: <span class="type">List</span>[<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">float</span>] = [<span class="number">2</span>, <span class="number">3.5</span>] <span class="comment"># 泛型</span></span><br><span class="line">var: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]] = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">3</span>]] <span class="comment"># 嵌套类型</span></span><br><span class="line">person: <span class="type">Tuple</span>[<span class="built_in">str</span>, <span class="built_in">int</span>, <span class="built_in">float</span>] = (<span class="string">&#x27;Mike&#x27;</span>, <span class="number">22</span>, <span class="number">1.75</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Dict、Mapping、MutableMapping-Set、AbstractSet"><a href="#Dict、Mapping、MutableMapping-Set、AbstractSet" class="headerlink" title="Dict、Mapping、MutableMapping / Set、AbstractSet"></a>Dict、Mapping、MutableMapping / Set、AbstractSet</h2><p>在需要声明字典类型的时候需要十分注意，因为根据官方文档，<code>Dict</code> 推荐用于注解返回类型，<code>Mapping</code> 推荐用于注解参数。它们的使用方法都是一样的，其后跟一个中括号，中括号内分别声明键名、键值的类型.</p>
<p>因此以下写法是不规范的，容易引起编辑器警告：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">testfun</span>(<span class="params">dict_info:<span class="type">Dict</span>[<span class="built_in">str</span>,<span class="built_in">int</span>]=&#123;<span class="string">&quot;key&quot;</span>:<span class="number">1</span>&#125;</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>正确写法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">rect: Mapping[<span class="built_in">str</span>, <span class="built_in">int</span>]</span>) -&gt; <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">int</span>]:</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;width&#x27;</span>: rect[<span class="string">&#x27;width&#x27;</span>] + <span class="number">100</span>, <span class="string">&#x27;height&#x27;</span>: rect[<span class="string">&#x27;width&#x27;</span>] + <span class="number">100</span>&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><code>set</code>亦如此</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">describe</span>(<span class="params">s: AbstractSet[<span class="built_in">int</span>]</span>) -&gt; <span class="type">Set</span>[<span class="built_in">int</span>]:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">set</span>(s)</span><br></pre></td></tr></table></figure>

<h2 id="Sequence"><a href="#Sequence" class="headerlink" title="Sequence"></a>Sequence</h2><p>Sequence是一个泛型，其本身不需要去指定究竟是List还是tuple，用法与List类似</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">elements: <span class="type">Sequence</span>[<span class="built_in">float</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">float</span>]:</span><br><span class="line">    <span class="keyword">return</span> [x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> elements]</span><br></pre></td></tr></table></figure>

<h2 id="无返回内容"><a href="#无返回内容" class="headerlink" title="无返回内容"></a>无返回内容</h2><p>当函数没有返回内容的时候也可以进行注解</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>() -&gt; NoReturn:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="TypeVar"><a href="#TypeVar" class="headerlink" title="TypeVar"></a>TypeVar</h2><p>当使用场景当中某个返回变量可以是多种类型，但不能是某些少数类型的时候，可以采用TypeVar</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 例如一个人的身高，便可以使用 int 或 float 或 None 来表示，但不能用 dict 来表示，所以可以这么声明：</span></span><br><span class="line"></span><br><span class="line">height = <span class="number">1.75</span></span><br><span class="line">Height = TypeVar(<span class="string">&#x27;Height&#x27;</span>, <span class="built_in">int</span>, <span class="built_in">float</span>, <span class="literal">None</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_height</span>() -&gt; Height:</span><br><span class="line">    <span class="keyword">return</span> height</span><br></pre></td></tr></table></figure>

<h2 id="Union"><a href="#Union" class="headerlink" title="Union"></a>Union</h2><p>Union，联合类型，Union[X, Y] 代表要么是 X 类型，要么是 Y 类型。但是不能是两者混用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="type">Union</span>[<span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">str</span>], <span class="built_in">float</span>] == <span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">str</span>, <span class="built_in">float</span>]</span><br></pre></td></tr></table></figure>

<h2 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h2><p>Optional：意思是说这个参数可以为空或已经声明的类型，即 Optional[X] 等价于 Union[X, None]。</p>
<p>在参数传递的时候某些参数不一定非要传值，这时候Optional作为一种可选类型非常好用。</p>
<h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><p>如果想代表一个生成器类型，可以使用 Generator，它的声明比较特殊，其后的中括号紧跟着三个参数，分别代表 YieldType、SendType、ReturnType，如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Generator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">echo_round</span>() -&gt; Generator[<span class="built_in">int</span>, <span class="built_in">float</span>, <span class="built_in">str</span>]:</span><br><span class="line">    sent = <span class="keyword">yield</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> sent &gt;= <span class="number">0</span>:</span><br><span class="line">        sent = <span class="keyword">yield</span> <span class="built_in">round</span>(sent)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Done&#x27;</span></span><br></pre></td></tr></table></figure>

<p>在这里 yield 关键字后面紧跟的变量的类型就是 YieldType，yield 返回的结果的类型就是 SendType，最后生成器 return 的内容就是 ReturnType。</p>
<p>当然很多情况下，生成器往往只需要 yield 内容就够了，我们是不需要 SendType 和 ReturnType 的，可以将其设置为空，如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Generator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">infinite_stream</span>(<span class="params">start: <span class="built_in">int</span></span>) -&gt; Generator[<span class="built_in">int</span>, <span class="literal">None</span>, <span class="literal">None</span>]:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> start</span><br><span class="line">        start += <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>opencv识别颜色与线段</title>
    <url>/m42-orion/2022/09/07/opencv%E8%AF%86%E5%88%AB%E9%A2%9C%E8%89%B2%E4%B8%8E%E7%BA%BF%E6%AE%B5/</url>
    <content><![CDATA[<p>在使用opencv的过程中，实际情况常常需要对线段、圆形、颜色等条件的判断，但是网上多给出一些图像处理的数据，没有给出我需要的判定结果。在尝试后记录了两端代码供之后使用</p>
<h2 id="对于线段的判断"><a href="#对于线段的判断" class="headerlink" title="对于线段的判断"></a>对于线段的判断</h2><p>输出结果为线段长度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&quot;data/img/file.jpeg&quot;</span>)</span><br><span class="line">img=img[<span class="number">0</span>:<span class="built_in">int</span>(img.shape[<span class="number">0</span>]*<span class="number">0.9</span>),<span class="number">0</span>:<span class="built_in">int</span>(img.shape[<span class="number">1</span>]*<span class="number">0.9</span>)]</span><br><span class="line">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">edges = cv2.Canny(gray, <span class="number">50</span>, <span class="number">150</span>, apertureSize=<span class="number">3</span>)</span><br><span class="line">lines = cv2.HoughLinesP(edges,<span class="number">1</span>,np.pi/<span class="number">360</span>,<span class="number">100</span>,minLineLength=<span class="built_in">int</span>(img.shape[<span class="number">1</span>]*<span class="number">0.7</span>),maxLineGap=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_line</span>(<span class="params">img,lines</span>):</span><br><span class="line">    <span class="comment"># 绘制直线</span></span><br><span class="line">    <span class="keyword">for</span> line_points <span class="keyword">in</span> lines:</span><br><span class="line">        lenth = (line_points.<span class="built_in">max</span>()-line_points.<span class="built_in">min</span>())/img.shape[<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span>(lenth)</span><br><span class="line">        cv2.line(img,(line_points[<span class="number">0</span>][<span class="number">0</span>],line_points[<span class="number">0</span>][<span class="number">1</span>]),(line_points[<span class="number">0</span>][<span class="number">2</span>],line_points[<span class="number">0</span>][<span class="number">3</span>]),(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),<span class="number">2</span>,<span class="number">8</span>,<span class="number">0</span>)</span><br><span class="line">    cv2.imshow(<span class="string">&quot;line_img&quot;</span>, img)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">draw_line(img,lines)</span><br></pre></td></tr></table></figure>

<h2 id="对于颜色判断"><a href="#对于颜色判断" class="headerlink" title="对于颜色判断"></a>对于颜色判断</h2><p>红色的色域十分特殊，有两端色域，因此需要将两次结果相加，但是需要注意的是，图像上呈现的视觉颜色并不一定是色域颜色，你看到蓝色可能是参杂了红色的蓝色，因此判断可能会有一点点误差。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">red_img</span>(<span class="params">path:<span class="built_in">str</span>=<span class="string">&quot;data/img/file.jpeg&quot;</span></span>)-&gt;<span class="built_in">bool</span>:</span><br><span class="line">    img = cv2.imread(path)</span><br><span class="line">    img=img[<span class="number">0</span>:<span class="built_in">int</span>(img.shape[<span class="number">0</span>]/<span class="number">3</span>),<span class="number">0</span>:<span class="built_in">int</span>(img.shape[<span class="number">1</span>]/<span class="number">10</span>)]  <span class="comment">#高，宽</span></span><br><span class="line">    <span class="comment"># 在彩色图像的情况下，解码图像将以b g r顺序存储通道。</span></span><br><span class="line">    grid_RGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从RGB色彩空间转换到HSV色彩空间</span></span><br><span class="line">    grid_HSV = cv2.cvtColor(grid_RGB, cv2.COLOR_RGB2HSV)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 函数inRange将不是这个色域的地方全部改为0，因此可以通过这样的方式判断究竟多少部分被划分为了指定的颜色</span></span><br><span class="line">    <span class="comment"># H、S、V范围一：</span></span><br><span class="line">    lower1 = np.array([<span class="number">0</span>, <span class="number">43</span>, <span class="number">46</span>])</span><br><span class="line">    upper1 = np.array([<span class="number">10</span>, <span class="number">255</span>, <span class="number">255</span>])</span><br><span class="line">    mask1 = cv2.inRange(grid_HSV, lower1, upper1)       <span class="comment"># mask1 为二值图像</span></span><br><span class="line">    res1 = cv2.bitwise_and(grid_RGB, grid_RGB, mask=mask1)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># # H、S、V范围二：</span></span><br><span class="line">    lower2 = np.array([<span class="number">156</span>, <span class="number">43</span>, <span class="number">46</span>])</span><br><span class="line">    upper2 = np.array([<span class="number">180</span>, <span class="number">255</span>, <span class="number">255</span>])</span><br><span class="line">    mask2 = cv2.inRange(grid_HSV, lower2, upper2)</span><br><span class="line">    res2 = cv2.bitwise_and(grid_RGB, grid_RGB, mask=mask2)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># # 将两个二值图像结果 相加</span></span><br><span class="line">    mask3 = mask1 + mask2</span><br><span class="line">    <span class="comment"># cv2.imshow(&quot;mask3&quot;, mask3)</span></span><br><span class="line">    <span class="comment"># cv2.imshow(&quot;grid_RGB&quot;, grid_RGB[:, :, ::-1])</span></span><br><span class="line">    <span class="comment"># cv2.waitKey(0)</span></span><br><span class="line">    <span class="comment"># cv2.destroyAllWindows()</span></span><br><span class="line">    list_info = [i.<span class="built_in">max</span>() <span class="keyword">for</span> i <span class="keyword">in</span> mask3]</span><br><span class="line">    <span class="keyword">if</span> list_info.count(<span class="number">255</span>)/<span class="built_in">len</span>(list_info) &gt; <span class="number">0.1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> <span class="comment"># 如果红色面积大于10%则判定为红色</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>opencv</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>python连接远程服务器</title>
    <url>/m42-orion/2022/09/25/python%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<p>python连接远程服务器有很多实现方法，但是在我使用的时候却要要求做成服务的形式，连接信息用后端返回的形式。实现方式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> apscheduler.schedulers.background <span class="keyword">import</span> BackgroundScheduler</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ssh_tunnel</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">survival_detection</span>(<span class="params">self</span>):</span><br><span class="line">        interval_time = <span class="built_in">int</span>(time.time()) - self.start_time</span><br><span class="line">        <span class="keyword">if</span> interval_time &gt; <span class="number">10800</span>:  <span class="comment"># No operation for more than three hours</span></span><br><span class="line">            self.close_connect()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, host_ip: <span class="built_in">str</span>, port: <span class="built_in">int</span>, user: <span class="built_in">str</span>, pwd: <span class="built_in">str</span></span>):</span><br><span class="line">        self.host_ip = host_ip</span><br><span class="line">        self.port = port</span><br><span class="line">        self.user = user</span><br><span class="line">        self.pwd = pwd</span><br><span class="line">        self.connect_obj = <span class="literal">None</span></span><br><span class="line">        self.start_time = <span class="number">9000000000</span>  <span class="comment"># The default startup time is very large</span></span><br><span class="line"></span><br><span class="line">        self.sched = BackgroundScheduler()</span><br><span class="line">        self.sched.add_job(self.survival_detection,</span><br><span class="line">                           trigger=<span class="string">&quot;interval&quot;</span>, hours=<span class="number">3</span>)</span><br><span class="line">        self.sched.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">creat_connect</span>(<span class="params">self</span>) -&gt; <span class="built_in">dict</span>:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;建立连接&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> self.connect_obj != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>: <span class="number">1</span>, <span class="string">&quot;info&quot;</span>: <span class="string">&quot;&gt;&gt;&gt;&quot;</span>&#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            trans = paramiko.Transport((self.host_ip, self.port))</span><br><span class="line">            trans.start_client()</span><br><span class="line">            trans.auth_password(self.user, self.pwd)</span><br><span class="line">            channel = trans.open_session(timeout=<span class="number">1200</span>)  <span class="comment"># </span></span><br><span class="line">            channel.get_pty()  <span class="comment"># Acquire terminal</span></span><br><span class="line">            channel.invoke_shell()  <span class="comment"># Activate terminal</span></span><br><span class="line">            <span class="keyword">while</span> channel.recv_ready() == <span class="literal">True</span>:</span><br><span class="line">                time.sleep(<span class="number">0.01</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            result = channel.recv(<span class="number">10240</span>)</span><br><span class="line">            create_str = result.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">            self.connect_obj = channel</span><br><span class="line">            self.start_time = <span class="built_in">int</span>(time.time())</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>: <span class="number">1</span>, <span class="string">&quot;info&quot;</span>: create_str&#125;</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>: -<span class="number">1</span>, <span class="string">&quot;info&quot;</span>: <span class="string">&quot;Remote connection failed！&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute_cmd</span>(<span class="params">self, commd_str: <span class="built_in">str</span> = <span class="string">&quot;&quot;</span></span>) -&gt; <span class="built_in">dict</span>:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;执行命令&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> self.connect_obj == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>: -<span class="number">1</span>, <span class="string">&quot;info&quot;</span>: <span class="string">&quot;Remote connection failed！&quot;</span>&#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.connect_obj.send(commd_str + <span class="string">&quot;\n&quot;</span>)  <span class="comment"># type:ignore /Execute command</span></span><br><span class="line">            <span class="keyword">while</span> self.connect_obj.recv_ready() == <span class="literal">True</span>:  <span class="comment"># type:ignore /Result acquisition</span></span><br><span class="line">                time.sleep(<span class="number">0.01</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">            result = self.connect_obj.recv(<span class="number">10240</span>)  <span class="comment"># type:ignore</span></span><br><span class="line">            result = result.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">            _result = result[::-<span class="number">1</span>] <span class="comment"># These three lines of code are dealing with some redundant characters. Comments do not affect the overall operation, but only the aesthetics</span></span><br><span class="line">            _<span class="built_in">str</span> = result[<span class="built_in">len</span>(result)-_result.index(<span class="string">&#x27;\r&#x27;</span>)-<span class="number">1</span>::]</span><br><span class="line">            result = result.replace(_<span class="built_in">str</span>*<span class="number">2</span>, _<span class="built_in">str</span>)</span><br><span class="line">            self.start_time = <span class="built_in">int</span>(time.time())  <span class="comment"># Lifetime of each execution refresh</span></span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>: <span class="number">1</span>, <span class="string">&quot;info&quot;</span>: result.replace(commd_str.strip()+<span class="string">&#x27;\r\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)&#125;</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>: -<span class="number">1</span>, <span class="string">&quot;info&quot;</span>: <span class="string">&quot;Remote connection failed！&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close_connect</span>(<span class="params">self</span>) -&gt; <span class="built_in">dict</span>:</span><br><span class="line">        <span class="keyword">if</span> self.connect_obj == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>: -<span class="number">1</span>, <span class="string">&quot;info&quot;</span>: <span class="string">&quot;Remote connection failed！&quot;</span>&#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.connect_obj.close()</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>: <span class="number">1</span>, <span class="string">&quot;info&quot;</span>: <span class="string">&#x27;Connection closed!&#x27;</span>&#125;</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>: -<span class="number">1</span>, <span class="string">&quot;info&quot;</span>: <span class="string">&quot;Connection closing failed！&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    test = ssh_tunnel(host_ip=<span class="string">&#x27;*.*.*.*&#x27;</span>,</span><br><span class="line">                      port=<span class="number">22</span>, user=<span class="string">&#x27;root&#x27;</span>, pwd=<span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line">    res = test.creat_connect()</span><br><span class="line">    <span class="built_in">print</span>(res.get(<span class="string">&#x27;info&#x27;</span>, <span class="string">&#x27;&#x27;</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    commd_str = <span class="built_in">input</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> commd_str != <span class="string">&#x27;-1&#x27;</span>:</span><br><span class="line">        res = test.execute_cmd(commd_str + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(res.get(<span class="string">&#x27;info&#x27;</span>, <span class="string">&#x27;&#x27;</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        commd_str = <span class="built_in">input</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    test.close_connect()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
</search>
