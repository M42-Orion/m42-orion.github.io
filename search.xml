<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hello world</title>
    <url>/m42-orion/2022/04/23/hello-world/</url>
    <content><![CDATA[<h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#FileName: HelloWorld.java  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>   #如果有 <span class="keyword">public</span> 类的话，类名必须和文件同名，注意大小写  </span><br><span class="line">&#123;  </span><br><span class="line">  #Java 入口程序，程序从此入口  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  </span><br><span class="line">  &#123;  </span><br><span class="line">  #向控制台打印一条语句  </span><br><span class="line">    System.out.println(<span class="string">&quot;Hello,World!&quot;</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>                <span class="meta">#main 入口函数  </span></span><br><span class="line">&#123;  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello,World!&quot;</span>); <span class="meta">#printf 函数打印  </span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;               #函数返回值  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>               <span class="comment">//std::cout 要用到的头文件  </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>                <span class="comment">//标准输入输出头文件  </span></span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello,World!--Way 1\n&quot;</span>);    <span class="comment">//printf 语句打印  </span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Hello,World!--Way 2&quot;</span>);        <span class="comment">//puts 语句  </span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Hello,&quot;</span> <span class="string">&quot; &quot;</span> <span class="string">&quot;World!--Way 3&quot;</span>); <span class="comment">//字符串拼接  </span></span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;Hello,World!--Way 4&quot;</span> &lt;&lt; std::endl; <span class="comment">//C++ 教科书上写法  </span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;                                        <span class="comment">//作为注释  </span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello,World!&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;  </span><br><span class="line">&lt;body&gt;  </span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Hello,World!&quot;</span>;            <span class="comment">//打印语句  </span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;The first php program!&quot;</span>;  <span class="comment">//打印语句  </span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">phpinfo</span>();                 <span class="comment">//phpinfo()系统函数,输出环境信息  </span></span><br><span class="line"><span class="meta">?&gt;</span>  </span><br><span class="line">&lt;/body&gt;  </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sys.<span class="title function_">puts</span>(<span class="string">&quot;Hello,World!&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;Hello,World!&#x27;</span> <span class="keyword">from</span> dual;  </span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is the first program!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello,World!<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python代码片段(vscode)</title>
    <url>/m42-orion/2022/04/23/python%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5-vscode/</url>
    <content><![CDATA[<p>在最新的vscode的python插件更新后，不提供代码片段的功能，因此要自己手添加用户代码片段。使用方法如下：</p>
<ul>
<li>复制下方给出的代码片段</li>
<li>打开vscode</li>
<li>左下角设置-&gt;用户代码片段-&gt;python.json</li>
<li>全部删掉后替换成刚刚复制的内容</li>
</ul>
<p>再次使用后vscode提供代码片段联想功能,输入部分代码后可提供多种代码格式,如下图：<br><img src="https://liu__tao.gitee.io/drawing-bed/blog_img/python%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5(vscode)/1.png" alt="1"><br><img src="https://liu__tao.gitee.io/drawing-bed/blog_img/python%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5(vscode)/2.png" alt="2"></p>
<p>可根据代码片段书写格式自定义代码片段。<br>代码片段如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="comment">// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and </span></span><br><span class="line">	<span class="comment">// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</span></span><br><span class="line">	<span class="comment">// $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. Placeholders with the </span></span><br><span class="line">	<span class="comment">// same ids are connected.</span></span><br><span class="line">	<span class="comment">// Example:</span></span><br><span class="line">	<span class="comment">// &quot;Print to console&quot;: &#123;</span></span><br><span class="line">	<span class="comment">// 	&quot;prefix&quot;: &quot;log&quot;,</span></span><br><span class="line">	<span class="comment">// 	&quot;body&quot;: [</span></span><br><span class="line">	<span class="comment">// 		&quot;console.log(&#x27;$1&#x27;);&quot;,</span></span><br><span class="line">	<span class="comment">// 		&quot;$2&quot;</span></span><br><span class="line">	<span class="comment">// 	],</span></span><br><span class="line">	<span class="comment">// 	&quot;description&quot;: &quot;Log output to console&quot;</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line">	<span class="attr">&quot;HEADER&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HEADER&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;#!/usr/bin/env python&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;# -*- encoding: utf-8 -*-&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&#x27;&#x27;&#x27;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;@文件    :$TM_FILENAME&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;@说明    :&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;@时间    :$CURRENT_YEAR/$CURRENT_MONTH/$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;@作者    :ljw&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;@版本    :1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&#x27;&#x27;&#x27;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;$0&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;if&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;if&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;if $&#123;1:expression&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;2:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for an if statement&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;if/else&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;if/else&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;if $&#123;1:condition&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;2:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;else:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for an if statement with else&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;elif&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;elif&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;elif $&#123;1:expression&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;2:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for an elif&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;else&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;else&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;else:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;1:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for an else&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;while&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;while&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;while $&#123;1:expression&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;2:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a while loop&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;while/else&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;while/else&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;while $&#123;1:expression&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;2:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;else:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a while loop with else&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;for&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;for&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;for $&#123;1:target_list&#125; in $&#123;2:expression_list&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a for loop&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;for/else&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;for/else&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;for $&#123;1:target_list&#125; in $&#123;2:expression_list&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;else:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;4:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a for loop with else&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;try/except&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;try/except&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;try:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;1:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;except $&#123;2:expression&#125; as $&#123;3:identifier&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;4:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a try/except statement&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;try/finally&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;try/finally&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;try:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;1:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;finally:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;2:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a try/finally statement&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;try/except/else&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;try/except/else&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;try:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;1:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;except $&#123;2:expression&#125; as $&#123;3:identifier&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;4:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;else:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;5:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a try/except/else statement&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;try/except/finally&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;try/except/finally&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;try:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;1:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;except $&#123;2:expression&#125; as $&#123;3:identifier&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;4:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;finally:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;5:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a try/except/finally statement&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;try/except/else/finally&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;try/except/else/finally&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;try:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;1:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;except $&#123;2:expression&#125; as $&#123;3:identifier&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;4:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;else:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;5:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;finally:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;6:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a try/except/else/finally statement&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;with&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;with&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;with $&#123;1:expression&#125; as $&#123;2:target&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a with statement&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;def&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;def&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;def $&#123;1:funcname&#125;($&#123;2:parameter_list&#125;):&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t\&quot;\&quot;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:docstring&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t\&quot;\&quot;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;4:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a function definition&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;def(class method)&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;def(class method)&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;def $&#123;1:funcname&#125;(self, $&#123;2:parameter_list&#125;):&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t\&quot;\&quot;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:docstring&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t\&quot;\&quot;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;4:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a class method&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;def(static class method)&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;def(static class method)&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;@staticmethod&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;def $&#123;1:funcname&#125;($&#123;2:parameter_list&#125;):&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t\&quot;\&quot;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:docstring&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t\&quot;\&quot;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;4:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a static class method&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;def(abstract class method)&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;def(abstract class method)&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;def $&#123;1:funcname&#125;(self, $&#123;2:parameter_list&#125;):&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t\&quot;\&quot;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:docstring&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t\&quot;\&quot;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\traise NotImplementedError&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for an abstract class method&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;class&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;class $&#123;1:classname&#125;($&#123;2:object&#125;):&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t\&quot;\&quot;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:docstring&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t\&quot;\&quot;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;4:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a class definition&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;lambda&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lambda&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;lambda $&#123;1:parameter_list&#125;: $&#123;2:expression&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a lambda statement&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;if(main)&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;__main__&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;if __name__ == \&quot;__main__\&quot;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;    $&#123;1:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a `if __name__ == \&quot;__main__\&quot;: ...` block&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;async/def&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;async/def&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;async def $&#123;1:funcname&#125;($&#123;2:parameter_list&#125;):&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for an async statement&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;async/for&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;async/for&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;async for $&#123;1:target&#125; in $&#123;2:iter&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:block&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for an async for statement&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;async/for/else&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;async/for/else&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;async for $&#123;1:target&#125; in $&#123;2:iter&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:block&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;else:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;4:block&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for an async for statement with else&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;async/with&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;async/with&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;async with $&#123;1:expr&#125; as $&#123;2:var&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:block&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for an async with statement&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;ipdb&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ipdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;import ipdb; ipdb.set_trace()&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for ipdb debug&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;pdb&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;import pdb; pdb.set_trace()&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for pdb debug&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;pudb&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pudb&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;import pudb; pudb.set_trace()&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for pudb debug&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;add/new/cell&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;add/new/cell&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;# %%&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet to add a new cell&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;mark/markdown&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mark/markdown&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;# %% [markdown]&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet to add a new markdown cell&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>python之__init__.py</title>
    <url>/m42-orion/2022/04/28/python%E4%B9%8B-init-py/</url>
    <content><![CDATA[<h2 id="神奇的-init"><a href="#神奇的-init" class="headerlink" title="神奇的__init__"></a>神奇的__init__</h2><p>__init__一般在两种情况下会出现，第一种是以在class（类）当中以函数形式出现，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br></pre></td></tr></table></figure>

<p>第二种情况则是以__init__.py文件的形式出现在文件夹下。两种不同的情况虽然使用了相同名字的定义，但是其作用可以说类似又可以说不同。</p>
<h2 id="def-init-self"><a href="#def-init-self" class="headerlink" title="def __init__(self)"></a><code>def __init__(self)</code></h2><p>__init__属于魔法函数的一种,之所以说是一种其原因是因为魔法函数是一个大家族，常见的：<code>__ str__()、__ new__()、__ unicode__()、__ call__()、__ len__()、__repr__()</code>等等都是魔法函数，</p>
<h3 id="什么是魔法函数？"><a href="#什么是魔法函数？" class="headerlink" title="什么是魔法函数？"></a>什么是魔法函数？</h3><p>魔法函数一种python的高级用法，一般情况下不是很常见，魔法函数允许使用者在定义类的时候将其绑定在其中，一般格式以两个下划线开始并以两个下划线结束。以<code>__init__</code>为例，该函数允许在实例化类的时候给变量申请内存空间并赋予初始值，有时候我们会将其称之为构造函数。</p>
<p>魔法函数具有以下特点：  </p>
<ul>
<li>Python中以双下划线(<strong>xx</strong>)开始和结束的函数（不可自己定义）为魔法函数。</li>
<li>调用类实例化的对象的方法时自动调用魔法函数。</li>
<li>在自己定义的类中，可以实现之前的内置函数。</li>
</ul>
<h3 id="init-是什么？"><a href="#init-是什么？" class="headerlink" title="__init__是什么？"></a><code>__init__</code>是什么？</h3><p><code>__init__</code>函数存在于class当中，可以包含多个参数，但是必须有一个self作为参数，<code>__init__</code>的存在使得函数在初始化的时候就能够给对象当中的参数进行初始化并赋值，在初始化的时候程序会自动调用该函数，于此同事，如果设置了<code>__init__</code>的参数，在实例化的时候如果不给定参数也是错误的。当然，<code>__init__</code>也是作为类的私有函数存在，所以在实例化之后是无法被外部调用的。</p>
<h2 id="init-py"><a href="#init-py" class="headerlink" title="__init__.py"></a><code>__init__.py</code></h2><p><code>__init__</code>函数可以当中构造函数来理解，但是<code>__init__.py</code>却不是那么容易理解。</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>常见的说法会将其描述成为：<code>__init__.py</code> 文件的作用是将文件夹变为一个Python模块,Python 中的每个模块的包中，都有<code>__init__.py</code> 文件。  </p>
<hr>
<p>但是直接跳到python模块上来，这样的理解未免太过于快了，以至于很多人不能够理解。因此我打算在这里只说用法方便于理解。</p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>假设现在有这样一个目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">│</span><br><span class="line">├─model</span><br><span class="line">│      info.py   </span><br><span class="line">│</span><br><span class="line">test.py</span><br></pre></td></tr></table></figure>

<p>现在model.py文件当中的代码是这样的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">param</span>):</span><br><span class="line">    <span class="keyword">return</span> param</span><br></pre></td></tr></table></figure>

<p>那么问题来了，我们该怎么去调用model.py文件当中的变量？  </p>
<hr>
<p>以前的方法是<code>from model.model import * </code>,但是如果，下面不止这一个文件呢？万一这个目录下有很多个文件呢？我们再去一个个去调用，未免太过于难受了。<br>但是如果我们在model目录下添加一个<code>__init__.py</code>文件，在文件当中写入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .info <span class="keyword">import</span> test</span><br><span class="line"></span><br><span class="line">test = test</span><br></pre></td></tr></table></figure>

<p>然后在<code>test.py</code>文件当中写入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> model</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(model.test(<span class="string">&#x27;a&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>这样就能够直接调用了。发现端倪了吗？这里我们使用的就是<code>import model</code>,没有指定那一个文件啊，按照一般的想法不应该是<code>import model.__init__</code>吗？<br>这就是所谓的将文件夹变成一个模块的含义，<code>__init__.py</code>文件的存在能够管理该文件夹下面的所有文件，并且通过<code>__init__.py</code>文件导入的形式，在调用文件夹的时候自动调用<code>__init__.py</code>文件下管理文件当中的对象。但是这样的做法有什么含义？用处在于什么？用其他文件不能实现吗？</p>
<hr>
<p>首先，这样能够更加有效的管理文件夹下面的文件，对于使用者来说能够将文件夹当作一个封闭的包使用，不用担心导入存在的路径问题，在封装跟打包的时候也能够保证调用的可靠性。当然其他随便写个文件也能够实现类似的功能，但是使用起来完全没有<code>__init__.py</code>文件方便，并且可能存在未知的导入出错问题。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode离线远程开发配置</title>
    <url>/m42-orion/2022/04/25/vscode%E7%A6%BB%E7%BA%BF%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>由于各种原因，在开发过程当中需要做到网络的物理隔绝，因此离线部署环境或者部署开发工具就成为了面临的重大难题，尤其是当需要配置vscode离线远程开发的时候。当然使用pycharm可能不需要这么麻烦，但是个人习惯导致自己觉得vscode更加顺手，同时也更加美观，在后续的vscode更新当中丰富的插件也让我难以割舍，因此配置离线环境下vscode的远程安装就成了一大难题。  </p>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="下载VScode"><a href="#下载VScode" class="headerlink" title="下载VScode"></a>下载VScode</h3><p>首先在Vscode官网：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a> 点击下载；在浏览器或者下载软件中就可以看到一个下载地址如下图所示，由于国内下载速度非常缓慢，可以将图中红框内的链接部分：az764295.vo.msecnd.net替换为国内镜像：vscode.cdn.azure.cn来提升下载速度。</p>
<h3 id="插件下载与安装"><a href="#插件下载与安装" class="headerlink" title="插件下载与安装"></a>插件下载与安装</h3><p>在插件商店搜索插件，直接点击这里就能跳转到插件的页面上去，页面上提供离线包的下载，直接下载就行。<br><img src="https://liu__tao.gitee.io/drawing-bed/blog_img/vscode%E7%A6%BB%E7%BA%BF%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE/%E7%82%B9%E5%87%BB.png" alt="点击"></p>
<blockquote>
<p><strong>注意：</strong>插件伴随着vscode版本的更新而更新，因此需要注意版本的对应关系。</p>
</blockquote>
<h3 id="插件的离线安装"><a href="#插件的离线安装" class="headerlink" title="插件的离线安装"></a>插件的离线安装</h3><p>离线安装如下，选中安装包即可<br><img src="https://liu__tao.gitee.io/drawing-bed/blog_img/vscode%E7%A6%BB%E7%BA%BF%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE/%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85.png" alt="离线安装"></p>
<h3 id="配置远程开发环境"><a href="#配置远程开发环境" class="headerlink" title="配置远程开发环境"></a>配置远程开发环境</h3><p>在离线状态下，除了需要下载<code>remote-ssh</code>跟<code>Remote - SSH: Editing Configuration Files</code>两个插件以外，还需要下载远程包。即所需依赖包vscode-server-linux-x64.tar.gz，下载链接为：<br><a href="https://update.code.visualstudio.com/commit:[id]/server-linux-x64/stable">https://update.code.visualstudio.com/commit:[id]/server-linux-x64/stable</a><br>其中[id]用所使用的vscode commit ID进行替换，id在帮助-&gt;关于-&gt;提交，则完整下载链接应为如下案例：<br><a href="https://update.code.visualstudio.com/commit:507ce72a4466fbb27b715c3722558bb15afa9f48/server-linux-x64/stable">https://update.code.visualstudio.com/commit:507ce72a4466fbb27b715c3722558bb15afa9f48/server-linux-x64/stable</a></p>
<h3 id="远程配置"><a href="#远程配置" class="headerlink" title="远程配置"></a>远程配置</h3><ul>
<li><p>将下载好的依赖包复制到远程linux服务器用户目录下；</p>
</li>
<li><p>登录linux服务器，在用户目录下执行以下命令：</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> .vscode-server</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> .vscode-server</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">mv</span> ~/vscode-server-linux-x64.tar.gz bin/</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> bin</span><br><span class="line"></span><br><span class="line">tar -zxvf vscode-server-linux-x64.tar</span><br><span class="line"></span><br><span class="line"><span class="built_in">mv</span> vscode-server-linux-x64 [<span class="built_in">id</span>] （注：[<span class="built_in">id</span>]为自己vscode的commit ID。）</span><br></pre></td></tr></table></figure>

<h2 id="收尾"><a href="#收尾" class="headerlink" title="收尾"></a>收尾</h2><p>如此配置完之后就能够正常连接远程服务器了。过程当中需要注意以下几个点：</p>
<ul>
<li>目录文件不要通过尝试连接的方式去生成，要自己创建</li>
<li>如果始终连不上思考是否是<code>vscode-server-linux-x64.tar.gz</code>的id版本不同</li>
<li>连接过程当中注意用户与端口的对应关系</li>
<li>连接成功之后远程上是没有插件的，需要上传插件到服务器进程远程安装</li>
</ul>
]]></content>
      <categories>
        <category>琐事</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>python数据校验</title>
    <url>/m42-orion/2022/04/24/python%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C/</url>
    <content><![CDATA[<h2 id="什么是数据校验？"><a href="#什么是数据校验？" class="headerlink" title="什么是数据校验？"></a>什么是数据校验？</h2><p>在实际的开发过程当中，我们往往会面临很多需要数据对接的情况，这时候一个函数可能需要处理一个或者多个数据参数，也就是说函数的参数面临着多且不确定性，参数本身不确定性还伴随着在传递过程当中是否符合规范的问题。以python函数为例，以下是随意写法和标准写法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 随意</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">max</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">if</span> a&gt;b:</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">elif</span> a&lt;b:</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建议的标准写法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">max</span>(<span class="params">a:<span class="built_in">int</span>=<span class="number">0</span>,</span></span><br><span class="line"><span class="params">        b:<span class="built_in">int</span>=<span class="number">0</span></span>)-&gt;<span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    这里描述函数的功能</span></span><br><span class="line"><span class="string">    :param a: 参数描述</span></span><br><span class="line"><span class="string">    :param b: 参数描述</span></span><br><span class="line"><span class="string">    :returns: 返回描述</span></span><br><span class="line"><span class="string">    :raises keyError: 可能的错误捕获描述</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> a&gt;b:</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">elif</span> a&lt;b:</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>除此之外还有<code>def exmaple2(required_arg, *arg, **kwarg):</code>这样的写法，这些写法都是在极力是的python的函数与参数信息更加明确，让调用函数的时候能够清楚的知道函数的作用。<br>由于需求的复杂逐步增加，因此数据接口从原先的单纯的写法升级为固定规则，需要一些额外的协助手段才能够帮助使用者规范接口，<code>pydantic</code>库的出现极大程度的解决了这些问题。</p>
<h2 id="pydantic库的基础"><a href="#pydantic库的基础" class="headerlink" title="pydantic库的基础"></a>pydantic库的基础</h2><h3 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h3><h4 id="schema基本定义方法"><a href="#schema基本定义方法" class="headerlink" title="schema基本定义方法"></a>schema基本定义方法</h4><p>pydantic库的数据定义方式是通过BaseModel类来进行定义的，所有基于pydantic的数据类型本质上都是一个BaseModel类，它最基本的使用方式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name: <span class="built_in">str</span></span><br></pre></td></tr></table></figure>

<h4 id="基本的schema实例化方法"><a href="#基本的schema实例化方法" class="headerlink" title="基本的schema实例化方法"></a>基本的schema实例化方法</h4><p>调用时，我们只需要对其进行实例化即可，实例化方法有以下几种：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#直接传值</span></span><br><span class="line">p = Person(name=<span class="string">&quot;Tom&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(p.json()) <span class="comment"># &#123;&quot;name&quot;: &quot;Tom&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过字典传入</span></span><br><span class="line">p = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Tom&quot;</span>&#125;</span><br><span class="line">p = Person(**p)</span><br><span class="line"><span class="built_in">print</span>(p.json()) <span class="comment"># &#123;&quot;name&quot;: &quot;Tom&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过其他的实例化对象传入</span></span><br><span class="line">p2 = Person.copy(p)</span><br><span class="line"><span class="built_in">print</span>(p2.json()) <span class="comment"># &#123;&quot;name&quot;: &quot;Tom&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<p>当传入值错误的时候，pydantic就会抛出报错，例如：<code>Person(person=&quot;Tom&quot;)</code> ;pydantic会抛出异常;另一方面，如果传入值多于定义值时，BaseModel也会自动对其进行过滤。如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = Person(name=<span class="string">&quot;Tom&quot;</span>, gender=<span class="string">&quot;man&quot;</span>, age=<span class="number">24</span>)</span><br><span class="line"><span class="built_in">print</span>(p.json()) <span class="comment"># &#123;&quot;name&quot;: &quot;Tom&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<p>可以看到，额外的参数gender与age都被自动过滤了。通过这种方式，数据的传递将会更为安全，但是，同样的，这也要求我们在前期的schema定义中必须要尽可能地定义完全。此外，pydantic在数据传输时会直接进行数据类型转换，因此，如果数据传输格式错误，但是可以通过转换变换为正确的数据类型是，数据传输也可以成功，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = Person(name=<span class="number">123</span>)</span><br><span class="line"><span class="built_in">print</span>(p.json()) <span class="comment"># &#123;&quot;name&quot;: &quot;123&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="pydantic基本数据类型"><a href="#pydantic基本数据类型" class="headerlink" title="pydantic基本数据类型"></a>pydantic基本数据类型</h4><p>下面，我们来看一下pydantic中的一些常用的基本类型。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Dict</span>, <span class="type">List</span>, <span class="type">Sequence</span>, <span class="type">Set</span>, <span class="type">Tuple</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    a: <span class="built_in">int</span> <span class="comment"># 整型</span></span><br><span class="line">    b: <span class="built_in">float</span> <span class="comment"># 浮点型</span></span><br><span class="line">    c: <span class="built_in">str</span> <span class="comment"># 字符串</span></span><br><span class="line">    d: <span class="built_in">bool</span> <span class="comment"># 布尔型</span></span><br><span class="line">    e: <span class="type">List</span>[<span class="built_in">int</span>] <span class="comment"># 整型列表</span></span><br><span class="line">    f: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">int</span>] <span class="comment"># 字典型，key为str，value为int</span></span><br><span class="line">    g: <span class="type">Set</span>[<span class="built_in">int</span>] <span class="comment"># 集合</span></span><br><span class="line">    h: <span class="type">Tuple</span>[<span class="built_in">str</span>, <span class="built_in">int</span>] <span class="comment"># 元组</span></span><br></pre></td></tr></table></figure>

<p>以上都是基础的使用，在实际使用过程当中，可以参考官方文档，会给出更加详细的写法。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>数据校验常常使用在需要被绑定在一起的复杂数据之上，也用于数据传递的校验，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span>  <span class="comment"># 无默认值，必填字段</span></span><br><span class="line">    name = <span class="string">&#x27;John Doe&#x27;</span>  <span class="comment"># 有默认值，选填字段</span></span><br><span class="line">    signup_ts: <span class="type">Optional</span>[datetime] = <span class="literal">None</span>  <span class="comment"># 选填字段</span></span><br><span class="line">    friends: <span class="type">List</span>[<span class="built_in">int</span>] = []  <span class="comment"># 列表中的元素是int类型或者是可以转换成int类型的其他类型</span></span><br><span class="line"></span><br><span class="line">error_data = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;a123&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;signup_ts&#x27;</span>: <span class="string">&#x27;2017-06-01 12:22&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;friends&#x27;</span>: [<span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    User(**error_data)</span><br><span class="line"><span class="keyword">except</span> ValidationError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e.json())</span><br></pre></td></tr></table></figure>

<p>这个案例展示了数据在接受错误参数的时候进行的自动校验，这样在数据十分复杂的情况下的时候就能够及时的判定数据是否传输异常而不是去一个个检查数据的状态。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这是一个规范性的问题，不需要太多总结，反而需要足够的代码经验去填补这方面经验的缺失。个人也注意到这个问题，因此写下一篇超短的文章记录一下。<br>最后附上官网地址，只有全英文的：<a href="https://pydantic-docs.helpmanual.io/">https://pydantic-docs.helpmanual.io/</a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>详解post与get</title>
    <url>/m42-orion/2022/04/23/%E8%AF%A6%E8%A7%A3post%E4%B8%8Eget/</url>
    <content><![CDATA[<h2 id="POST和GET"><a href="#POST和GET" class="headerlink" title="POST和GET"></a>POST和GET</h2><p>网络请求有OPTIONS、HEAD、GET、POST、PUT、DELETE、TRACE、CONNECT这常见的几种方式，其中最常见也就是post与get方法，在开发过程当中常常会遇到一个问题，这个接口到底是使用post请求好一点还是使用get请求好一点？两者到底有什么区别？这篇文章就将给出对应的解释。</p>
<h2 id="对post与get区别的错误理解"><a href="#对post与get区别的错误理解" class="headerlink" title="对post与get区别的错误理解"></a>对post与get区别的错误理解</h2><h3 id="get安全性非常低，post安全性较高"><a href="#get安全性非常低，post安全性较高" class="headerlink" title="get安全性非常低，post安全性较高"></a>get安全性非常低，post安全性较高</h3><p>一般来说，在对新手上手的时候会跟他说这样的话，并说get是能够明文看见的，但是post不行…这个说法是有一定道理的，对于完全不知道情况的普通用户来说，安全一点确实有道理，因为从浏览器的地址上确实看不到post请求的参数，url链接也变短了，但是不代表数据被完全隐藏，实际上通过简单的开发者工具抓包就能够看到明文数据。因此某些极小的点上可以说安全，但是实际上可能并不安全。 </p>
<h3 id="get传送的数据量较小，不能大于2KB。post传送的数据量较大，一般被默认为不受限制。"><a href="#get传送的数据量较小，不能大于2KB。post传送的数据量较大，一般被默认为不受限制。" class="headerlink" title="get传送的数据量较小，不能大于2KB。post传送的数据量较大，一般被默认为不受限制。"></a>get传送的数据量较小，不能大于2KB。post传送的数据量较大，一般被默认为不受限制。</h3><p>这个说法其实是指当我们使用get请求的时候，参数会直接被显示在url当中如：<code>https://www.duitang.com/blog/?id=1121578266</code>。这里的参数id尚且为int，如果为中文需要url编码，以至于链接会非常的长，这个长度是有限制的，这个限制却不是get方法的限制，之所以限制是浏览器跟服务器的限制，两者为了防止链接太长导致解析压力过大影响用户体验，所以才加以限制。相对的post确实不用在意大小，因为参数传输方式不同导致解析压力并不大。</p>
<h2 id="get和post的区别"><a href="#get和post的区别" class="headerlink" title="get和post的区别"></a>get和post的区别</h2><h3 id="get获取数据，post提交数据。"><a href="#get获取数据，post提交数据。" class="headerlink" title="get获取数据，post提交数据。"></a>get获取数据，post提交数据。</h3><p>这是从语义上进行的理解，即get与post的中文翻译，其实HTTP的八种方法都能够携带参数，服务器拿到参数之后想做什么完全由服务器决定而非由请求方法决定，但是在设计之初就给出建议让get承担获取数据，让post承担提交数据的功能。</p>
<p>注：HTTP请求，最初设定了八种方法。这八种方法本质上没有任何区别。只是让请求，更加有语义而已。</p>
<ul>
<li><strong>OPTIONS</strong> 返回服务器所支持的请求方法</li>
<li><strong>GET</strong> 向服务器获取指定资源</li>
<li><strong>HEAD</strong> 与GET一致，只不过响应体不返回，只返回响应头</li>
<li><strong>POST</strong> 向服务器提交数据，数据放在请求体里</li>
<li><strong>PUT</strong> 与POST相似，只是具有幂等特性，一般用于更新</li>
<li><strong>DELETE</strong> 删除服务器指定资源</li>
<li><strong>TRACE</strong> 回显服务器端收到的请求，测试的时候会用到这个</li>
<li><strong>CONNECT</strong> 预留，暂无使用</li>
</ul>
<h3 id="数据传输编码不同"><a href="#数据传输编码不同" class="headerlink" title="数据传输编码不同"></a>数据传输编码不同</h3><p>Get限制Form表单的数据集的值必须为ASCII字符，因此当出现不属于ASCII编码的字符在get请求当中的时候，必须对链接进行编码，常见的如果链接当中出现空格，链接上会把空格编码成%20，不信可以粘贴以下链接到浏览器，看看链接发生的变化： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://www.baidu.com/s?wd=hello world</span><br><span class="line"><span class="comment"># 以下是浏览器编码后的结果</span></span><br><span class="line">https://www.baidu.com/s?wd=hello%20world</span><br></pre></td></tr></table></figure>

<p>Post相比get支持整个ISO10646字符集,能够有更多的数据格式的兼容，因此使用起来会更加的方便，但是测试起来可能不是很方便。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>Get执行效率却比Post方法好。</li>
<li>Get是form提交的默认方法。</li>
<li>GET在浏览器回退时是无害的，而POST会再次提交请求。 </li>
<li>历史记录不能够保存post的参数，却能够保存get的请求参数。</li>
<li>POST用于修改服务器上的数据，有副作用，非幂等。</li>
</ul>
<h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><p>代码采用fastpai进行演示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_root</span>():</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;Hello&quot;</span>: <span class="string">&quot;World&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>(<span class="title class_ inherited__">BaseModel</span>):  <span class="comment"># 继承了BaseModel，定义了People的数据格式</span></span><br><span class="line">    name: <span class="built_in">str</span> = <span class="literal">None</span>  <span class="comment"># 默认了name的值为None</span></span><br><span class="line">    age: <span class="built_in">int</span> = <span class="number">18</span>  <span class="comment"># 默认了age为18</span></span><br><span class="line">    sex: <span class="built_in">str</span> = <span class="string">&quot;renyao&quot;</span>  <span class="comment"># 默认了sex为renyao</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/fastapi/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">postdate</span>(<span class="params">people: People</span>):  <span class="comment"># 传入一个People类型的参数people</span></span><br><span class="line">    <span class="keyword">return</span> people</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    uvicorn.run(<span class="string">&quot;test:app&quot;</span>, host=<span class="string">&quot;localhost&quot;</span>, port=<span class="number">5000</span>, log_level=<span class="string">&quot;info&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>可以postget在设计上的确具有很多差异，但是实际使用的时候两者都能够满足传参的需求，但是为了标准，尽可能的使用get用于获取数据，用post提交数据。百度搜索采用的就是get获取数据，而几乎所有的账户登录都是post用于提交数据。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>协议</tag>
      </tags>
  </entry>
  <entry>
    <title>装饰器</title>
    <url>/m42-orion/2022/04/29/%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython.core.interactiveshell <span class="keyword">import</span> InteractiveShell</span><br><span class="line">InteractiveShell.ast_node_interactivity = <span class="string">&#x27;all&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="装饰器-Decorators"><a href="#装饰器-Decorators" class="headerlink" title="装饰器(Decorators)"></a>装饰器(Decorators)</h2><p>装饰器(Decorators)是 Python 的一个重要部分。简单地说：他们是修改其他函数的功能的函数。他们有助于让我们的代码更简短，也更Pythonic（Python范儿）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hi</span>(<span class="params">name=<span class="string">&quot; world&quot;</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span> + name</span><br><span class="line">hi()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 我们甚至可以将一个函数赋值给一个变量，比如</span></span><br><span class="line">greet = hi</span><br><span class="line"><span class="comment"># 我们这里没有在使用小括号，因为并不是在调用hi函数</span></span><br><span class="line"><span class="comment"># 而是在将它放在greet变量里头。尝试运行下这个</span></span><br><span class="line">greet()</span><br><span class="line"><span class="comment"># 如果删掉旧的hi函数</span></span><br><span class="line"><span class="keyword">del</span> hi</span><br><span class="line"><span class="comment"># hi() # 报错</span></span><br><span class="line"> </span><br><span class="line">greet()</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="在函数中定义函数"><a href="#在函数中定义函数" class="headerlink" title="在函数中定义函数"></a>在函数中定义函数</h2><p>刚才那些就是函数的基本知识了。我们来让你的知识更进一步。在 Python 中我们可以在一个函数中定义另一个函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">testfunction</span>(<span class="params">parameter=<span class="string">&quot;info&quot;</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;现在会调用里层函数&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">greet</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;greet函数被调用&quot;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">welcome</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;welcome函数被调用&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gentleman</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;gentleman函数被调用&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(greet())</span><br><span class="line">    <span class="built_in">print</span>(welcome())</span><br><span class="line">    gentleman()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;函数调用结束&quot;</span>)</span><br><span class="line"> </span><br><span class="line">testfunction()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 上面展示了无论何时调用hi(), greet()和welcome()将会同时被调用。</span></span><br><span class="line"><span class="comment"># 然后greet()和welcome()函数在hi()函数之外是不能访问的，比如：</span></span><br><span class="line"><span class="comment"># welcome()</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">现在会调用里层函数</span><br><span class="line">greet函数被调用</span><br><span class="line">welcome函数被调用</span><br><span class="line">gentleman函数被调用</span><br><span class="line">函数调用结束</span><br></pre></td></tr></table></figure>

<p>可以在函数中定义另外的函数。也就是说可以创建嵌套的函数。现在需要再多学一点，就是函数也能返回函数。</p>
<h2 id="从函数中返回函数"><a href="#从函数中返回函数" class="headerlink" title="从函数中返回函数"></a>从函数中返回函数</h2><p>其实并不需要在一个函数里去执行另一个函数，我们也可以将其作为输出返回出来：  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">testfunction</span>(<span class="params">parameter=<span class="string">&quot;info&quot;</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">greet</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;greet函数被调用&quot;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">welcome</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;welcome函数被调用&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> parameter == <span class="string">&quot;info&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> greet</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> welcome</span><br><span class="line"></span><br><span class="line">a = testfunction()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment">#outputs: &lt;function greet at 0x7f2143c01500&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#上面清晰地展示了`a`现在指向到hi()函数中的greet()函数</span></span><br><span class="line"><span class="comment">#现在试试这个</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a())</span><br><span class="line">testfunction()()</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">function</span> testfunction.&lt;locals&gt;.greet at 0x7f9e00638f28&gt;</span><br><span class="line">greet函数被调用</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;greet函数被调用&#x27;</span></span><br></pre></td></tr></table></figure>

<p>再次看看这个代码。在if/else语句中返回greet和welcome，而不是greet()和welcome()。<br>当把一对小括号放在后面，这个函数就会执行；然而如果不放括号在它后面，那它可以被到处传递，并且可以赋值给别的变量而不去执行它。<br>再稍微多解释点细节:<br>当我们写下a = testfunction()，testfunction()会被执行，而由于name参数默认是info，所以函数greet被返回了。如果我们把语句改为a = testfunction(name = “Alice”)，那么welcome函数将被返回。<br>我们还可以打印出testfunction()()，这会输出greet函数被调用。</p>
<h2 id="将函数作为参数传给另一个函数"><a href="#将函数作为参数传给另一个函数" class="headerlink" title="将函数作为参数传给另一个函数"></a>将函数作为参数传给另一个函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">testfunction</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Do_Something_Before_testfunction</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am doing some boring work before executing hi()&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(func())</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Do_Something_Before_testfunction(testfunction)</span><br><span class="line">I am doing some boring work before executing hi()</span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure>

<p>现在已经具备所有必需知识来学习装饰器是什么了,装饰器让你在一个函数的前后去执行代码。</p>
<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">function1</span>(<span class="params">a_func</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapTheFunction</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;在执行a_func()之前我正在做一些无聊的工作&quot;</span>)</span><br><span class="line"></span><br><span class="line">        a_func()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;在执行a_func()之后我正在做一些无聊的工作&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapTheFunction</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">function2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;函数2的输出&quot;</span>)</span><br><span class="line"></span><br><span class="line">function2()</span><br><span class="line"><span class="comment">#outputs: &quot;I am the function which needs some decoration to remove my foul smell&quot;</span></span><br><span class="line"></span><br><span class="line">function2 = function1(function2)</span><br><span class="line"><span class="comment">#现在function2被function1包装了</span></span><br><span class="line"></span><br><span class="line">function2()</span><br><span class="line"><span class="comment">#outputs:I am doing some boring work before executing a_func()</span></span><br><span class="line"><span class="comment">#        I am the function which needs some decoration to remove my foul smell</span></span><br><span class="line"><span class="comment">#        I am doing some boring work after executing a_func()</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">函数2的输出</span><br><span class="line">在执行a_func()之前我正在做一些无聊的工作</span><br><span class="line">函数2的输出</span><br><span class="line">在执行a_func()之后我正在做一些无聊的工作</span><br><span class="line">刚刚应用了之前学习到的原理。这正是python中装饰器做的事情！它封装一个函数，并且用这样或者那样的方式来修改它的行为。</span><br><span class="line">现在也许疑惑，在代码里并没有使用@符号？只是一个简短的方式来生成一个被装饰的函数。这里是我们如何使用@来运行之前的代码：</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@function1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a_function_requiring_decoration</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Hey you! Decorate me!&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am the function which needs some decoration to &quot;</span></span><br><span class="line">          <span class="string">&quot;remove my foul smell&quot;</span>)</span><br><span class="line"></span><br><span class="line">a_function_requiring_decoration()</span><br><span class="line"><span class="comment">#outputs: I am doing some boring work before executing a_func()</span></span><br><span class="line"><span class="comment">#         I am the function which needs some decoration to remove my foul smell</span></span><br><span class="line"><span class="comment">#         I am doing some boring work after executing a_func()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#@a_new_decorator就是下面这种方式的简写:</span></span><br><span class="line">a_function_requiring_decoration = function1(a_function_requiring_decoration)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">在执行a_func()之前我正在做一些无聊的工作</span><br><span class="line">I am the <span class="keyword">function</span> <span class="built_in">which</span> needs some decoration to remove my foul smell</span><br><span class="line">在执行a_func()之后我正在做一些无聊的工作</span><br></pre></td></tr></table></figure>

<p>希望现在对Python装饰器的工作原理有一个基本的理解。如果运行如下代码会存在一个问题：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(a_function_requiring_decoration.__name__)</span><br><span class="line"><span class="comment"># Output: wrapTheFunction</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wrapTheFunction</span><br></pre></td></tr></table></figure>

<p>这并不是想要的！Ouput输出应该是a_function_requiring_decoration。这里的函数被warpTheFunction替代了。它重写了函数的名字和注释文档(docstring)。幸运的是Python提供给一个简单的函数来解决这个问题，那就是functools.wraps。修改上一个例子来使用functools.wraps：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a_new_decorator</span>(<span class="params">a_func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">a_func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapTheFunction</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am doing some boring work before executing a_func()&quot;</span>)</span><br><span class="line">        a_func()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am doing some boring work after executing a_func()&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapTheFunction</span><br><span class="line"></span><br><span class="line"><span class="meta">@a_new_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a_function_requiring_decoration</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Hey yo! Decorate me!&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am the function which needs some decoration to &quot;</span></span><br><span class="line">          <span class="string">&quot;remove my foul smell&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a_function_requiring_decoration.__name__)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Output: a_function_requiring_decoration</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a_function_requiring_decoration</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decorator_name</span>(<span class="params">f</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">f</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorated</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> can_run:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Function will not run&quot;</span></span><br><span class="line">        <span class="keyword">return</span> f(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> decorated</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator_name</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">return</span>(<span class="string">&quot;Function is running&quot;</span>)</span><br><span class="line"></span><br><span class="line">can_run = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(func())</span><br><span class="line"><span class="comment"># Output: Function is running</span></span><br><span class="line"></span><br><span class="line">can_run = <span class="literal">False</span></span><br><span class="line"><span class="built_in">print</span>(func())</span><br><span class="line"><span class="comment"># Output: Function will not run</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Function is running</span><br><span class="line">Function will not run</span><br></pre></td></tr></table></figure>

<p>注意： @wraps接受一个函数来进行装饰，并加入了复制函数名称、注释文档、参数列表等等的功能。这可以让我们在装饰器里面访问在装饰之前的函数的属性。<br>装饰器在某些地方特别耀眼，使用它可以让一些事情管理起来变得更简单。<br>装饰器可以用于日志管理<br>装饰器可以监控函数运行之前的状态，捕捉函数的运行情况，传入参数等等</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logit</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">with_logging</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(func.__name__ + <span class="string">&quot; was called&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> with_logging</span><br><span class="line"></span><br><span class="line"><span class="meta">@logit</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addition_func</span>(<span class="params">x</span>):</span><br><span class="line">   <span class="string">&quot;&quot;&quot;Do some math.&quot;&quot;&quot;</span></span><br><span class="line">   <span class="keyword">return</span> x + x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = addition_func(<span class="number">4</span>)</span><br><span class="line"><span class="comment"># Output: addition_func was called</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">addition_func was called</span><br></pre></td></tr></table></figure>

<h2 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h2><p>来想想这个问题，难道@wraps不也是个装饰器吗？<br>但是，它接收一个参数，就像任何普通的函数能做的那样。那么，为什么我们不也那样做呢？<br>这是因为，当使用@my_decorator语法时，是在应用一个以单个函数作为参数的一个包裹函数。记住，Python里每个东西都是一个对象，而且这包括函数！<br>记住了这些，我们可以编写一个能返回一个包裹函数的函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logit</span>(<span class="params">logfile=<span class="string">&#x27;out.log&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">logging_decorator</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">        @wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapped_function</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            log_string = func.__name__ + <span class="string">&quot; was called&quot;</span></span><br><span class="line">            <span class="built_in">print</span>(log_string)</span><br><span class="line">            <span class="comment"># 打开logfile，并写入内容</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(logfile, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> opened_file:</span><br><span class="line">                <span class="comment"># 现在将日志打到指定的logfile</span></span><br><span class="line">                opened_file.write(log_string + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wrapped_function</span><br><span class="line">    <span class="keyword">return</span> logging_decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@logit()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfunc1</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">myfunc1()</span><br><span class="line"><span class="comment"># Output: myfunc1 was called</span></span><br><span class="line"><span class="comment"># 现在一个叫做 out.log 的文件出现了，里面的内容就是上面的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@logit(<span class="params">logfile=<span class="string">&#x27;func2.log&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfunc2</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">myfunc2()</span><br><span class="line"><span class="comment"># Output: myfunc2 was called</span></span><br><span class="line"><span class="comment"># 现在一个叫做 func2.log 的文件出现了，里面的内容就是上面的字符串</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">myfunc1 was called</span><br><span class="line">myfunc2 was called</span><br></pre></td></tr></table></figure>

<h2 id="装饰器类"><a href="#装饰器类" class="headerlink" title="装饰器类"></a>装饰器类</h2><p>现在有了能用于正式环境的logit装饰器，但当应用的某些部分还比较脆弱时，异常也许是需要更紧急关注的事情。比方说有时想打日志到一个文件。而有时想把引起你注意的问题发送到一个email，同时也保留日志，留个记录。这是一个使用继承的场景，但目前为止只看到过用来构建装饰器的函数。<br>幸运的是，类也可以用来构建装饰器。那现在以一个类而不是一个函数的方式，来重新构建logit。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">logit</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, logfile=<span class="string">&#x27;out.log&#x27;</span></span>):</span><br><span class="line">        self.logfile = logfile</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, func</span>):<span class="comment">#类的特殊成员</span></span><br><span class="line"><span class="meta">        @wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapped_function</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            log_string = func.__name__ + <span class="string">&quot; was called&quot;</span></span><br><span class="line">            <span class="built_in">print</span>(log_string)</span><br><span class="line">            <span class="comment"># 打开logfile并写入</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(self.logfile, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> opened_file:</span><br><span class="line">                <span class="comment"># 现在将日志打到指定的文件</span></span><br><span class="line">                opened_file.write(log_string + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="comment"># 现在，发送一个通知</span></span><br><span class="line">            self.notify()</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wrapped_function</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">notify</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># logit只打日志，不做别的</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;打印日志&quot;</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>这个实现有一个附加优势，在于比嵌套函数的方式更加整洁，而且包裹一个函数还是使用跟以前一样的语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@logit()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfunc1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始&quot;</span>)</span><br><span class="line"></span><br><span class="line">myfunc1()</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">myfunc1 was called</span><br><span class="line">打印日志</span><br><span class="line">开始</span><br></pre></td></tr></table></figure>

<p>现在，我们给logit创建子类，来添加新的功能。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">email_logit</span>(<span class="title class_ inherited__">logit</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    一个logit的实现版本，可以在函数调用时发送email给管理员</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, email=<span class="string">&#x27;admin@myproject.com&#x27;</span>, *args, **kwargs</span>):</span><br><span class="line">        self.email = email</span><br><span class="line">        <span class="built_in">super</span>(email_logit, self).__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">notify</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 发送一封email到self.email</span></span><br><span class="line">        <span class="comment"># 这里就不做实现了</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;假设已经发送了邮件&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@email_logit()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfunc1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始&quot;</span>)</span><br><span class="line"></span><br><span class="line">myfunc1()</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">myfunc1 was called</span><br><span class="line">假设已经发送了邮件</span><br><span class="line">开始</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>python之类型提示</title>
    <url>/m42-orion/2022/04/30/python%E4%B9%8B%E7%B1%BB%E5%9E%8B%E6%8F%90%E7%A4%BA/</url>
    <content><![CDATA[<p>Python 3.6+ 版本加入了对”类型提示”的支持。通过声明变量的类型，编辑器和一些工具能给你提供更好的支持。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>当我们在使用python写一段代码的时候，如果遇到下面这种情况：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">funcname</span>(<span class="params">param1,param2</span>):</span><br><span class="line">    <span class="built_in">print</span>(param1.split(<span class="string">&#x27;&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>如果我们想要对函数传递的某些参数进行一些操作的话，在使用一些内置方法的时候，我们通常会依赖python的联想功能，但是在这种情况下，一切都不管用，因为编辑器根本不知道参数是什么类型，所以更不知道可以做什么操作。就像下面这样:</p>
<p><img src="https://liu__tao.gitee.io/drawing-bed/blog_img/python%E4%B9%8B%E7%B1%BB%E5%9E%8B%E6%8F%90%E7%A4%BA/1.png" alt="失败情况"></p>
<p>但是，我们加上类型提示之后，一切都会变得不一样。而所谓的类型提示就是告诉编辑器，这到底是一个什么类型的参数，如下：</p>
<p><img src="https://liu__tao.gitee.io/drawing-bed/blog_img/python%E4%B9%8B%E7%B1%BB%E5%9E%8B%E6%8F%90%E7%A4%BA/2.png" alt="失败情况"></p>
<p>这样我们就能够正确的去实现编辑器的联想功能了。但是….类型提示仅限于此吗？并非如此，类型提示可以帮助我们规范参数类型，自动过滤某些非法参数，防止SQL注入等安全问题。</p>
<h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><h3 id="普通类型"><a href="#普通类型" class="headerlink" title="普通类型"></a>普通类型</h3><p>普通类型即我们常见的类型，如：int、float、bool、bytes这些类型使用方式如上，在函数参数处声明使用。</p>
<h3 id="嵌套类型"><a href="#嵌套类型" class="headerlink" title="嵌套类型"></a>嵌套类型</h3><p>嵌套类型指该类型内部可以包含其他类型，如常见的 dict、list、set 和 tuple等，这些类型的内部可以拥有其他类型，甚至于这些类型可以相互嵌套，如列表于字典的混合嵌套就是非常常见的情况。</p>
<blockquote>
<p>由于嵌套类型在python语言中不能够直接被识别，因此需要导入一个特定的库才可以，即:<code>tying</code></p>
</blockquote>
<p>嵌套类型的使用方式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">funcname</span>(<span class="params">param: <span class="type">List</span>[<span class="built_in">str</span>]</span>):</span><br><span class="line">    <span class="built_in">print</span>(param.append(<span class="string">&#x27;&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>其他嵌套类型以此类推。</p>
<h3 id="以类作为类型提示"><a href="#以类作为类型提示" class="headerlink" title="以类作为类型提示"></a>以类作为类型提示</h3><p>通过上面的案例，我们已将能够实现较多的数据类型提示功能了，但是当遇到一些复杂情况的时候，比如需要复杂的数据校验，或者涉及到需要多层嵌套的情况下，以前的简单数据类型已经完全不能够满足需求了，这个时候就需要类的出现了。</p>
<p>对于使用类来作为类型提示，需要引入一个特别的库即：<code>Pydantic</code>。这个库提供了丰富的类型提示的相关帮助，能够帮助开发者实现数据校验、数据限制、嵌套类型识别、密码安全验证、数据库操作模型等等。由于这是一个庞大的知识，我一时半会也阐述不完整，因此我附上两份文档：</p>
<p><a href="https://pydantic-docs.helpmanual.io/">https://pydantic-docs.helpmanual.io/</a>   </p>
<p><a href="https://blog.csdn.net/swinfans/article/details/89629641">https://blog.csdn.net/swinfans/article/details/89629641</a></p>
<p>同时附上几个从互联网上找到的几个案例：</p>
<p>配合函数使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel, Field</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Item</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    description: <span class="built_in">str</span> = Field(<span class="literal">None</span>, title=<span class="string">&quot;The description of the item&quot;</span>, max_length=<span class="number">300</span>)</span><br><span class="line">    price: <span class="built_in">float</span> = Field(..., gt=<span class="number">0</span>, description=<span class="string">&quot;The price must be greater than zero&quot;</span>)</span><br><span class="line">    tax: <span class="built_in">float</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">update_item</span>(<span class="params">item_id: <span class="built_in">int</span>, item: Item = Body(<span class="params">..., embed=<span class="literal">True</span></span>)</span>):</span><br><span class="line">    results = &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;item&quot;</span>: item&#125;</span><br><span class="line">    <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure>

<p>嵌套类型：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Union</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Gender</span>(<span class="built_in">str</span>, Enum):</span><br><span class="line">    man = <span class="string">&quot;man&quot;</span></span><br><span class="line">    women = <span class="string">&quot;women&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name : <span class="built_in">str</span></span><br><span class="line">    gender : Gender</span><br><span class="line">        </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Department</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name : <span class="built_in">str</span></span><br><span class="line">    lead : Person</span><br><span class="line">    cast : <span class="type">List</span>[Person]</span><br><span class="line">        </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Group</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    owner: Person</span><br><span class="line">    member_list: <span class="type">List</span>[Person] = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Company</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    owner: <span class="type">Union</span>[Person, Group]</span><br><span class="line">    regtime: date</span><br><span class="line">    department_list: <span class="type">List</span>[Department] = []</span><br></pre></td></tr></table></figure>

<p>数据校验：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel, ValidationError, validator</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoModel</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    friends: <span class="type">List</span>[<span class="built_in">int</span>] = []</span><br><span class="line">    books: <span class="type">List</span>[<span class="built_in">int</span>] = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># &#x27;*&#x27; 在这里是匹配任意字段，包含friends，books</span></span><br><span class="line"><span class="meta">    @validator(<span class="params"><span class="string">&#x27;*&#x27;</span>, pre=<span class="literal">True</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">split_str</span>(<span class="params">cls, v</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;如果传参是字符串，根据逗号切割成list&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(v, <span class="built_in">str</span>):</span><br><span class="line">            <span class="keyword">return</span> v.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"><span class="meta">    @validator(<span class="params"><span class="string">&#x27;books&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">books_greater_then_5</span>(<span class="params">cls, v</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断books数量少于5&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(v) &gt; <span class="number">5</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;books greater than 5&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1 = &#123;</span><br><span class="line">    <span class="string">&quot;friends&quot;</span>: [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    <span class="string">&quot;books&quot;</span>: <span class="string">&quot;3,4,5&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">d = DemoModel(**a1)</span><br><span class="line"><span class="built_in">print</span>(d)  <span class="comment"># friends=[2, 3, 4] books=[3, 4, 5]</span></span><br><span class="line"><span class="built_in">print</span>(d.<span class="built_in">dict</span>())  <span class="comment"># &#123;&#x27;friends&#x27;: [2, 3, 4], &#x27;books&#x27;: [3, 4, 5]&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>python提供的类型提示方法能够帮助使用者快速高效的去验证数据参数的合规性与安全性，保障数据传输在高效的同时兼顾安全性能，相比于其他的手动验证方式，这样的方式明显高效更多。也能使得文档具有更强的可读性，帮助开发者理解代码逻辑含义，提高编程效率。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>（fastapi一）安装与简单使用</title>
    <url>/m42-orion/2022/05/01/%EF%BC%88fastapi%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85%E4%B8%8E%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>由于自己已经使用过很久的fastapi了，但是到现在为止依然不能够非常熟练，多数时候依然会自己造轮子，走不少弯路，因此打算开始对fastapi进行系列总结。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>由于fastapi的启动需要<code>uvicorn</code>的配合，因此官方提供两种安装方式，第一种是全部安装，即：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install fastapi[all]</span><br></pre></td></tr></table></figure>

<p>第二种是分开安装即：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install fastapi</span><br><span class="line">pip install uvicorn[standard]</span><br></pre></td></tr></table></figure>

<p>如果安装太慢的话，添加一个临时源吧，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pyspide</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>fastapi服务创建有两种方式，第一种是通过代码启动，第二种是在命令行启动，如果你需要调试代码，建议你使用第一种，当然，某些编辑器提供直接的调试启动方法，但是需要注意配置启动函数与启动对象。这里给出两种启动方式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">import</span> uvicorn <span class="comment"># 必须添加这个库</span></span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">root</span>():</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello World&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    uvicorn.run(app=<span class="string">&#x27;main:app&#x27;</span>, host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">8000</span>, reload=<span class="literal">True</span>, debug=<span class="literal">True</span>)<span class="comment"># 启动命令</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">root</span>():</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello World&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在文件目录下的命令行中输入以下命令：</span></span><br><span class="line"><span class="comment"># uvicorn main:app --host &#x27;0.0.0.0&#x27; --port 8080 --reload</span></span><br></pre></td></tr></table></figure>
<p>uvicorn参数解释:  </p>
<ul>
<li>main: 指定主程序文件main.py文件, 如果main.py文件改成test.py 则命令也需要改为uvicorn test:app</li>
<li>app：在main.py中使用app = FastAPI()创建的对象</li>
<li>–host：远程主机ip，如果是本地则可以不要这个参数</li>
<li>–host：端口号</li>
<li>–reload：在修改源代码后程序会自动重新加载不用退出重新启动</li>
</ul>
<h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>在启动之初，fastapi提供一些关于swagger界面的配置信息：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI(</span><br><span class="line">    title=<span class="string">&quot;My Super Project&quot;</span>,</span><br><span class="line">    description=<span class="string">&quot;This is a very fancy project, with auto docs for the API and everything&quot;</span>,</span><br><span class="line">    version=<span class="string">&quot;2.5.0&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_items</span>():</span><br><span class="line">    <span class="keyword">return</span> [&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Foo&quot;</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    uvicorn.run(app, host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">8080</span>, access_log=<span class="literal">False</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>同时支持对跨域的配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可跨域访问的域名</span></span><br><span class="line">origins = [</span><br><span class="line">    <span class="string">&quot;http://localhost&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http://localhost:8080&quot;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">#可跨域访问的基本请求设置</span></span><br><span class="line">app.add_middleware(</span><br><span class="line">    CORSMiddleware,</span><br><span class="line">    allow_origins=origins,</span><br><span class="line">    allow_credentials=<span class="literal">True</span>,</span><br><span class="line">    allow_methods=[<span class="string">&quot;*&quot;</span>],</span><br><span class="line">    allow_headers=[<span class="string">&quot;*&quot;</span>],</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>更多详细的配置可以查看FastAPI的源码进行查看。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>fastapi</tag>
      </tags>
  </entry>
  <entry>
    <title>git基础使用</title>
    <url>/m42-orion/2022/05/01/git%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="什么是git"><a href="#什么是git" class="headerlink" title="什么是git"></a>什么是git</h2><p>git是一个<strong>分布式的版本控制软件</strong>。  </p>
<ul>
<li>分布式：<blockquote>
<p>场景：解决开发进度丢失问题，某人进度丢失可以从其他开发者那里找回来</p>
</blockquote>
</li>
<li>版本控制：能够控制开发<strong>进度</strong>并记录开发<strong>版本</strong>。<blockquote>
<p>场景：软件升级版本，毕业论文修改版本，写书不停的修订版本。</p>
</blockquote>
</li>
<li>软件：字面意思。<blockquote>
<p>场景：window上的安装包，软件，无脑下一步的安装的软件。</p>
</blockquote>
</li>
</ul>
<h3 id="分布式能够做什么？"><a href="#分布式能够做什么？" class="headerlink" title="分布式能够做什么？"></a>分布式能够做什么？</h3><ul>
<li>分布式存储开发进度，防止仓库信息挂掉的问题</li>
<li>提高代码开发完整性</li>
</ul>
<h3 id="关于版本控制能够做什么？"><a href="#关于版本控制能够做什么？" class="headerlink" title="关于版本控制能够做什么？"></a>关于版本控制能够做什么？</h3><ul>
<li>良好的版本管理可以控制开发进度，掌握开发问题，统一处理问题</li>
<li>可以多人同时开发，共同完成一个项目或者问题，减少重复工作量</li>
<li>减少文件重复保存，浪费存储资源</li>
<li>对版本回滚，问题排查，开发者追究起到良好的控制作用</li>
</ul>
<h3 id="git是什么"><a href="#git是什么" class="headerlink" title="git是什么"></a>git是什么</h3><p>git是一个可以管理版本的软件，并且支持多人协同管理，能够有效的解决开发冲突、版本控制、文件存放等问题。并且由于其支持分布式，所以不用担心某一处版本丢失问题。并且开发能够独立与其他开发者的进度，可以实现独立版本控制与多人版本控制。<br>git每一次进行版本控制都只会保留修改部分的内容，不会将内容全部保存，因此不会占用太大的空间资源，因此十分适合长期、大体量、多用户、工作复杂的版本管理。</p>
<h2 id="个人如何使用"><a href="#个人如何使用" class="headerlink" title="个人如何使用"></a>个人如何使用</h2><h3 id="git的文件关系"><a href="#git的文件关系" class="headerlink" title="git的文件关系"></a>git的文件关系</h3><ul>
<li>开发区：自己本地没有进入版本的的新文件或者文件被变动过</li>
<li>暂存区：将想要提交新版本的文件存放的区域</li>
<li>版本管理区：已经提交过版本管理的文件<blockquote>
<p>为什么会有暂存区，暂存区的存在使得文件能够更加灵活的开发，假设开发超进度了，但是只需要部分功能，这样也可以很好的做版本控制。或者临时发现有些文件不需要进入版本，需要移出这个版本也需要暂存区这个功能。暂存去就代表文件走向了版本管理的流程。</p>
</blockquote>
</li>
</ul>
<h3 id="第一次版本管理流程"><a href="#第一次版本管理流程" class="headerlink" title="第一次版本管理流程"></a>第一次版本管理流程</h3><p>如是实现：  </p>
<ul>
<li>进入项目文件夹根目录</li>
<li>初始化文件夹: <code>git init</code></li>
<li>查看文件夹下所有文件状态：<code>git status</code><blockquote>
<p>在git命令行当中，新文件或者被修改的文件会被标识为红色</p>
</blockquote>
</li>
<li>将文件存储到暂存区: <code>git add .</code><blockquote>
<p><code>add .</code>的含义是把所有文件都添加进去。如果想要一个个的添加文件你可以使用<code>git add 指定文件的全名(包含后缀名)</code>。添加到暂存区之后的文件会呈现绿色。</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>如果你想要把一个文件从暂存区踢出去，你可以使用命令：<code>git restore &lt;filename&gt;</code></p>
</blockquote>
<ul>
<li>记录一个版本: <code>git commit -m &quot;版本的名字&quot;</code></li>
</ul>
<h3 id="而后的管理"><a href="#而后的管理" class="headerlink" title="而后的管理"></a>而后的管理</h3><p>再第一次初始化之后，而后的版本管理步骤相比于第一次就不用执行<code>git init</code>命令。之后只需要继续添加你想要加入新版本的文件，将文件加入暂存区，再提交版本。</p>
<h3 id="个人信息配置"><a href="#个人信息配置" class="headerlink" title="个人信息配置"></a>个人信息配置</h3><p>git配置个人信息有利于在多人开发的时候识别版本修改来源于哪一位修改者，一般来说在第一次执行版本提交命令的时候，如果没有配置个人信息，那么一定会报错，提示让你运行命令：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;you@example.com&quot;</span></span><br><span class="line">git config --global user.name <span class="string">&quot;you name&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="版本记录"><a href="#版本记录" class="headerlink" title="版本记录"></a>版本记录</h3><ul>
<li>如果已经提交多次，想要查看历史的版本记录，可以使用命令：<code>git log</code></li>
<li>如果该版本出错了，想要找回历史版本，这个过程被称为<strong>回滚</strong>。意思就是重新滚回到历史的某一个版本，可以执行命令：<code>git reset --hard 版本号</code><blockquote>
<p>什么是版本号？版本号就是查看历史记录的时候展示的commit后面的一串编码。<br><strong>注意：</strong> 当执行了回滚之后再使用<code>git log</code>就不能够查看之后的记录了，需要使用另一个命令查看：<code>git reflog</code></p>
</blockquote>
</li>
<li>如果感觉查看版本不直观或者多人协同可以试试图形化查看：<code>git log graph</code></li>
</ul>
<h3 id="分支的使用"><a href="#分支的使用" class="headerlink" title="分支的使用"></a>分支的使用</h3><p>什么是分支？分支是我们基于当前进度在另一方向上进行拓展开发。使用场景：</p>
<blockquote>
<p>开发网站，前期准备工作已经完毕，但是现在需要转型，需要同时转向博客类型跟网盘类型，互不干扰,分成两个分支。<br>软件开发，开发在测试分支上，测试通过进入稳定版本。<br>多人协同工作，每人一个分支，到时候一起来合稿。<br>一人完成多项工作，每个分支一个章节，主分支用于合稿。</p>
</blockquote>
<ul>
<li>查看分支：<code>git branch</code></li>
<li>创建分支：<code>git branch &lt;myselfbranch&gt;</code></li>
<li>切换分支：<code>git checkout master</code></li>
<li>创建并切换：<code>git checkout -b &lt;myselfbranch&gt;</code></li>
<li>删除分支：<code>git branch -d &lt;myselfbranch&gt;</code></li>
<li>合并分支：<code>git merge master</code><blockquote>
<p>合并分支能够让你的分支同步你合并的对象</p>
</blockquote>
</li>
</ul>
<h2 id="结合远程仓库的个人使用"><a href="#结合远程仓库的个人使用" class="headerlink" title="结合远程仓库的个人使用"></a>结合远程仓库的个人使用</h2><p>以上的操作对于个人使用已经完全足够，用于个人记录文档或者日志记录已经完全足够，但是既然git是一个分布式的框架，总会需要结合远程仓库使用的时候。对于远程仓库有GitHub、gitlab、码云等多种选择方式，这里不再过多赘述。现在结合远程仓库一起使用。</p>
<h3 id="为什么要远程仓库"><a href="#为什么要远程仓库" class="headerlink" title="为什么要远程仓库"></a>为什么要远程仓库</h3><p>假设在家办公，在学校也在办公，或者在到处奔赴办公，如果想要继续保持上一次的开发进度，就必须要随身携带自己的文件。如果是以前可以选择放在U盘随身携带或者放在百度云等等。但是如果文件太大，那就比较麻烦了，每一次也是全部拷贝十分麻烦。还有可能文件丢失的可能性。<br>远程仓库的出现能够在云端创建一个保存文件的区域。能够一样保留开发记录，每次下载也可以只更新被更新的文件，不需要全部下载。</p>
<h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>注册一个远程仓库账号， <del>百度创建仓库教程</del></p>
<blockquote>
<p>场景：第一次创建仓库如果你还没开始进行版本管理可以这样操作：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# info&quot;</span> &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line">git remote add origin 你仓库地址</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<p>只需要在本地按顺序执行以上命令就可以了。</p>
<blockquote>
<p>场景：如果已经在本地写了一些版本了，突然某天想起要不要搞个远程仓库，可以执行以下操作：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin 你仓库地址</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<p>推送的时候需要填写自己的账号密码，填写你注册平台的账号名与密码。</p>
<h3 id="推送与拉取"><a href="#推送与拉取" class="headerlink" title="推送与拉取"></a>推送与拉取</h3><ul>
<li>push : 推送; pull:拉取;</li>
</ul>
<p>首先必须分清那个是推送，那个是拉取。推送指的是将代码推送到远程仓库里，推送内容包括本地文件与git记录；拉取同理。<br>在添加远程仓库的时候，<code>origin</code>指的是远程仓库的名字，而master指的是分支的名字，一般默认是在主分支也就是master上。</p>
<p>推送跟拉取的时候由于开发进度的不同或者开发产生冲突，会出现代码合并的请求出现，所以在推送之前一定要先拉取一遍保证本地文件为最新版本以防止冲突。</p>
<h3 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h3><blockquote>
<p>场景1：远程仓库的进度大于本地进度，本地没有第一时间合并<br>场景2：两个个不同的人对一个地方进行了修改并且同时推送导致线上冲突</p>
</blockquote>
<p>这两种冲突是需要注意的，一般情况不会发生，但是发生后就需要对代码进行合并。合并一般不使用命令行，就目前的情况已经有比较成熟的合并工具了，具体使用不再赘述。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql的四大特性</title>
    <url>/m42-orion/2022/05/01/mysql%E7%9A%84%E5%9B%9B%E5%A4%A7%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h2 id="四大特性"><a href="#四大特性" class="headerlink" title="四大特性"></a>四大特性</h2><p>MySQL有四大特性，分别是：原子性、隔离性、永久性、一致性。</p>
<h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><p>原子性这个词是从字面意义上最不好理解的一个词。原子性的含义是：一个事务包含多个操作，这些操作要么全部执行，要么全都不执行。实现事务的原子性，要支持回滚操作，在某个操作失败后，回滚到事务执行之前的状态。</p>
<p>举个例子，在你使用移动支付的时候，你付钱出去的一瞬间，别人也需要收款到账，付钱与收钱必须是一致的，如果不一致那就说明有问题，某个操作在过程当中遗失了，而这一进一出的过程被视为一个单元操作，不可被分割。出错之后原子性必须具有回滚功能，即返回到操作之前的情况，如果不能做到就有可能引起重大事故。</p>
<h3 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h3><p>一致性分为五种一致性，分别用于解决不同的问题：</p>
<ul>
<li>强一致性：读操作可以立即读到提交的更新操作。  </li>
<li>弱一致性：提交的更新操作，不一定立即会被读操作读到，此种情况会存在一个不一致窗口，指的是读操作可以读到最新值的一段时间。  </li>
<li>最终一致性：是弱一致性的特例。事务更新一份数据，最终一致性保证在没有其他事务更新同样的值的话，最终所有的事务都会读到之前事务更新的最新值。如果没有错误发生，不一致窗口的大小依赖于：通信延迟，系统负载等。  </li>
<li>单调一致性：如果一个进程已经读到一个值，那么后续不会读到更早的值。</li>
<li>会话一致性：保证客户端和服务器交互的会话过程中，读操作可以读到更新操作后的最新值</li>
</ul>
<p>一致性涉及到数据同步问题，也是在支付叫过程当场常常体现，当然还包括信息查询等业务情况。</p>
<h3 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h3><p>并发事务之间互相影响的程度，比如一个事务会不会读取到另一个未提交的事务修改的数据。在事务并发操作时，可能出现的问题有：  </p>
<ul>
<li><strong>脏读：</strong> 事务A修改了一个数据，但未提交，事务B读到了事务A未提交的更新结果，如果事务A提交失败，事务B读到的就是脏数据。  </li>
<li><strong>不可重复读：</strong> 在同一个事务中，对于同一份数据读取到的结果不一致。比如，事务B在事务A提交前读到的结果，和提交后读到的结果可能不同。 不可重复读出现的原因就是事务并发修改记录，要避免这种情况，最简单的方法就是对要修改的记录加锁，这回导致锁竞争加剧，影响性能。另一种方法是通过MVCC可以在无锁的情况下，避免不可重复读。</li>
<li><strong>幻读：</strong> 在同一个事务中，同一个查询多次返回的结果不一致。事务A新增了一条记录，事务B在事务A提交前后各执行了一次查询操作，发现后一次比前一次多了一条记录。 幻读是由于并发事务增加记录导致的，这个不能像不可重复读通过记录加锁解决，因为对于新增的记录根本无法加锁。需要将事务串行化，才能避免幻读。</li>
</ul>
<p>为了解决这些问题就引入了“隔离级别”的概念。SQL 标准的事务隔离级别包括：读未提交（read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（serializable）：</p>
<ul>
<li><strong>读未提交：</strong> 一个事务还没提交时，它做的变更就能被别的事务看到。</li>
<li><strong>读提交：</strong> 一个事务提交之后，它做的变更才会被其他事务看到。</li>
<li><strong>可重复读：</strong> 一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。</li>
<li><strong>串行化：</strong> 顾名思义是对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行</li>
</ul>
<h3 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h3><p>事务一旦提交，它对数据库的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>python类型注释</title>
    <url>/m42-orion/2022/05/08/python%E7%B1%BB%E5%9E%8B%E6%B3%A8%E9%87%8A/</url>
    <content><![CDATA[<p>我找到一些来自于官方的关于python类型注释的资源，我将其复制下来，用于个人收藏。良好的类型注释习惯能让代码的可读性大大增强，同时也能够保证后续加入的人员能够快速理解与使用。</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>Python 3.6 在 PEP 526 中引入了用于注释变量的语法，我们在大多数示例中都使用它。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This is how you declare the type of a variable type in Python 3.6</span></span><br><span class="line">age: <span class="built_in">int</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You don&#x27;t need to initialize a variable to annotate it</span></span><br><span class="line">a: <span class="built_in">int</span>  <span class="comment"># Ok (no value at runtime until assigned)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The latter is useful in conditional branches</span></span><br><span class="line">child: <span class="built_in">bool</span></span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">18</span>:</span><br><span class="line">    child = <span class="literal">True</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    child = <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h2 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Set</span>, <span class="type">Dict</span>, <span class="type">Tuple</span>, <span class="type">Optional</span></span><br><span class="line"><span class="comment"># For simple built-in types, just use the name of the type</span></span><br><span class="line">x: <span class="built_in">int</span> = <span class="number">1</span></span><br><span class="line">x: <span class="built_in">float</span> = <span class="number">1.0</span></span><br><span class="line">x: <span class="built_in">bool</span> = <span class="literal">True</span></span><br><span class="line">x: <span class="built_in">str</span> = <span class="string">&quot;test&quot;</span></span><br><span class="line">x: <span class="built_in">bytes</span> = <span class="string">b&quot;test&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># For collections, the type of the collection item is in brackets</span></span><br><span class="line"><span class="comment"># (Python 3.9+)</span></span><br><span class="line">x: <span class="built_in">list</span>[<span class="built_in">int</span>] = [<span class="number">1</span>]</span><br><span class="line">x: <span class="built_in">set</span>[<span class="built_in">int</span>] = &#123;<span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># In Python 3.8 and earlier, the name of the collection type is</span></span><br><span class="line"><span class="comment"># capitalized, and the type is imported from the &#x27;typing&#x27; module</span></span><br><span class="line">x: <span class="type">List</span>[<span class="built_in">int</span>] = [<span class="number">1</span>]</span><br><span class="line">x: <span class="type">Set</span>[<span class="built_in">int</span>] = &#123;<span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># For mappings, we need the types of both keys and values</span></span><br><span class="line">x: <span class="built_in">dict</span>[<span class="built_in">str</span>, <span class="built_in">float</span>] = &#123;<span class="string">&quot;field&quot;</span>: <span class="number">2.0</span>&#125;  <span class="comment"># Python 3.9+</span></span><br><span class="line">x: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">float</span>] = &#123;<span class="string">&quot;field&quot;</span>: <span class="number">2.0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># For tuples of fixed size, we specify the types of all the elements</span></span><br><span class="line">x: <span class="built_in">tuple</span>[<span class="built_in">int</span>, <span class="built_in">str</span>, <span class="built_in">float</span>] = (<span class="number">3</span>, <span class="string">&quot;yes&quot;</span>, <span class="number">7.5</span>)  <span class="comment"># Python 3.9+</span></span><br><span class="line">x: <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">str</span>, <span class="built_in">float</span>] = (<span class="number">3</span>, <span class="string">&quot;yes&quot;</span>, <span class="number">7.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># For tuples of variable size, we use one type and ellipsis</span></span><br><span class="line">x: <span class="built_in">tuple</span>[<span class="built_in">int</span>, ...] = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)  <span class="comment"># Python 3.9+</span></span><br><span class="line">x: <span class="type">Tuple</span>[<span class="built_in">int</span>, ...] = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use Optional[] for values that could be None</span></span><br><span class="line">x: <span class="type">Optional</span>[<span class="built_in">str</span>] = some_function()</span><br><span class="line"><span class="comment"># Mypy understands a value can&#x27;t be None in an if-statement</span></span><br><span class="line"><span class="keyword">if</span> x <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(x.upper())</span><br><span class="line"><span class="comment"># If a value can never be None due to some invariants, use an assert</span></span><br><span class="line"><span class="keyword">assert</span> x <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line"><span class="built_in">print</span>(x.upper())</span><br></pre></td></tr></table></figure>

<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>Python 3 支持函数声明的注释语法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Callable</span>, Iterator, <span class="type">Union</span>, <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is how you annotate a function definition</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stringify</span>(<span class="params">num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># And here&#x27;s how you specify multiple arguments</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plus</span>(<span class="params">num1: <span class="built_in">int</span>, num2: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add default value for an argument after the type annotation</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">num1: <span class="built_in">int</span>, my_float: <span class="built_in">float</span> = <span class="number">3.5</span></span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">    <span class="keyword">return</span> num1 + my_float</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is how you annotate a callable (function) value</span></span><br><span class="line">x: <span class="type">Callable</span>[[<span class="built_in">int</span>, <span class="built_in">float</span>], <span class="built_in">float</span>] = f</span><br><span class="line"></span><br><span class="line"><span class="comment"># A generator function that yields ints is secretly just a function that</span></span><br><span class="line"><span class="comment"># returns an iterator of ints, so that&#x27;s how we annotate it</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g</span>(<span class="params">n: <span class="built_in">int</span></span>) -&gt; Iterator[<span class="built_in">int</span>]:</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You can of course split a function annotation over multiple lines</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_email</span>(<span class="params">address: <span class="type">Union</span>[<span class="built_in">str</span>, <span class="built_in">list</span>[<span class="built_in">str</span>]],</span></span><br><span class="line"><span class="params">               sender: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">               cc: <span class="type">Optional</span>[<span class="built_in">list</span>[<span class="built_in">str</span>]],</span></span><br><span class="line"><span class="params">               bcc: <span class="type">Optional</span>[<span class="built_in">list</span>[<span class="built_in">str</span>]],</span></span><br><span class="line"><span class="params">               subject=<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="params">               body: <span class="type">Optional</span>[<span class="built_in">list</span>[<span class="built_in">str</span>]] = <span class="literal">None</span></span></span><br><span class="line"><span class="params">               </span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># An argument can be declared positional-only by giving it a name</span></span><br><span class="line"><span class="comment"># starting with two underscores:</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quux</span>(<span class="params">__x: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">quux(<span class="number">3</span>)  <span class="comment"># Fine</span></span><br><span class="line">quux(__x=<span class="number">3</span>)  <span class="comment"># Error</span></span><br></pre></td></tr></table></figure>

<h2 id="复杂情况"><a href="#复杂情况" class="headerlink" title="复杂情况"></a>复杂情况</h2><p>from typing import Union, Any, Optional, cast</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># To find out what type mypy infers for an expression anywhere in</span></span><br><span class="line"><span class="comment"># your program, wrap it in reveal_type().  Mypy will print an error</span></span><br><span class="line"><span class="comment"># message with the type; remove it again before running the code.</span></span><br><span class="line">reveal_type(<span class="number">1</span>)  <span class="comment"># -&gt; Revealed type is &quot;builtins.int&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use Union when something could be one of a few types</span></span><br><span class="line">x: <span class="built_in">list</span>[<span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">str</span>]] = [<span class="number">3</span>, <span class="number">5</span>, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;fun&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use Any if you don&#x27;t know the type of something or it&#x27;s too</span></span><br><span class="line"><span class="comment"># dynamic to write a type for</span></span><br><span class="line">x: <span class="type">Any</span> = mystery_function()</span><br><span class="line"></span><br><span class="line"><span class="comment"># If you initialize a variable with an empty container or &quot;None&quot;</span></span><br><span class="line"><span class="comment"># you may have to help mypy a bit by providing a type annotation</span></span><br><span class="line">x: <span class="built_in">list</span>[<span class="built_in">str</span>] = []</span><br><span class="line">x: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This makes each positional arg and each keyword arg a &quot;str&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call</span>(<span class="params">self, *args: <span class="built_in">str</span>, **kwargs: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    request = make_request(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> self.do_api_query(request)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use a &quot;type: ignore&quot; comment to suppress errors on a given line,</span></span><br><span class="line"><span class="comment"># when your code confuses mypy or runs into an outright bug in mypy.</span></span><br><span class="line"><span class="comment"># Good practice is to comment every &quot;ignore&quot; with a bug link</span></span><br><span class="line"><span class="comment"># (in mypy, typeshed, or your own code) or an explanation of the issue.</span></span><br><span class="line">x = confusing_function()  <span class="comment"># type: ignore  # https://github.com/python/mypy/issues/1167</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;cast&quot; is a helper function that lets you override the inferred</span></span><br><span class="line"><span class="comment"># type of an expression. It&#x27;s only for mypy -- there&#x27;s no runtime check.</span></span><br><span class="line">a = [<span class="number">4</span>]</span><br><span class="line">b = cast(<span class="built_in">list</span>[<span class="built_in">int</span>], a)  <span class="comment"># Passes fine</span></span><br><span class="line">c = cast(<span class="built_in">list</span>[<span class="built_in">str</span>], a)  <span class="comment"># Passes fine (no runtime check)</span></span><br><span class="line">reveal_type(c)  <span class="comment"># -&gt; Revealed type is &quot;builtins.list[builtins.str]&quot;</span></span><br><span class="line"><span class="built_in">print</span>(c)  <span class="comment"># -&gt; [4]; the object is not cast</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If you want dynamic attributes on your class, have it override &quot;__setattr__&quot;</span></span><br><span class="line"><span class="comment"># or &quot;__getattr__&quot; in a stub or in your source code.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># &quot;__setattr__&quot; allows for dynamic assignment to names</span></span><br><span class="line"><span class="comment"># &quot;__getattr__&quot; allows for dynamic access to names</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="comment"># This will allow assignment to any A.x, if x is the same type as &quot;value&quot;</span></span><br><span class="line">    <span class="comment"># (use &quot;value: Any&quot; to allow arbitrary types)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setattr__</span>(<span class="params">self, name: <span class="built_in">str</span>, value: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>: ...</span><br><span class="line"></span><br><span class="line">    <span class="comment"># This will allow access to any A.x, if x is compatible with the return type</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, name: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>: ...</span><br><span class="line"></span><br><span class="line">a.foo = <span class="number">42</span>  <span class="comment"># Works</span></span><br><span class="line">a.bar = <span class="string">&#x27;Ex-parrot&#x27;</span>  <span class="comment"># Fails type checking</span></span><br></pre></td></tr></table></figure>

<h2 id="标准“鸭子类型”"><a href="#标准“鸭子类型”" class="headerlink" title="标准“鸭子类型”"></a>标准“鸭子类型”</h2><p>在典型的Python代码中，许多可以将列表或字典作为参数的函数只需要它们的参数以某种方式“类似列表”或“类似字典”。“类似列表”或“类似字典”（或类似的东西）的特定含义被称为“鸭子类型”，并且在惯用Python中常见的几种鸭子类型是标准化的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Mapping, MutableMapping, <span class="type">Sequence</span>, Iterable</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use Iterable for generic iterables (anything usable in &quot;for&quot;),</span></span><br><span class="line"><span class="comment"># and Sequence where a sequence (supporting &quot;len&quot; and &quot;__getitem__&quot;) is</span></span><br><span class="line"><span class="comment"># required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">ints: Iterable[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">list</span>[<span class="built_in">str</span>]:</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">str</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> ints]</span><br><span class="line"></span><br><span class="line">f(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Mapping describes a dict-like object (with &quot;__getitem__&quot;) that we won&#x27;t</span></span><br><span class="line"><span class="comment"># mutate, and MutableMapping one (with &quot;__setitem__&quot;) that we might</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">my_mapping: Mapping[<span class="built_in">int</span>, <span class="built_in">str</span>]</span>) -&gt; <span class="built_in">list</span>[<span class="built_in">int</span>]:</span><br><span class="line">    my_mapping[<span class="number">5</span>] = <span class="string">&#x27;maybe&#x27;</span>  <span class="comment"># if we try this, mypy will throw an error...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(my_mapping.keys())</span><br><span class="line"></span><br><span class="line">f(&#123;<span class="number">3</span>: <span class="string">&#x27;yes&#x27;</span>, <span class="number">4</span>: <span class="string">&#x27;no&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">my_mapping: MutableMapping[<span class="built_in">int</span>, <span class="built_in">str</span>]</span>) -&gt; <span class="built_in">set</span>[<span class="built_in">str</span>]:</span><br><span class="line">    my_mapping[<span class="number">5</span>] = <span class="string">&#x27;maybe&#x27;</span>  <span class="comment"># ...but mypy is OK with this.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">set</span>(my_mapping.values())</span><br><span class="line"></span><br><span class="line">f(&#123;<span class="number">3</span>: <span class="string">&#x27;yes&#x27;</span>, <span class="number">4</span>: <span class="string">&#x27;no&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="comment"># You can optionally declare instance variables in the class body</span></span><br><span class="line">    attr: <span class="built_in">int</span></span><br><span class="line">    <span class="comment"># This is an instance variable with a default value</span></span><br><span class="line">    charge_percent: <span class="built_in">int</span> = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The &quot;__init__&quot; method doesn&#x27;t return anything, so it gets return</span></span><br><span class="line">    <span class="comment"># type &quot;None&quot; just like any other method that doesn&#x27;t return anything</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    <span class="comment"># For instance methods, omit type for &quot;self&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">my_method</span>(<span class="params">self, num: <span class="built_in">int</span>, str1: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> num * str1</span><br><span class="line"></span><br><span class="line"><span class="comment"># User-defined classes are valid as types in annotations</span></span><br><span class="line">x: MyClass = MyClass()</span><br><span class="line"></span><br><span class="line"><span class="comment"># You can use the ClassVar annotation to declare a class variable</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line">    seats: ClassVar[<span class="built_in">int</span>] = <span class="number">4</span></span><br><span class="line">    passengers: ClassVar[<span class="built_in">list</span>[<span class="built_in">str</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># You can also declare the type of an attribute in &quot;__init__&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.items: <span class="built_in">list</span>[<span class="built_in">str</span>] = []</span><br></pre></td></tr></table></figure>

<h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Match, IO</span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;typing.Match&quot; describes regex matches from the re module</span></span><br><span class="line">x: Match[<span class="built_in">str</span>] = re.match(<span class="string">r&#x27;[0-9]+&#x27;</span>, <span class="string">&quot;15&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use IO[] for functions that should accept or return any</span></span><br><span class="line"><span class="comment"># object that comes from an open() call (IO[] does not</span></span><br><span class="line"><span class="comment"># distinguish between reading, writing or other modes)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sys_IO</span>(<span class="params">mode: <span class="built_in">str</span> = <span class="string">&#x27;w&#x27;</span></span>) -&gt; IO[<span class="built_in">str</span>]:</span><br><span class="line">    <span class="keyword">if</span> mode == <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> sys.stdout</span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="string">&#x27;r&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> sys.stdin</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> sys.stdout</span><br><span class="line"></span><br><span class="line"><span class="comment"># Forward references are useful if you want to reference a class before</span></span><br><span class="line"><span class="comment"># it is defined</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">foo: A</span>) -&gt; <span class="built_in">int</span>:  <span class="comment"># This will fail</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># If you use the string literal &#x27;A&#x27;, it will pass as long as there is a</span></span><br><span class="line"><span class="comment"># class of that name later on in the file</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">foo: <span class="string">&#x27;A&#x27;</span></span>) -&gt; <span class="built_in">int</span>:  <span class="comment"># Ok</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>（fastapi二）参数校验</title>
    <url>/m42-orion/2022/05/08/%EF%BC%88fastapi%E4%BA%8C%EF%BC%89%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/</url>
    <content><![CDATA[<p>现在有一个实际的问题，我们在完成某一个项目的时候，如果说用户非要从接口传递一些非法参数或者某些人想要搞破坏，传递恶意的参数。如果参数直接与数据库相关，恶意传入一些参数会直接影响到数据库的正常运行，所以我们该怎么处理这些非法参数呢？写个函数验证？但是接口那么多，无穷尽也。但是fastapi提供了一些优雅的解决方式！</p>
<h2 id="额外的校验"><a href="#额外的校验" class="headerlink" title="额外的校验"></a>额外的校验</h2><p>下面是一段代码：  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Query</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/router/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_items</span>(<span class="params">q: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>需求是限制参数<code>q</code>的长度</p>
</blockquote>
<h2 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h2><p>官方提供了一个库叫做Query,这个库可以非常简单的做校验，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Query</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/router/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_items</span>(<span class="params">q: <span class="type">Optional</span>[<span class="built_in">str</span>] = Query(<span class="params"><span class="literal">None</span>, max_length=<span class="number">50</span></span>)</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>我们直接从源码上看：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Query</span>(<span class="params">  <span class="comment"># noqa: N802</span></span></span><br><span class="line"><span class="params">    default: <span class="type">Any</span>,</span></span><br><span class="line"><span class="params">    *,</span></span><br><span class="line"><span class="params">    alias: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    title: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    description: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    gt: <span class="type">Optional</span>[<span class="built_in">float</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    ge: <span class="type">Optional</span>[<span class="built_in">float</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    lt: <span class="type">Optional</span>[<span class="built_in">float</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    le: <span class="type">Optional</span>[<span class="built_in">float</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    min_length: <span class="type">Optional</span>[<span class="built_in">int</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    max_length: <span class="type">Optional</span>[<span class="built_in">int</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    regex: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    example: <span class="type">Any</span> = Undefined,</span></span><br><span class="line"><span class="params">    examples: <span class="type">Optional</span>[<span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>]] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    deprecated: <span class="type">Optional</span>[<span class="built_in">bool</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    include_in_schema: <span class="built_in">bool</span> = <span class="literal">True</span>,</span></span><br><span class="line"><span class="params">    **extra: <span class="type">Any</span>,</span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="type">Any</span>:</span><br></pre></td></tr></table></figure>

<p>其实根据翻译就能够得出这些参数大概是什么意思，如<code>gt、ge、lt、le</code>分别是大于、大于等于、小于、小于等于。但是其中有一个功能却十分强大，即<code>regex</code>。</p>
<p>是的，参数校验可以使用正则表达式，在官方给定的案例中，我们可以看到正则表达式的使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Query</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_items</span>(<span class="params"></span></span><br><span class="line"><span class="params">    q: <span class="type">Optional</span>[<span class="built_in">str</span>] = Query(<span class="params"><span class="literal">None</span>, min_length=<span class="number">3</span>, max_length=<span class="number">50</span>, regex=<span class="string">&quot;^fixedquery$&quot;</span></span>)</span></span><br><span class="line"><span class="params"></span>):</span><br><span class="line">    results = &#123;<span class="string">&quot;items&quot;</span>: [&#123;<span class="string">&quot;item_id&quot;</span>: <span class="string">&quot;Foo&quot;</span>&#125;, &#123;<span class="string">&quot;item_id&quot;</span>: <span class="string">&quot;Bar&quot;</span>&#125;]&#125;</span><br><span class="line">    <span class="keyword">if</span> q:</span><br><span class="line">        results.update(&#123;<span class="string">&quot;q&quot;</span>: q&#125;)</span><br><span class="line">    <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure>

<p>这个指定的正则表达式通过以下规则检查接收到的参数值：</p>
<ul>
<li>^：以该符号之后的字符开头，符号之前没有字符。</li>
<li>fixedquery: 值精确地等于 fixedquery。</li>
<li>$: 到此结束，在 fixedquery 之后没有更多字符。</li>
</ul>
<p>当然，别名参数<code>alias</code>也是十分有用的，如果你不想让调用函数的人通过参数揣测你的接口含义，你可以通过给参数命别名的方式来混淆别人对函数的判断，从而保证函数的安全。当然，别名也可以使得参数更加规范，或许？</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>fastapi</tag>
      </tags>
  </entry>
  <entry>
    <title>连接池</title>
    <url>/m42-orion/2022/05/08/%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
    <content><![CDATA[<h2 id="什么是连接池？"><a href="#什么是连接池？" class="headerlink" title="什么是连接池？"></a>什么是连接池？</h2><p>在网上常常给出这样的解释：数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个。</p>
<p>更通俗一点就是，连接池维护着项目于数据库之间的联系，保证项目不会过于频繁的去连接数据库导致数据库压力过大。</p>
<h2 id="为什么要使用连接池？"><a href="#为什么要使用连接池？" class="headerlink" title="为什么要使用连接池？"></a>为什么要使用连接池？</h2><p>数据库连接是一种关键的有限的昂贵的资源，这一点在多用户的网页应用程序中体现得尤为突出。一个数据库连接对象均对应一个物理数据库连接，每次操作都打开一个物理连接，使用完都关闭连接，这样造成系统的性能低下。如果连接池存在，操作只需要把任务丢给连接池，至于对数据库操作的进程等一系列问题，全权交给连接池来进行操作，由连接池自己控制与数据库的访问与操作。在没有连接池的情况下，连接数据库通常需要以下步骤：  </p>
<ul>
<li>TCP建立连接的三次握手  </li>
<li>MySQL认证的三次握手  </li>
<li>真正的SQL执行  </li>
<li>MySQL的关闭  </li>
<li>TCP的四次握手关闭  </li>
</ul>
<p>这样操作在代码上实现起来是很简单的，但是连接过程太耗时，连接过多容易出现内存泄漏，对于数据库访问大的项目来说这是十分致命的。</p>
<h2 id="连接池的实现"><a href="#连接池的实现" class="headerlink" title="连接池的实现"></a>连接池的实现</h2><h3 id="基于别人的工具"><a href="#基于别人的工具" class="headerlink" title="基于别人的工具"></a>基于别人的工具</h3><p>实际上连接池的问题由来已久，因此早有人考虑到连接池的问题并为此写好了工具，在python语言中，提供一个库：<code>sqlalchemy </code>,这个库可以维护一个连接，让操作者不必担心在项目执行过程中断掉与数据库的联系。</p>
<p>使用案例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">engine = create_engine(<span class="string">&quot;mysql://user:password@hostname/dbname?charset=utf8&quot;</span>,</span><br><span class="line">                       echo=<span class="literal">True</span>,</span><br><span class="line">                       pool_size=<span class="number">8</span>,</span><br><span class="line">                       pool_recycle=<span class="number">60</span>*<span class="number">30</span></span><br><span class="line">                       )</span><br></pre></td></tr></table></figure>

<h3 id="自己写一个"><a href="#自己写一个" class="headerlink" title="自己写一个"></a>自己写一个</h3><p>如果自己写一个也是可以的，自己写连接池需要注意以下几点：</p>
<ul>
<li>最小连接数：是连接池一直保持的数据库连接,所以如果应用程序对数据库连接的使用量不大,将会有大量的数据库连接资源被浪费.</li>
<li>最大连接数：是连接池能申请的最大连接数,如果数据库连接请求超过次数,后面的数据库连接请求将被加入到等待队列中,这会影响以后的数据库操作</li>
<li>最大空闲时间</li>
<li>获取连接超时时间</li>
<li>超时重试连接次数</li>
</ul>
<p>在网上也有不少人写出来了一些自己的连接池</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> tools.setting <span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line">DB_CONFIG = config.mysql_info()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SQLManager</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 初始化实例方法</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">		self.conn = <span class="literal">None</span></span><br><span class="line">		self.cursor = <span class="literal">None</span></span><br><span class="line">		self.connect()</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 连接数据库</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="keyword">try</span>: <span class="comment"># 防止长连接导致挂掉</span></span><br><span class="line">			self.conn.ping()</span><br><span class="line">		<span class="keyword">except</span>:</span><br><span class="line">			self.conn = pymysql.connect(</span><br><span class="line">				host=DB_CONFIG[<span class="string">&quot;HOST&quot;</span>],</span><br><span class="line">				port=<span class="built_in">int</span>(DB_CONFIG[<span class="string">&quot;PORT&quot;</span>]),</span><br><span class="line">				user=DB_CONFIG[<span class="string">&quot;USER&quot;</span>],</span><br><span class="line">				passwd=DB_CONFIG[<span class="string">&quot;PASSWORD&quot;</span>],</span><br><span class="line">				db=DB_CONFIG[<span class="string">&quot;DBNAME&quot;</span>],</span><br><span class="line">				charset=DB_CONFIG[<span class="string">&quot;CHARSET&quot;</span>]</span><br><span class="line">			)</span><br><span class="line">			self.cursor = self.conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 查询多条数据</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">get_list</span>(<span class="params">self, sql, args=<span class="literal">None</span></span>):</span><br><span class="line">		self.connect()</span><br><span class="line">		self.cursor.execute(sql.encode(<span class="string">&#x27;utf8&#x27;</span>), args)</span><br><span class="line">		result = self.cursor.fetchall()</span><br><span class="line">		<span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 查询单条数据</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">get_one</span>(<span class="params">self, sql, args=<span class="literal">None</span></span>):</span><br><span class="line">		self.connect()</span><br><span class="line">		self.cursor.execute(sql.encode(<span class="string">&#x27;utf8&#x27;</span>), args)</span><br><span class="line">		result = self.cursor.fetchone()</span><br><span class="line">		<span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 执行单条SQL语句</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">moddify</span>(<span class="params">self, sql, args=<span class="literal">None</span></span>):</span><br><span class="line">		self.connect()</span><br><span class="line">		self.cursor.execute(sql, args)</span><br><span class="line">		self.conn.commit()</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 我如果要批量执行多个创建操作，虽然只建立了一次数据库连接但是还是会多次提交，可不可以改成一次连接，</span></span><br><span class="line">	<span class="comment"># 一次提交呢？</span></span><br><span class="line">	<span class="comment"># 可以，只需要用上pymysql的executemany()</span></span><br><span class="line">	<span class="comment"># 方法就可以了。</span></span><br><span class="line">	<span class="comment"># 执行多条SQL语句</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">multi_modify</span>(<span class="params">self, sql, args=<span class="literal">None</span></span>):</span><br><span class="line">		self.connect()</span><br><span class="line">		self.cursor.executemany(sql.encode(<span class="string">&#x27;utf8&#x27;</span>), args)</span><br><span class="line">		self.conn.commit()</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 创建单条记录的语句</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, sql, args=<span class="literal">None</span></span>):</span><br><span class="line">		self.connect()</span><br><span class="line">		self.cursor.execute(sql.encode(<span class="string">&#x27;utf8&#x27;</span>), args)</span><br><span class="line">		self.conn.commit()</span><br><span class="line">		last_id = self.cursor.lastrowid</span><br><span class="line">		<span class="keyword">return</span> last_id</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 关闭数据库cursor和连接</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>):</span><br><span class="line">		self.connect()</span><br><span class="line">		self.cursor.close()</span><br><span class="line">		self.conn.close()</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 最后，我们每次操作完数据库之后都要手动关闭，可不可以写成自动关闭的呢？</span></span><br><span class="line">	<span class="comment"># 联想到我们之前学过的文件操作，使用with语句可以实现缩进结束自动关闭文件句柄的例子。</span></span><br><span class="line">	<span class="comment"># 我们来把我们的数据库连接类SQLManager类再优化下，使其支持with语句操作。</span></span><br><span class="line">	<span class="comment"># 进入with语句自动执行</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 退出with语句块自动执行</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">		self.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db = SQLManager()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># info = db.get_list(&#x27;select user_name from user_table where user_name=&quot;张三&quot;&#x27;)</span></span><br><span class="line">	<span class="comment"># time_info=datetime.datetime.now().strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)</span></span><br><span class="line">	<span class="comment"># sql_str = &quot;INSERT INTO user_table (create_time,update_time,user_name,password) VALUES (now(),now(),&#x27;&#123;&#125;&#x27;,&#123;&#125;)&quot;</span></span><br><span class="line">	<span class="comment"># db.create(sql_str)</span></span><br><span class="line">    <span class="comment"># print(info)</span></span><br><span class="line">	<span class="comment"># db.close()</span></span><br><span class="line">	sql_str = <span class="string">&quot;SELECT * FROM articles ORDER BY create_time DESC LIMIT &#123;&#125;,2;&quot;</span>.<span class="built_in">format</span>(<span class="number">2</span>*<span class="number">2</span>)</span><br><span class="line">	result = db.get_list(sql_str)</span><br><span class="line">	<span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>fastapi</tag>
      </tags>
  </entry>
  <entry>
    <title>特殊类型的声明</title>
    <url>/m42-orion/2022/05/10/%E7%89%B9%E6%AE%8A%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%A3%B0%E6%98%8E/</url>
    <content><![CDATA[<p>在类型声明的部分，提供的类型声明大多都是官方给定的类型，如:<code>int</code>,<code>float</code>,<code>str</code>,<code>list</code>,<code>dict</code>,<code>set</code>等等，但是某些时候当我们使用一些特殊的变量的时候，类型并不存在于官方给定的选项中。比如某些python的库创造的变量是具有自定义的类型的，这个时候该怎么操作呢？以下给出两个例子：</p>
<h2 id="库当中的类型"><a href="#库当中的类型" class="headerlink" title="库当中的类型"></a>库当中的类型</h2><p>先看案例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html_doc = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html_doc, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(soup)</span><br></pre></td></tr></table></figure>

<p>这是一段BeautifulSoup库的代码，如果需要将soup当作变量传递到一个函数当中，soup是什么类型的呢？可以用<code>type()</code>方法进行查看：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(soup)</span><br><span class="line"><span class="comment"># &lt;class &#x27;bs4.BeautifulSoup&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在就知道了soup的类型，于是代码就能写成：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> bs4 <span class="comment"># 引入类型对象</span></span><br><span class="line"></span><br><span class="line">html_doc = <span class="string">&quot;&quot;&quot;&lt;html&gt;test&lt;/html&gt;&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html_doc, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">soup:bs4.BeautifulSoup</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h2 id="自定义的类型"><a href="#自定义的类型" class="headerlink" title="自定义的类型"></a>自定义的类型</h2><p>如果是自定义的类型呢？什么情况下有自定义的类型？当然是将class对象当中变量传递的时候了，我们都知道实例化的对象是class或者啥的，但是class并不是对象的类型，对象的类型应该是class的名字.<br>所以代码如下：  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">a = test()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">funcname</span>(<span class="params">parm:test</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    docstring</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>倘若不信也可以亲自使用<code>type()</code>进行验证。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>fastapi启动的初始化问题</title>
    <url>/m42-orion/2022/05/12/fastapi%E5%90%AF%E5%8A%A8%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>在我最开始学习总结fastapi的时候，我就知道了fastapi可以通过命令行启动与调试模式启动，这里有一个巨大的坑需要注意，因为踩过，所以记录一下。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>首先展示一段调试启动的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI(</span><br><span class="line">    title=<span class="string">&quot;My Super Project&quot;</span>,</span><br><span class="line">    description=<span class="string">&quot;This is a very fancy project, with auto docs for the API and everything&quot;</span>,</span><br><span class="line">    version=<span class="string">&quot;2.5.0&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_items</span>():</span><br><span class="line">    <span class="keyword">return</span> [&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Foo&quot;</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    uvicorn.run(app, host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">8080</span>, access_log=<span class="literal">False</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>这段代码目前只是一个单文件，但是假设在单文件当中，我引入了其他文件中的一个class实例化对象，并且将这个对象在app赋值之后也进行一个赋值初始化，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> other <span class="keyword">import</span> otherobject <span class="comment">#otherobject是一个已经实例化之后的对象 </span></span><br><span class="line"></span><br><span class="line">app = FastAPI(</span><br><span class="line">    title=<span class="string">&quot;My Super Project&quot;</span>,</span><br><span class="line">    description=<span class="string">&quot;This is a very fancy project, with auto docs for the API and everything&quot;</span>,</span><br><span class="line">    version=<span class="string">&quot;2.5.0&quot;</span>,</span><br><span class="line">)</span><br><span class="line">otherobject.fun(<span class="number">1</span>) <span class="comment"># 赋值</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_items</span>():</span><br><span class="line">    <span class="keyword">return</span> [&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Foo&quot;</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    uvicorn.run(app, host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">8080</span>, access_log=<span class="literal">False</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>问题来了，在项目启动之后otherobject还会是赋值后的otherobject吗？</p>
<p>答案是：<strong>不是</strong></p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>因为这里必须搞清楚一件事情，python作为一种脚本语言，是逐行进行执行的，所以在启动的时候，python会按照顺序进行赋值，但是一旦执行到<code>uvicorn.run(app, host=&quot;0.0.0.0&quot;, port=8080, access_log=False, debug=True)</code>,这个时候就是交由uvicorn来启动一个项目了，当把权限交由给了uvicorn，它在启动服务的同时会重新引入其他文件的变量，但是却不会再一次执行当前的文件。因此otherobject会被导入两次但是第二次却不会被赋值。</p>
]]></content>
      <categories>
        <category>错误</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch之python总结</title>
    <url>/m42-orion/2022/05/12/ElasticSearch%E4%B9%8Bpython%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="对于ES"><a href="#对于ES" class="headerlink" title="对于ES"></a>对于ES</h2><p>ES数据库本身作为一种分布式的、查询优势、拓展优势、容错优势…..等等众多优点的数据库。更多的特点还是自行百度吧</p>
<h2 id="python操作"><a href="#python操作" class="headerlink" title="python操作"></a>python操作</h2><p>安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install elasticsearch</span><br></pre></td></tr></table></figure>

<p>安装也就那样吧。</p>
<h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><p>过热推荐，如果需要学习一个新的库的使用的时候，看源码与看官方文档是一个好习惯，因此本文仅列出少数操作，以使用入门讲解为主要核心。首先附上官方文档：<a href="https://elasticsearch-py.readthedocs.io/">https://elasticsearch-py.readthedocs.io/</a>  点击链接会直接跳转到最新版本的官方文档。</p>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>在使用python进行操作的时候，首先需要连接数据库，在启动数据库之后采用以下代码进行数据库连接：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> elasticsearch <span class="keyword">import</span> Elasticsearch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化一个ip为localhost，端口为9200，允许超时一小时的es对象</span></span><br><span class="line">client = Elasticsearch(<span class="string">&quot;http://IP:9200&quot;</span>) <span class="comment"># 替换成对应IP</span></span><br></pre></td></tr></table></figure>

<p>但是其实还有更多可选参数，在VScode当中只需要按住ctrl后点击Elasticsearch就能够看到源码，源码给出了更多可选参数与可选参数类型对数据库lz做了配置,部分源码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self,</span></span><br><span class="line"><span class="params">        hosts: t.<span class="type">Optional</span>[_TYPE_HOSTS] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        *,</span></span><br><span class="line"><span class="params">        <span class="comment"># API</span></span></span><br><span class="line"><span class="params">        cloud_id: t.<span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        api_key: t.<span class="type">Optional</span>[t.<span class="type">Union</span>[<span class="built_in">str</span>, t.<span class="type">Tuple</span>[<span class="built_in">str</span>, <span class="built_in">str</span>]]] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        basic_auth: t.<span class="type">Optional</span>[t.<span class="type">Union</span>[<span class="built_in">str</span>, t.<span class="type">Tuple</span>[<span class="built_in">str</span>, <span class="built_in">str</span>]]] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        bearer_auth: t.<span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        opaque_id: t.<span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        <span class="comment"># Node</span></span></span><br><span class="line"><span class="params">        headers: t.<span class="type">Union</span>[DefaultType, t.Mapping[<span class="built_in">str</span>, <span class="built_in">str</span>]] = DEFAULT,</span></span><br><span class="line"><span class="params">        connections_per_node: t.<span class="type">Union</span>[DefaultType, <span class="built_in">int</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        http_compress: t.<span class="type">Union</span>[DefaultType, <span class="built_in">bool</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        verify_certs: t.<span class="type">Union</span>[DefaultType, <span class="built_in">bool</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        ca_certs: t.<span class="type">Union</span>[DefaultType, <span class="built_in">str</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        client_cert: t.<span class="type">Union</span>[DefaultType, <span class="built_in">str</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        client_key: t.<span class="type">Union</span>[DefaultType, <span class="built_in">str</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        ssl_assert_hostname: t.<span class="type">Union</span>[DefaultType, <span class="built_in">str</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        ssl_assert_fingerprint: t.<span class="type">Union</span>[DefaultType, <span class="built_in">str</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        ssl_version: t.<span class="type">Union</span>[DefaultType, <span class="built_in">int</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        ssl_context: t.<span class="type">Union</span>[DefaultType, t.<span class="type">Any</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        ssl_show_warn: t.<span class="type">Union</span>[DefaultType, <span class="built_in">bool</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        <span class="comment"># Transport</span></span></span><br><span class="line"><span class="params">        transport_class: t.<span class="type">Type</span>[Transport] = Transport,</span></span><br><span class="line"><span class="params">        request_timeout: t.<span class="type">Union</span>[DefaultType, <span class="literal">None</span>, <span class="built_in">float</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        node_class: t.<span class="type">Union</span>[DefaultType, t.<span class="type">Type</span>[BaseNode]] = DEFAULT,</span></span><br><span class="line"><span class="params">        node_pool_class: t.<span class="type">Union</span>[DefaultType, t.<span class="type">Type</span>[NodePool]] = DEFAULT,</span></span><br><span class="line"><span class="params">        randomize_nodes_in_pool: t.<span class="type">Union</span>[DefaultType, <span class="built_in">bool</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        node_selector_class: t.<span class="type">Union</span>[DefaultType, t.<span class="type">Type</span>[NodeSelector]] = DEFAULT,</span></span><br><span class="line"><span class="params">        dead_node_backoff_factor: t.<span class="type">Union</span>[DefaultType, <span class="built_in">float</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        max_dead_node_backoff: t.<span class="type">Union</span>[DefaultType, <span class="built_in">float</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        serializer: t.<span class="type">Optional</span>[Serializer] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        serializers: t.<span class="type">Union</span>[DefaultType, t.Mapping[<span class="built_in">str</span>, Serializer]] = DEFAULT,</span></span><br><span class="line"><span class="params">        default_mimetype: <span class="built_in">str</span> = <span class="string">&quot;application/json&quot;</span>,</span></span><br><span class="line"><span class="params">        max_retries: t.<span class="type">Union</span>[DefaultType, <span class="built_in">int</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        retry_on_status: t.<span class="type">Union</span>[DefaultType, <span class="built_in">int</span>, t.Collection[<span class="built_in">int</span>]] = DEFAULT,</span></span><br><span class="line"><span class="params">        retry_on_timeout: t.<span class="type">Union</span>[DefaultType, <span class="built_in">bool</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        sniff_on_start: t.<span class="type">Union</span>[DefaultType, <span class="built_in">bool</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        sniff_before_requests: t.<span class="type">Union</span>[DefaultType, <span class="built_in">bool</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        sniff_on_node_failure: t.<span class="type">Union</span>[DefaultType, <span class="built_in">bool</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        sniff_timeout: t.<span class="type">Union</span>[DefaultType, <span class="literal">None</span>, <span class="built_in">float</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        min_delay_between_sniffing: t.<span class="type">Union</span>[DefaultType, <span class="literal">None</span>, <span class="built_in">float</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        sniffed_node_callback: t.<span class="type">Optional</span>[</span></span><br><span class="line"><span class="params">            t.<span class="type">Callable</span>[[t.<span class="type">Dict</span>[<span class="built_in">str</span>, t.<span class="type">Any</span>], NodeConfig], t.<span class="type">Optional</span>[NodeConfig]]</span></span><br><span class="line"><span class="params">        ] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        meta_header: t.<span class="type">Union</span>[DefaultType, <span class="built_in">bool</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        timeout: t.<span class="type">Union</span>[DefaultType, <span class="literal">None</span>, <span class="built_in">float</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        randomize_hosts: t.<span class="type">Union</span>[DefaultType, <span class="built_in">bool</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        host_info_callback: t.<span class="type">Optional</span>[</span></span><br><span class="line"><span class="params">            t.<span class="type">Callable</span>[</span></span><br><span class="line"><span class="params">                [t.<span class="type">Dict</span>[<span class="built_in">str</span>, t.<span class="type">Any</span>], t.<span class="type">Dict</span>[<span class="built_in">str</span>, t.<span class="type">Union</span>[<span class="built_in">str</span>, <span class="built_in">int</span>]]],</span></span><br><span class="line"><span class="params">                t.<span class="type">Optional</span>[t.<span class="type">Dict</span>[<span class="built_in">str</span>, t.<span class="type">Union</span>[<span class="built_in">str</span>, <span class="built_in">int</span>]]],</span></span><br><span class="line"><span class="params">            ]</span></span><br><span class="line"><span class="params">        ] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        sniffer_timeout: t.<span class="type">Union</span>[DefaultType, <span class="literal">None</span>, <span class="built_in">float</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        sniff_on_connection_fail: t.<span class="type">Union</span>[DefaultType, <span class="built_in">bool</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        http_auth: t.<span class="type">Union</span>[DefaultType, t.<span class="type">Any</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        maxsize: t.<span class="type">Union</span>[DefaultType, <span class="built_in">int</span>] = DEFAULT,</span></span><br><span class="line"><span class="params">        <span class="comment"># Internal use only</span></span></span><br><span class="line"><span class="params">        _transport: t.<span class="type">Optional</span>[Transport] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    </span>)</span><br></pre></td></tr></table></figure>

<p>源码对参数进行可分类，分别是：API、Node、Transport、Internal use only四个大类，还有一个必选的host参数。其实根据参数已经能够明白该库该如何使用了，以API为例，对应ES数据库的实际使用即可创建API接口。</p>
<p>同理，在源码中给出了一些其他操作，如create、delete、close等等。</p>
]]></content>
      <categories>
        <category>错误</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python海象语法</title>
    <url>/m42-orion/2022/05/22/python%E6%B5%B7%E8%B1%A1%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>在我的工作当中，无意间接触到了一个别人写的一段代码,像这样：<code>if (n := len(a)) &gt; 10:</code>，凭借我的直觉，我能够轻易的读懂这段代码，但是我却从来没见过，于是我搜了一下，才知道这是python3.8的新语法，叫做海象语法，因为冒号像眼睛，等号像牙齿，所以被成为海象语法。</p>
<h2 id="海象语法"><a href="#海象语法" class="headerlink" title="海象语法"></a>海象语法</h2><p>官方给出了几个案例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 赋值表达式有助于避免调用 len（） 两次</span></span><br><span class="line"><span class="keyword">if</span> (n := <span class="built_in">len</span>(a)) &gt; <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;List is too long (<span class="subst">&#123;n&#125;</span> elements, expected &lt;= 10)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一次用于测试是否发生了匹配，另一次用于提取子组</span></span><br><span class="line">discount = <span class="number">0.0</span></span><br><span class="line"><span class="keyword">if</span> (mo := re.search(<span class="string">r&#x27;(\d+)% discount&#x27;</span>, advertisement)):</span><br><span class="line">    discount = <span class="built_in">float</span>(mo.group(<span class="number">1</span>)) / <span class="number">100.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Loop over fixed length blocks</span></span><br><span class="line"><span class="keyword">while</span> (block := f.read(<span class="number">256</span>)) != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">    process(block)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其中表达式正文中还需要在筛选条件中计算的值</span></span><br><span class="line">[clean_name.title() <span class="keyword">for</span> name <span class="keyword">in</span> names</span><br><span class="line"> <span class="keyword">if</span> (clean_name := normalize(<span class="string">&#x27;NFC&#x27;</span>, name)) <span class="keyword">in</span> allowed_names]</span><br></pre></td></tr></table></figure>

<p>在原来的python语言当中，需要判断的时候不能够将表达式赋值给变量，因此在进行判断操作之前，必须首先对判断变量进行赋值，而海象运算符使用得当可以极大程度的减少对于冗余代码的使用，免去过多的赋值操作。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>该写点什么，还是算吧！</p>
]]></content>
      <categories>
        <category>海象语法</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>静态资源与动态资源</title>
    <url>/m42-orion/2022/05/29/%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E4%B8%8E%E5%8A%A8%E6%80%81%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<h2 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h2><p>简单理解WEB服务静态和动态资源请求过程 </p>
<ul>
<li>用户发起访问  </li>
<li>服务器端接收到请求，该请求到达服务器的内核空间，因为tcp/ip协议工作在内核空间；到达内核空间后，发现访问的是80端口的套接字，通过路由和相关解码，请求被转到服务器的用户空间，也就是转到了web服务上；  </li>
<li>请求到达用户空间后，发现请求的是一个文件，然后继续把请求转到内核空间，内核空间通过内核在磁盘上获取对应文件；  </li>
<li>请求在内核空间获取到对应文件后，把文件返回至用户空间即web服务；  </li>
<li>请求结果到达用户空间的web服务上后，把结果再通过套接字回到内核空间；  </li>
<li>内核空间把结果通过网络tcp/ip协议栈返回至客户端。  </li>
</ul>
<h2 id="动态资源请求"><a href="#动态资源请求" class="headerlink" title="动态资源请求"></a>动态资源请求</h2><p>简单理解WEB服务静态和动态资源请求过程</p>
<ul>
<li>用户发起访问  </li>
<li>服务器端接收到请求，该请求到达服务器的内核空间，因为tcp/ip协议工作在内核空间；到达内核空间后，发现访问的是80端口的套接字，通过路由和相关解码，请求被转到服务器的用户空间，也就是转到了web服务上；  </li>
<li>请求到达用户空间后，发现请求的是一个动态页面，然后根据相关协议调用php解释器程序；  </li>
<li>请求到达php解释器中，把请求转至内核空间从磁盘上获取对应文件；  </li>
<li>获取到文件后，请求到达用户空间的解释器中执行一遍；  </li>
<li>解释器把执行结果返回至web服务上，然后解释器进程自行销毁；  </li>
<li>请求结果到达用户空间的web服务上后，把结果再通过套接字回到内核空间；  </li>
<li>内核空间把结果通过网络tcp/ip协议栈返回至客户端。</li>
</ul>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>（fastapi三）中间件</title>
    <url>/m42-orion/2022/05/31/%EF%BC%88fastapi%E4%B8%89%EF%BC%89%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>blog_img/fastapi系列/（fastapi一）安装与简单使用/封面.jpg<br>“中间件”是一个函数,它在每个请求被特定的路径操作处理之前,以及在每个响应返回之前工作.</p>
<ul>
<li>它接收你的应用程序的每一个请求.  </li>
<li>然后它可以对这个请求做一些事情或者执行任何需要的代码.  </li>
<li>然后它将请求传递给应用程序的其他部分 (通过某种路径操作).  </li>
<li>然后它获取应用程序生产的响应 (通过某种路径操作).  </li>
<li>它可以对该响应做些什么或者执行任何需要的代码.  </li>
<li>然后它返回这个 响应.  </li>
</ul>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Request</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.middleware(<span class="params"><span class="string">&quot;http&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">add_process_time_header</span>(<span class="params">request: Request, call_next</span>):</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    response = <span class="keyword">await</span> call_next(request)</span><br><span class="line">    process_time = time.time() - start_time</span><br><span class="line">    response.headers[<span class="string">&quot;X-Process-Time&quot;</span>] = <span class="built_in">str</span>(process_time)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<p>其中：</p>
<ul>
<li>request：项目接受的请求，可以获取请求信息  </li>
<li>call_next：将 request 传递给相应的 路径操作.然后它将返回由相应的路径操作生成的 response.</li>
<li> response.headers[“X-Process-Time”]：修改返回头信息</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>中间件能够在每一个请求接受之前对请求进行操作，捕获请求的信息，并对请求或者返回信息进行修改。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>fastapi</tag>
      </tags>
  </entry>
  <entry>
    <title>127.0.0.1与localhost的区别</title>
    <url>/m42-orion/2022/05/31/127-0-0-1%E4%B8%8Elocalhost%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id="127-0-0-1"><a href="#127-0-0-1" class="headerlink" title="127.0.0.1"></a>127.0.0.1</h2><ul>
<li>地址而非域名</li>
<li>127.0.0.1在Windows等系统的正确解释是：本机地址（本机服务器或回送地址）  </li>
<li>127.0.0.1是一个环回地址，根本不是一个网络地址  </li>
<li>127.0.0.1是通过网卡传输的，依赖网卡，并受到网络防火墙和网卡相关的限制</li>
<li>检测本机的回路是否正常，如果得到一个成功的ping返回，则可以认定你的IP栈是被初始化过的，TCP/IP协议安装正确。如果失败，那么你的IP栈失败，TCP/IP协议必须重新安装</li>
<li>不联网、网卡传输，受防火墙和网卡的限制、本机访问    </li>
</ul>
<h2 id="localhost"><a href="#localhost" class="headerlink" title="localhost"></a>localhost</h2><ul>
<li>域名而非地址</li>
<li>localhost也叫local ，正确的解释是：本地服务器</li>
<li>localhost 是一个域名，在过去它指向 127.0.0.1 这个IP地址。在操作系统支持 ipv6 后，它同时还指向ipv6 的地址 [::1] </li>
<li>在计算机网络中，localhost是回路网络接口的一个标准主机名，相对应的ip地址是127.0.0.1</li>
<li>localhost是一个保留域名，同时也是一个特殊的DNS主机名，代表分配给引用这个名称的计算机的ip地址，即所在计算机本身</li>
<li>localhost是不经过网卡传输的，它不受网络防火墙和网卡相关的限制</li>
<li>windows系统，在host文件中，localhost指向的ip是127.0.0.1,可通过编辑host文件改变指向</li>
<li>不联网、不使用网卡，不受防火墙和网卡的限制、本机访问</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>loclhost是作为域名被解析的，因此两者虽然有类似的效果但是并不相同，一般设置程序时本地服务用localhost是最好的，localhost不会解析成IP，也不会占用网卡、网络资源。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
</search>
