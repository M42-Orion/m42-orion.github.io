<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hello world</title>
    <url>/m42-orion/2022/04/23/hello-world/</url>
    <content><![CDATA[<h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#FileName: HelloWorld.java  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>   #如果有 <span class="keyword">public</span> 类的话，类名必须和文件同名，注意大小写  </span><br><span class="line">&#123;  </span><br><span class="line">  #Java 入口程序，程序从此入口  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  </span><br><span class="line">  &#123;  </span><br><span class="line">  #向控制台打印一条语句  </span><br><span class="line">    System.out.println(<span class="string">&quot;Hello,World!&quot;</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>                <span class="meta">#main 入口函数  </span></span><br><span class="line">&#123;  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello,World!&quot;</span>); <span class="meta">#printf 函数打印  </span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;               #函数返回值  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>               <span class="comment">//std::cout 要用到的头文件  </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>                <span class="comment">//标准输入输出头文件  </span></span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello,World!--Way 1\n&quot;</span>);    <span class="comment">//printf 语句打印  </span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Hello,World!--Way 2&quot;</span>);        <span class="comment">//puts 语句  </span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Hello,&quot;</span> <span class="string">&quot; &quot;</span> <span class="string">&quot;World!--Way 3&quot;</span>); <span class="comment">//字符串拼接  </span></span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;Hello,World!--Way 4&quot;</span> &lt;&lt; std::endl; <span class="comment">//C++ 教科书上写法  </span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;                                        <span class="comment">//作为注释  </span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello,World!&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;  </span><br><span class="line">&lt;body&gt;  </span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Hello,World!&quot;</span>;            <span class="comment">//打印语句  </span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;The first php program!&quot;</span>;  <span class="comment">//打印语句  </span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">phpinfo</span>();                 <span class="comment">//phpinfo()系统函数,输出环境信息  </span></span><br><span class="line"><span class="meta">?&gt;</span>  </span><br><span class="line">&lt;/body&gt;  </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sys.<span class="title function_">puts</span>(<span class="string">&quot;Hello,World!&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;Hello,World!&#x27;</span> <span class="keyword">from</span> dual;  </span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is the first program!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello,World!<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python代码片段(vscode)</title>
    <url>/m42-orion/2022/04/23/python%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5-vscode/</url>
    <content><![CDATA[<p>在最新的vscode的python插件更新后，不提供代码片段的功能，因此要自己手添加用户代码片段。使用方法如下：</p>
<ul>
<li>复制下方给出的代码片段</li>
<li>打开vscode</li>
<li>左下角设置-&gt;用户代码片段-&gt;python.json</li>
<li>全部删掉后替换成刚刚复制的内容</li>
</ul>
<p>再次使用后vscode提供代码片段联想功能,输入部分代码后可提供多种代码格式,如下图：<br><img src="https://liu__tao.gitee.io/drawing-bed/blog_img/python%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5(vscode)/1.png" alt="1"><br><img src="https://liu__tao.gitee.io/drawing-bed/blog_img/python%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5(vscode)/2.png" alt="2"></p>
<p>可根据代码片段书写格式自定义代码片段。<br>代码片段如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="comment">// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and </span></span><br><span class="line">	<span class="comment">// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</span></span><br><span class="line">	<span class="comment">// $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. Placeholders with the </span></span><br><span class="line">	<span class="comment">// same ids are connected.</span></span><br><span class="line">	<span class="comment">// Example:</span></span><br><span class="line">	<span class="comment">// &quot;Print to console&quot;: &#123;</span></span><br><span class="line">	<span class="comment">// 	&quot;prefix&quot;: &quot;log&quot;,</span></span><br><span class="line">	<span class="comment">// 	&quot;body&quot;: [</span></span><br><span class="line">	<span class="comment">// 		&quot;console.log(&#x27;$1&#x27;);&quot;,</span></span><br><span class="line">	<span class="comment">// 		&quot;$2&quot;</span></span><br><span class="line">	<span class="comment">// 	],</span></span><br><span class="line">	<span class="comment">// 	&quot;description&quot;: &quot;Log output to console&quot;</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line">	<span class="attr">&quot;HEADER&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HEADER&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;#!/usr/bin/env python&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;# -*- encoding: utf-8 -*-&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&#x27;&#x27;&#x27;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;@文件    :$TM_FILENAME&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;@说明    :&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;@时间    :$CURRENT_YEAR/$CURRENT_MONTH/$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;@作者    :ljw&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;@版本    :1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&#x27;&#x27;&#x27;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;$0&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;if&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;if&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;if $&#123;1:expression&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;2:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for an if statement&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;if/else&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;if/else&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;if $&#123;1:condition&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;2:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;else:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for an if statement with else&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;elif&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;elif&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;elif $&#123;1:expression&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;2:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for an elif&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;else&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;else&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;else:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;1:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for an else&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;while&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;while&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;while $&#123;1:expression&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;2:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a while loop&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;while/else&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;while/else&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;while $&#123;1:expression&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;2:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;else:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a while loop with else&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;for&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;for&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;for $&#123;1:target_list&#125; in $&#123;2:expression_list&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a for loop&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;for/else&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;for/else&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;for $&#123;1:target_list&#125; in $&#123;2:expression_list&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;else:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;4:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a for loop with else&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;try/except&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;try/except&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;try:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;1:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;except $&#123;2:expression&#125; as $&#123;3:identifier&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;4:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a try/except statement&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;try/finally&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;try/finally&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;try:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;1:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;finally:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;2:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a try/finally statement&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;try/except/else&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;try/except/else&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;try:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;1:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;except $&#123;2:expression&#125; as $&#123;3:identifier&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;4:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;else:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;5:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a try/except/else statement&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;try/except/finally&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;try/except/finally&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;try:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;1:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;except $&#123;2:expression&#125; as $&#123;3:identifier&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;4:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;finally:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;5:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a try/except/finally statement&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;try/except/else/finally&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;try/except/else/finally&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;try:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;1:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;except $&#123;2:expression&#125; as $&#123;3:identifier&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;4:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;else:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;5:pass&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;finally:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;6:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a try/except/else/finally statement&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;with&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;with&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;with $&#123;1:expression&#125; as $&#123;2:target&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a with statement&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;def&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;def&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;def $&#123;1:funcname&#125;($&#123;2:parameter_list&#125;):&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t\&quot;\&quot;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:docstring&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t\&quot;\&quot;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;4:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a function definition&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;def(class method)&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;def(class method)&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;def $&#123;1:funcname&#125;(self, $&#123;2:parameter_list&#125;):&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t\&quot;\&quot;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:docstring&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t\&quot;\&quot;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;4:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a class method&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;def(static class method)&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;def(static class method)&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;@staticmethod&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;def $&#123;1:funcname&#125;($&#123;2:parameter_list&#125;):&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t\&quot;\&quot;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:docstring&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t\&quot;\&quot;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;4:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a static class method&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;def(abstract class method)&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;def(abstract class method)&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;def $&#123;1:funcname&#125;(self, $&#123;2:parameter_list&#125;):&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t\&quot;\&quot;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:docstring&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t\&quot;\&quot;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\traise NotImplementedError&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for an abstract class method&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;class&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;class $&#123;1:classname&#125;($&#123;2:object&#125;):&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t\&quot;\&quot;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:docstring&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t\&quot;\&quot;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;4:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a class definition&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;lambda&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lambda&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;lambda $&#123;1:parameter_list&#125;: $&#123;2:expression&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a lambda statement&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;if(main)&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;__main__&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;if __name__ == \&quot;__main__\&quot;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;    $&#123;1:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for a `if __name__ == \&quot;__main__\&quot;: ...` block&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;async/def&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;async/def&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;async def $&#123;1:funcname&#125;($&#123;2:parameter_list&#125;):&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:pass&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for an async statement&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;async/for&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;async/for&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;async for $&#123;1:target&#125; in $&#123;2:iter&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:block&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for an async for statement&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;async/for/else&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;async/for/else&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;async for $&#123;1:target&#125; in $&#123;2:iter&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:block&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;else:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;4:block&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for an async for statement with else&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;async/with&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;async/with&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;async with $&#123;1:expr&#125; as $&#123;2:var&#125;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;\t$&#123;3:block&#125;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for an async with statement&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;ipdb&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ipdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;import ipdb; ipdb.set_trace()&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for ipdb debug&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;pdb&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;import pdb; pdb.set_trace()&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for pdb debug&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;pudb&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pudb&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;import pudb; pudb.set_trace()&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet for pudb debug&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;add/new/cell&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;add/new/cell&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;# %%&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet to add a new cell&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;mark/markdown&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mark/markdown&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;# %% [markdown]&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code snippet to add a new markdown cell&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>python之__init__.py</title>
    <url>/m42-orion/2022/04/28/python%E4%B9%8B-init-py/</url>
    <content><![CDATA[<h2 id="神奇的-init"><a href="#神奇的-init" class="headerlink" title="神奇的__init__"></a>神奇的__init__</h2><p>__init__一般在两种情况下会出现，第一种是以在class（类）当中以函数形式出现，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br></pre></td></tr></table></figure>

<p>第二种情况则是以__init__.py文件的形式出现在文件夹下。两种不同的情况虽然使用了相同名字的定义，但是其作用可以说类似又可以说不同。</p>
<h2 id="def-init-self"><a href="#def-init-self" class="headerlink" title="def __init__(self)"></a><code>def __init__(self)</code></h2><p>__init__属于魔法函数的一种,之所以说是一种其原因是因为魔法函数是一个大家族，常见的：<code>__ str__()、__ new__()、__ unicode__()、__ call__()、__ len__()、__repr__()</code>等等都是魔法函数，</p>
<h3 id="什么是魔法函数？"><a href="#什么是魔法函数？" class="headerlink" title="什么是魔法函数？"></a>什么是魔法函数？</h3><p>魔法函数一种python的高级用法，一般情况下不是很常见，魔法函数允许使用者在定义类的时候将其绑定在其中，一般格式以两个下划线开始并以两个下划线结束。以<code>__init__</code>为例，该函数允许在实例化类的时候给变量申请内存空间并赋予初始值，有时候我们会将其称之为构造函数。</p>
<p>魔法函数具有以下特点：  </p>
<ul>
<li>Python中以双下划线(<strong>xx</strong>)开始和结束的函数（不可自己定义）为魔法函数。</li>
<li>调用类实例化的对象的方法时自动调用魔法函数。</li>
<li>在自己定义的类中，可以实现之前的内置函数。</li>
</ul>
<h3 id="init-是什么？"><a href="#init-是什么？" class="headerlink" title="__init__是什么？"></a><code>__init__</code>是什么？</h3><p><code>__init__</code>函数存在于class当中，可以包含多个参数，但是必须有一个self作为参数，<code>__init__</code>的存在使得函数在初始化的时候就能够给对象当中的参数进行初始化并赋值，在初始化的时候程序会自动调用该函数，于此同事，如果设置了<code>__init__</code>的参数，在实例化的时候如果不给定参数也是错误的。当然，<code>__init__</code>也是作为类的私有函数存在，所以在实例化之后是无法被外部调用的。</p>
<h2 id="init-py"><a href="#init-py" class="headerlink" title="__init__.py"></a><code>__init__.py</code></h2><p><code>__init__</code>函数可以当中构造函数来理解，但是<code>__init__.py</code>却不是那么容易理解。</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>常见的说法会将其描述成为：<code>__init__.py</code> 文件的作用是将文件夹变为一个Python模块,Python 中的每个模块的包中，都有<code>__init__.py</code> 文件。  </p>
<hr>
<p>但是直接跳到python模块上来，这样的理解未免太过于快了，以至于很多人不能够理解。因此我打算在这里只说用法方便于理解。</p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>假设现在有这样一个目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">│</span><br><span class="line">├─model</span><br><span class="line">│      info.py   </span><br><span class="line">│</span><br><span class="line">test.py</span><br></pre></td></tr></table></figure>

<p>现在model.py文件当中的代码是这样的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">param</span>):</span><br><span class="line">    <span class="keyword">return</span> param</span><br></pre></td></tr></table></figure>

<p>那么问题来了，我们该怎么去调用model.py文件当中的变量？  </p>
<hr>
<p>以前的方法是<code>from model.model import * </code>,但是如果，下面不止这一个文件呢？万一这个目录下有很多个文件呢？我们再去一个个去调用，未免太过于难受了。<br>但是如果我们在model目录下添加一个<code>__init__.py</code>文件，在文件当中写入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .info <span class="keyword">import</span> test</span><br><span class="line"></span><br><span class="line">test = test</span><br></pre></td></tr></table></figure>

<p>然后在<code>test.py</code>文件当中写入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> model</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(model.test(<span class="string">&#x27;a&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>这样就能够直接调用了。发现端倪了吗？这里我们使用的就是<code>import model</code>,没有指定那一个文件啊，按照一般的想法不应该是<code>import model.__init__</code>吗？<br>这就是所谓的将文件夹变成一个模块的含义，<code>__init__.py</code>文件的存在能够管理该文件夹下面的所有文件，并且通过<code>__init__.py</code>文件导入的形式，在调用文件夹的时候自动调用<code>__init__.py</code>文件下管理文件当中的对象。但是这样的做法有什么含义？用处在于什么？用其他文件不能实现吗？</p>
<hr>
<p>首先，这样能够更加有效的管理文件夹下面的文件，对于使用者来说能够将文件夹当作一个封闭的包使用，不用担心导入存在的路径问题，在封装跟打包的时候也能够保证调用的可靠性。当然其他随便写个文件也能够实现类似的功能，但是使用起来完全没有<code>__init__.py</code>文件方便，并且可能存在未知的导入出错问题。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode离线远程开发配置</title>
    <url>/m42-orion/2022/04/25/vscode%E7%A6%BB%E7%BA%BF%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>由于各种原因，在开发过程当中需要做到网络的物理隔绝，因此离线部署环境或者部署开发工具就成为了面临的重大难题，尤其是当需要配置vscode离线远程开发的时候。当然使用pycharm可能不需要这么麻烦，但是个人习惯导致自己觉得vscode更加顺手，同时也更加美观，在后续的vscode更新当中丰富的插件也让我难以割舍，因此配置离线环境下vscode的远程安装就成了一大难题。  </p>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="下载VScode"><a href="#下载VScode" class="headerlink" title="下载VScode"></a>下载VScode</h3><p>首先在Vscode官网：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a> 点击下载；在浏览器或者下载软件中就可以看到一个下载地址如下图所示，由于国内下载速度非常缓慢，可以将图中红框内的链接部分：az764295.vo.msecnd.net替换为国内镜像：vscode.cdn.azure.cn来提升下载速度。</p>
<h3 id="插件下载与安装"><a href="#插件下载与安装" class="headerlink" title="插件下载与安装"></a>插件下载与安装</h3><p>在插件商店搜索插件，直接点击这里就能跳转到插件的页面上去，页面上提供离线包的下载，直接下载就行。<br><img src="https://liu__tao.gitee.io/drawing-bed/blog_img/vscode%E7%A6%BB%E7%BA%BF%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE/%E7%82%B9%E5%87%BB.png" alt="点击"></p>
<blockquote>
<p><strong>注意：</strong>插件伴随着vscode版本的更新而更新，因此需要注意版本的对应关系。</p>
</blockquote>
<h3 id="插件的离线安装"><a href="#插件的离线安装" class="headerlink" title="插件的离线安装"></a>插件的离线安装</h3><p>离线安装如下，选中安装包即可<br><img src="https://liu__tao.gitee.io/drawing-bed/blog_img/vscode%E7%A6%BB%E7%BA%BF%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE/%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85.png" alt="离线安装"></p>
<h3 id="配置远程开发环境"><a href="#配置远程开发环境" class="headerlink" title="配置远程开发环境"></a>配置远程开发环境</h3><p>在离线状态下，除了需要下载<code>remote-ssh</code>跟<code>Remote - SSH: Editing Configuration Files</code>两个插件以外，还需要下载远程包。即所需依赖包vscode-server-linux-x64.tar.gz，下载链接为：<br><a href="https://update.code.visualstudio.com/commit:[id]/server-linux-x64/stable">https://update.code.visualstudio.com/commit:[id]/server-linux-x64/stable</a><br>其中[id]用所使用的vscode commit ID进行替换，id在帮助-&gt;关于-&gt;提交，则完整下载链接应为如下案例：<br><a href="https://update.code.visualstudio.com/commit:507ce72a4466fbb27b715c3722558bb15afa9f48/server-linux-x64/stable">https://update.code.visualstudio.com/commit:507ce72a4466fbb27b715c3722558bb15afa9f48/server-linux-x64/stable</a></p>
<h3 id="远程配置"><a href="#远程配置" class="headerlink" title="远程配置"></a>远程配置</h3><ul>
<li><p>将下载好的依赖包复制到远程linux服务器用户目录下；</p>
</li>
<li><p>登录linux服务器，在用户目录下执行以下命令：</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> .vscode-server</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> .vscode-server</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">mv</span> ~/vscode-server-linux-x64.tar.gz bin/</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> bin</span><br><span class="line"></span><br><span class="line">tar -zxvf vscode-server-linux-x64.tar</span><br><span class="line"></span><br><span class="line"><span class="built_in">mv</span> vscode-server-linux-x64 [<span class="built_in">id</span>] （注：[<span class="built_in">id</span>]为自己vscode的commit ID。）</span><br></pre></td></tr></table></figure>

<h2 id="收尾"><a href="#收尾" class="headerlink" title="收尾"></a>收尾</h2><p>如此配置完之后就能够正常连接远程服务器了。过程当中需要注意以下几个点：</p>
<ul>
<li>目录文件不要通过尝试连接的方式去生成，要自己创建</li>
<li>如果始终连不上思考是否是<code>vscode-server-linux-x64.tar.gz</code>的id版本不同</li>
<li>连接过程当中注意用户与端口的对应关系</li>
<li>连接成功之后远程上是没有插件的，需要上传插件到服务器进程远程安装</li>
</ul>
]]></content>
      <categories>
        <category>琐事</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>python数据校验</title>
    <url>/m42-orion/2022/04/24/python%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C/</url>
    <content><![CDATA[<h2 id="什么是数据校验？"><a href="#什么是数据校验？" class="headerlink" title="什么是数据校验？"></a>什么是数据校验？</h2><p>在实际的开发过程当中，我们往往会面临很多需要数据对接的情况，这时候一个函数可能需要处理一个或者多个数据参数，也就是说函数的参数面临着多且不确定性，参数本身不确定性还伴随着在传递过程当中是否符合规范的问题。以python函数为例，以下是随意写法和标准写法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 随意</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">max</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">if</span> a&gt;b:</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">elif</span> a&lt;b:</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建议的标准写法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">max</span>(<span class="params">a:<span class="built_in">int</span>=<span class="number">0</span>,</span></span><br><span class="line"><span class="params">        b:<span class="built_in">int</span>=<span class="number">0</span></span>)-&gt;<span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    这里描述函数的功能</span></span><br><span class="line"><span class="string">    :param a: 参数描述</span></span><br><span class="line"><span class="string">    :param b: 参数描述</span></span><br><span class="line"><span class="string">    :returns: 返回描述</span></span><br><span class="line"><span class="string">    :raises keyError: 可能的错误捕获描述</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> a&gt;b:</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">elif</span> a&lt;b:</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>除此之外还有<code>def exmaple2(required_arg, *arg, **kwarg):</code>这样的写法，这些写法都是在极力是的python的函数与参数信息更加明确，让调用函数的时候能够清楚的知道函数的作用。<br>由于需求的复杂逐步增加，因此数据接口从原先的单纯的写法升级为固定规则，需要一些额外的协助手段才能够帮助使用者规范接口，<code>pydantic</code>库的出现极大程度的解决了这些问题。</p>
<h2 id="pydantic库的基础"><a href="#pydantic库的基础" class="headerlink" title="pydantic库的基础"></a>pydantic库的基础</h2><h3 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h3><h4 id="schema基本定义方法"><a href="#schema基本定义方法" class="headerlink" title="schema基本定义方法"></a>schema基本定义方法</h4><p>pydantic库的数据定义方式是通过BaseModel类来进行定义的，所有基于pydantic的数据类型本质上都是一个BaseModel类，它最基本的使用方式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name: <span class="built_in">str</span></span><br></pre></td></tr></table></figure>

<h4 id="基本的schema实例化方法"><a href="#基本的schema实例化方法" class="headerlink" title="基本的schema实例化方法"></a>基本的schema实例化方法</h4><p>调用时，我们只需要对其进行实例化即可，实例化方法有以下几种：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#直接传值</span></span><br><span class="line">p = Person(name=<span class="string">&quot;Tom&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(p.json()) <span class="comment"># &#123;&quot;name&quot;: &quot;Tom&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过字典传入</span></span><br><span class="line">p = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Tom&quot;</span>&#125;</span><br><span class="line">p = Person(**p)</span><br><span class="line"><span class="built_in">print</span>(p.json()) <span class="comment"># &#123;&quot;name&quot;: &quot;Tom&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过其他的实例化对象传入</span></span><br><span class="line">p2 = Person.copy(p)</span><br><span class="line"><span class="built_in">print</span>(p2.json()) <span class="comment"># &#123;&quot;name&quot;: &quot;Tom&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<p>当传入值错误的时候，pydantic就会抛出报错，例如：<code>Person(person=&quot;Tom&quot;)</code> ;pydantic会抛出异常;另一方面，如果传入值多于定义值时，BaseModel也会自动对其进行过滤。如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = Person(name=<span class="string">&quot;Tom&quot;</span>, gender=<span class="string">&quot;man&quot;</span>, age=<span class="number">24</span>)</span><br><span class="line"><span class="built_in">print</span>(p.json()) <span class="comment"># &#123;&quot;name&quot;: &quot;Tom&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<p>可以看到，额外的参数gender与age都被自动过滤了。通过这种方式，数据的传递将会更为安全，但是，同样的，这也要求我们在前期的schema定义中必须要尽可能地定义完全。此外，pydantic在数据传输时会直接进行数据类型转换，因此，如果数据传输格式错误，但是可以通过转换变换为正确的数据类型是，数据传输也可以成功，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = Person(name=<span class="number">123</span>)</span><br><span class="line"><span class="built_in">print</span>(p.json()) <span class="comment"># &#123;&quot;name&quot;: &quot;123&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="pydantic基本数据类型"><a href="#pydantic基本数据类型" class="headerlink" title="pydantic基本数据类型"></a>pydantic基本数据类型</h4><p>下面，我们来看一下pydantic中的一些常用的基本类型。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Dict</span>, <span class="type">List</span>, <span class="type">Sequence</span>, <span class="type">Set</span>, <span class="type">Tuple</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    a: <span class="built_in">int</span> <span class="comment"># 整型</span></span><br><span class="line">    b: <span class="built_in">float</span> <span class="comment"># 浮点型</span></span><br><span class="line">    c: <span class="built_in">str</span> <span class="comment"># 字符串</span></span><br><span class="line">    d: <span class="built_in">bool</span> <span class="comment"># 布尔型</span></span><br><span class="line">    e: <span class="type">List</span>[<span class="built_in">int</span>] <span class="comment"># 整型列表</span></span><br><span class="line">    f: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">int</span>] <span class="comment"># 字典型，key为str，value为int</span></span><br><span class="line">    g: <span class="type">Set</span>[<span class="built_in">int</span>] <span class="comment"># 集合</span></span><br><span class="line">    h: <span class="type">Tuple</span>[<span class="built_in">str</span>, <span class="built_in">int</span>] <span class="comment"># 元组</span></span><br></pre></td></tr></table></figure>

<p>以上都是基础的使用，在实际使用过程当中，可以参考官方文档，会给出更加详细的写法。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>数据校验常常使用在需要被绑定在一起的复杂数据之上，也用于数据传递的校验，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span>  <span class="comment"># 无默认值，必填字段</span></span><br><span class="line">    name = <span class="string">&#x27;John Doe&#x27;</span>  <span class="comment"># 有默认值，选填字段</span></span><br><span class="line">    signup_ts: <span class="type">Optional</span>[datetime] = <span class="literal">None</span>  <span class="comment"># 选填字段</span></span><br><span class="line">    friends: <span class="type">List</span>[<span class="built_in">int</span>] = []  <span class="comment"># 列表中的元素是int类型或者是可以转换成int类型的其他类型</span></span><br><span class="line"></span><br><span class="line">error_data = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;a123&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;signup_ts&#x27;</span>: <span class="string">&#x27;2017-06-01 12:22&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;friends&#x27;</span>: [<span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    User(**error_data)</span><br><span class="line"><span class="keyword">except</span> ValidationError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e.json())</span><br></pre></td></tr></table></figure>

<p>这个案例展示了数据在接受错误参数的时候进行的自动校验，这样在数据十分复杂的情况下的时候就能够及时的判定数据是否传输异常而不是去一个个检查数据的状态。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这是一个规范性的问题，不需要太多总结，反而需要足够的代码经验去填补这方面经验的缺失。个人也注意到这个问题，因此写下一篇超短的文章记录一下。<br>最后附上官网地址，只有全英文的：<a href="https://pydantic-docs.helpmanual.io/">https://pydantic-docs.helpmanual.io/</a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>详解post与get</title>
    <url>/m42-orion/2022/04/23/%E8%AF%A6%E8%A7%A3post%E4%B8%8Eget/</url>
    <content><![CDATA[<h2 id="POST和GET"><a href="#POST和GET" class="headerlink" title="POST和GET"></a>POST和GET</h2><p>网络请求有OPTIONS、HEAD、GET、POST、PUT、DELETE、TRACE、CONNECT这常见的几种方式，其中最常见也就是post与get方法，在开发过程当中常常会遇到一个问题，这个接口到底是使用post请求好一点还是使用get请求好一点？两者到底有什么区别？这篇文章就将给出对应的解释。</p>
<h2 id="对post与get区别的错误理解"><a href="#对post与get区别的错误理解" class="headerlink" title="对post与get区别的错误理解"></a>对post与get区别的错误理解</h2><h3 id="get安全性非常低，post安全性较高"><a href="#get安全性非常低，post安全性较高" class="headerlink" title="get安全性非常低，post安全性较高"></a>get安全性非常低，post安全性较高</h3><p>一般来说，在对新手上手的时候会跟他说这样的话，并说get是能够明文看见的，但是post不行…这个说法是有一定道理的，对于完全不知道情况的普通用户来说，安全一点确实有道理，因为从浏览器的地址上确实看不到post请求的参数，url链接也变短了，但是不代表数据被完全隐藏，实际上通过简单的开发者工具抓包就能够看到明文数据。因此某些极小的点上可以说安全，但是实际上可能并不安全。 </p>
<h3 id="get传送的数据量较小，不能大于2KB。post传送的数据量较大，一般被默认为不受限制。"><a href="#get传送的数据量较小，不能大于2KB。post传送的数据量较大，一般被默认为不受限制。" class="headerlink" title="get传送的数据量较小，不能大于2KB。post传送的数据量较大，一般被默认为不受限制。"></a>get传送的数据量较小，不能大于2KB。post传送的数据量较大，一般被默认为不受限制。</h3><p>这个说法其实是指当我们使用get请求的时候，参数会直接被显示在url当中如：<code>https://www.duitang.com/blog/?id=1121578266</code>。这里的参数id尚且为int，如果为中文需要url编码，以至于链接会非常的长，这个长度是有限制的，这个限制却不是get方法的限制，之所以限制是浏览器跟服务器的限制，两者为了防止链接太长导致解析压力过大影响用户体验，所以才加以限制。相对的post确实不用在意大小，因为参数传输方式不同导致解析压力并不大。</p>
<h2 id="get和post的区别"><a href="#get和post的区别" class="headerlink" title="get和post的区别"></a>get和post的区别</h2><h3 id="get获取数据，post提交数据。"><a href="#get获取数据，post提交数据。" class="headerlink" title="get获取数据，post提交数据。"></a>get获取数据，post提交数据。</h3><p>这是从语义上进行的理解，即get与post的中文翻译，其实HTTP的八种方法都能够携带参数，服务器拿到参数之后想做什么完全由服务器决定而非由请求方法决定，但是在设计之初就给出建议让get承担获取数据，让post承担提交数据的功能。</p>
<p>注：HTTP请求，最初设定了八种方法。这八种方法本质上没有任何区别。只是让请求，更加有语义而已。</p>
<ul>
<li><strong>OPTIONS</strong> 返回服务器所支持的请求方法</li>
<li><strong>GET</strong> 向服务器获取指定资源</li>
<li><strong>HEAD</strong> 与GET一致，只不过响应体不返回，只返回响应头</li>
<li><strong>POST</strong> 向服务器提交数据，数据放在请求体里</li>
<li><strong>PUT</strong> 与POST相似，只是具有幂等特性，一般用于更新</li>
<li><strong>DELETE</strong> 删除服务器指定资源</li>
<li><strong>TRACE</strong> 回显服务器端收到的请求，测试的时候会用到这个</li>
<li><strong>CONNECT</strong> 预留，暂无使用</li>
</ul>
<h3 id="数据传输编码不同"><a href="#数据传输编码不同" class="headerlink" title="数据传输编码不同"></a>数据传输编码不同</h3><p>Get限制Form表单的数据集的值必须为ASCII字符，因此当出现不属于ASCII编码的字符在get请求当中的时候，必须对链接进行编码，常见的如果链接当中出现空格，链接上会把空格编码成%20，不信可以粘贴以下链接到浏览器，看看链接发生的变化： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://www.baidu.com/s?wd=hello world</span><br><span class="line"><span class="comment"># 以下是浏览器编码后的结果</span></span><br><span class="line">https://www.baidu.com/s?wd=hello%20world</span><br></pre></td></tr></table></figure>

<p>Post相比get支持整个ISO10646字符集,能够有更多的数据格式的兼容，因此使用起来会更加的方便，但是测试起来可能不是很方便。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>Get执行效率却比Post方法好。</li>
<li>Get是form提交的默认方法。</li>
<li>GET在浏览器回退时是无害的，而POST会再次提交请求。 </li>
<li>历史记录不能够保存post的参数，却能够保存get的请求参数。</li>
<li>POST用于修改服务器上的数据，有副作用，非幂等。</li>
</ul>
<h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><p>代码采用fastpai进行演示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_root</span>():</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;Hello&quot;</span>: <span class="string">&quot;World&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>(<span class="title class_ inherited__">BaseModel</span>):  <span class="comment"># 继承了BaseModel，定义了People的数据格式</span></span><br><span class="line">    name: <span class="built_in">str</span> = <span class="literal">None</span>  <span class="comment"># 默认了name的值为None</span></span><br><span class="line">    age: <span class="built_in">int</span> = <span class="number">18</span>  <span class="comment"># 默认了age为18</span></span><br><span class="line">    sex: <span class="built_in">str</span> = <span class="string">&quot;renyao&quot;</span>  <span class="comment"># 默认了sex为renyao</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/fastapi/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">postdate</span>(<span class="params">people: People</span>):  <span class="comment"># 传入一个People类型的参数people</span></span><br><span class="line">    <span class="keyword">return</span> people</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    uvicorn.run(<span class="string">&quot;test:app&quot;</span>, host=<span class="string">&quot;localhost&quot;</span>, port=<span class="number">5000</span>, log_level=<span class="string">&quot;info&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>可以postget在设计上的确具有很多差异，但是实际使用的时候两者都能够满足传参的需求，但是为了标准，尽可能的使用get用于获取数据，用post提交数据。百度搜索采用的就是get获取数据，而几乎所有的账户登录都是post用于提交数据。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>协议</tag>
      </tags>
  </entry>
  <entry>
    <title>装饰器</title>
    <url>/m42-orion/2022/04/29/%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython.core.interactiveshell <span class="keyword">import</span> InteractiveShell</span><br><span class="line">InteractiveShell.ast_node_interactivity = <span class="string">&#x27;all&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="装饰器-Decorators"><a href="#装饰器-Decorators" class="headerlink" title="装饰器(Decorators)"></a>装饰器(Decorators)</h2><p>装饰器(Decorators)是 Python 的一个重要部分。简单地说：他们是修改其他函数的功能的函数。他们有助于让我们的代码更简短，也更Pythonic（Python范儿）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hi</span>(<span class="params">name=<span class="string">&quot; world&quot;</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span> + name</span><br><span class="line">hi()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 我们甚至可以将一个函数赋值给一个变量，比如</span></span><br><span class="line">greet = hi</span><br><span class="line"><span class="comment"># 我们这里没有在使用小括号，因为并不是在调用hi函数</span></span><br><span class="line"><span class="comment"># 而是在将它放在greet变量里头。尝试运行下这个</span></span><br><span class="line">greet()</span><br><span class="line"><span class="comment"># 如果删掉旧的hi函数</span></span><br><span class="line"><span class="keyword">del</span> hi</span><br><span class="line"><span class="comment"># hi() # 报错</span></span><br><span class="line"> </span><br><span class="line">greet()</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="在函数中定义函数"><a href="#在函数中定义函数" class="headerlink" title="在函数中定义函数"></a>在函数中定义函数</h2><p>刚才那些就是函数的基本知识了。我们来让你的知识更进一步。在 Python 中我们可以在一个函数中定义另一个函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">testfunction</span>(<span class="params">parameter=<span class="string">&quot;info&quot;</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;现在会调用里层函数&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">greet</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;greet函数被调用&quot;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">welcome</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;welcome函数被调用&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gentleman</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;gentleman函数被调用&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(greet())</span><br><span class="line">    <span class="built_in">print</span>(welcome())</span><br><span class="line">    gentleman()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;函数调用结束&quot;</span>)</span><br><span class="line"> </span><br><span class="line">testfunction()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 上面展示了无论何时调用hi(), greet()和welcome()将会同时被调用。</span></span><br><span class="line"><span class="comment"># 然后greet()和welcome()函数在hi()函数之外是不能访问的，比如：</span></span><br><span class="line"><span class="comment"># welcome()</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">现在会调用里层函数</span><br><span class="line">greet函数被调用</span><br><span class="line">welcome函数被调用</span><br><span class="line">gentleman函数被调用</span><br><span class="line">函数调用结束</span><br></pre></td></tr></table></figure>

<p>可以在函数中定义另外的函数。也就是说可以创建嵌套的函数。现在需要再多学一点，就是函数也能返回函数。</p>
<h2 id="从函数中返回函数"><a href="#从函数中返回函数" class="headerlink" title="从函数中返回函数"></a>从函数中返回函数</h2><p>其实并不需要在一个函数里去执行另一个函数，我们也可以将其作为输出返回出来：  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">testfunction</span>(<span class="params">parameter=<span class="string">&quot;info&quot;</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">greet</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;greet函数被调用&quot;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">welcome</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;welcome函数被调用&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> parameter == <span class="string">&quot;info&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> greet</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> welcome</span><br><span class="line"></span><br><span class="line">a = testfunction()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment">#outputs: &lt;function greet at 0x7f2143c01500&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#上面清晰地展示了`a`现在指向到hi()函数中的greet()函数</span></span><br><span class="line"><span class="comment">#现在试试这个</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a())</span><br><span class="line">testfunction()()</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">function</span> testfunction.&lt;locals&gt;.greet at 0x7f9e00638f28&gt;</span><br><span class="line">greet函数被调用</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;greet函数被调用&#x27;</span></span><br></pre></td></tr></table></figure>

<p>再次看看这个代码。在if/else语句中返回greet和welcome，而不是greet()和welcome()。<br>当把一对小括号放在后面，这个函数就会执行；然而如果不放括号在它后面，那它可以被到处传递，并且可以赋值给别的变量而不去执行它。<br>再稍微多解释点细节:<br>当我们写下a = testfunction()，testfunction()会被执行，而由于name参数默认是info，所以函数greet被返回了。如果我们把语句改为a = testfunction(name = “Alice”)，那么welcome函数将被返回。<br>我们还可以打印出testfunction()()，这会输出greet函数被调用。</p>
<h2 id="将函数作为参数传给另一个函数"><a href="#将函数作为参数传给另一个函数" class="headerlink" title="将函数作为参数传给另一个函数"></a>将函数作为参数传给另一个函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">testfunction</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Do_Something_Before_testfunction</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am doing some boring work before executing hi()&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(func())</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Do_Something_Before_testfunction(testfunction)</span><br><span class="line">I am doing some boring work before executing hi()</span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure>

<p>现在已经具备所有必需知识来学习装饰器是什么了,装饰器让你在一个函数的前后去执行代码。</p>
<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">function1</span>(<span class="params">a_func</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapTheFunction</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;在执行a_func()之前我正在做一些无聊的工作&quot;</span>)</span><br><span class="line"></span><br><span class="line">        a_func()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;在执行a_func()之后我正在做一些无聊的工作&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapTheFunction</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">function2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;函数2的输出&quot;</span>)</span><br><span class="line"></span><br><span class="line">function2()</span><br><span class="line"><span class="comment">#outputs: &quot;I am the function which needs some decoration to remove my foul smell&quot;</span></span><br><span class="line"></span><br><span class="line">function2 = function1(function2)</span><br><span class="line"><span class="comment">#现在function2被function1包装了</span></span><br><span class="line"></span><br><span class="line">function2()</span><br><span class="line"><span class="comment">#outputs:I am doing some boring work before executing a_func()</span></span><br><span class="line"><span class="comment">#        I am the function which needs some decoration to remove my foul smell</span></span><br><span class="line"><span class="comment">#        I am doing some boring work after executing a_func()</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">函数2的输出</span><br><span class="line">在执行a_func()之前我正在做一些无聊的工作</span><br><span class="line">函数2的输出</span><br><span class="line">在执行a_func()之后我正在做一些无聊的工作</span><br><span class="line">刚刚应用了之前学习到的原理。这正是python中装饰器做的事情！它封装一个函数，并且用这样或者那样的方式来修改它的行为。</span><br><span class="line">现在也许疑惑，在代码里并没有使用@符号？只是一个简短的方式来生成一个被装饰的函数。这里是我们如何使用@来运行之前的代码：</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@function1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a_function_requiring_decoration</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Hey you! Decorate me!&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am the function which needs some decoration to &quot;</span></span><br><span class="line">          <span class="string">&quot;remove my foul smell&quot;</span>)</span><br><span class="line"></span><br><span class="line">a_function_requiring_decoration()</span><br><span class="line"><span class="comment">#outputs: I am doing some boring work before executing a_func()</span></span><br><span class="line"><span class="comment">#         I am the function which needs some decoration to remove my foul smell</span></span><br><span class="line"><span class="comment">#         I am doing some boring work after executing a_func()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#@a_new_decorator就是下面这种方式的简写:</span></span><br><span class="line">a_function_requiring_decoration = function1(a_function_requiring_decoration)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">在执行a_func()之前我正在做一些无聊的工作</span><br><span class="line">I am the <span class="keyword">function</span> <span class="built_in">which</span> needs some decoration to remove my foul smell</span><br><span class="line">在执行a_func()之后我正在做一些无聊的工作</span><br></pre></td></tr></table></figure>

<p>希望现在对Python装饰器的工作原理有一个基本的理解。如果运行如下代码会存在一个问题：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(a_function_requiring_decoration.__name__)</span><br><span class="line"><span class="comment"># Output: wrapTheFunction</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wrapTheFunction</span><br></pre></td></tr></table></figure>

<p>这并不是想要的！Ouput输出应该是a_function_requiring_decoration。这里的函数被warpTheFunction替代了。它重写了函数的名字和注释文档(docstring)。幸运的是Python提供给一个简单的函数来解决这个问题，那就是functools.wraps。修改上一个例子来使用functools.wraps：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a_new_decorator</span>(<span class="params">a_func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">a_func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapTheFunction</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am doing some boring work before executing a_func()&quot;</span>)</span><br><span class="line">        a_func()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am doing some boring work after executing a_func()&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapTheFunction</span><br><span class="line"></span><br><span class="line"><span class="meta">@a_new_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a_function_requiring_decoration</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Hey yo! Decorate me!&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am the function which needs some decoration to &quot;</span></span><br><span class="line">          <span class="string">&quot;remove my foul smell&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a_function_requiring_decoration.__name__)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Output: a_function_requiring_decoration</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a_function_requiring_decoration</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decorator_name</span>(<span class="params">f</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">f</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorated</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> can_run:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Function will not run&quot;</span></span><br><span class="line">        <span class="keyword">return</span> f(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> decorated</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator_name</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">return</span>(<span class="string">&quot;Function is running&quot;</span>)</span><br><span class="line"></span><br><span class="line">can_run = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(func())</span><br><span class="line"><span class="comment"># Output: Function is running</span></span><br><span class="line"></span><br><span class="line">can_run = <span class="literal">False</span></span><br><span class="line"><span class="built_in">print</span>(func())</span><br><span class="line"><span class="comment"># Output: Function will not run</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Function is running</span><br><span class="line">Function will not run</span><br></pre></td></tr></table></figure>

<p>注意： @wraps接受一个函数来进行装饰，并加入了复制函数名称、注释文档、参数列表等等的功能。这可以让我们在装饰器里面访问在装饰之前的函数的属性。<br>装饰器在某些地方特别耀眼，使用它可以让一些事情管理起来变得更简单。<br>装饰器可以用于日志管理<br>装饰器可以监控函数运行之前的状态，捕捉函数的运行情况，传入参数等等</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logit</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">with_logging</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(func.__name__ + <span class="string">&quot; was called&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> with_logging</span><br><span class="line"></span><br><span class="line"><span class="meta">@logit</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addition_func</span>(<span class="params">x</span>):</span><br><span class="line">   <span class="string">&quot;&quot;&quot;Do some math.&quot;&quot;&quot;</span></span><br><span class="line">   <span class="keyword">return</span> x + x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = addition_func(<span class="number">4</span>)</span><br><span class="line"><span class="comment"># Output: addition_func was called</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">addition_func was called</span><br></pre></td></tr></table></figure>

<h2 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h2><p>来想想这个问题，难道@wraps不也是个装饰器吗？<br>但是，它接收一个参数，就像任何普通的函数能做的那样。那么，为什么我们不也那样做呢？<br>这是因为，当使用@my_decorator语法时，是在应用一个以单个函数作为参数的一个包裹函数。记住，Python里每个东西都是一个对象，而且这包括函数！<br>记住了这些，我们可以编写一个能返回一个包裹函数的函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logit</span>(<span class="params">logfile=<span class="string">&#x27;out.log&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">logging_decorator</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">        @wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapped_function</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            log_string = func.__name__ + <span class="string">&quot; was called&quot;</span></span><br><span class="line">            <span class="built_in">print</span>(log_string)</span><br><span class="line">            <span class="comment"># 打开logfile，并写入内容</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(logfile, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> opened_file:</span><br><span class="line">                <span class="comment"># 现在将日志打到指定的logfile</span></span><br><span class="line">                opened_file.write(log_string + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wrapped_function</span><br><span class="line">    <span class="keyword">return</span> logging_decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@logit()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfunc1</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">myfunc1()</span><br><span class="line"><span class="comment"># Output: myfunc1 was called</span></span><br><span class="line"><span class="comment"># 现在一个叫做 out.log 的文件出现了，里面的内容就是上面的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@logit(<span class="params">logfile=<span class="string">&#x27;func2.log&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfunc2</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">myfunc2()</span><br><span class="line"><span class="comment"># Output: myfunc2 was called</span></span><br><span class="line"><span class="comment"># 现在一个叫做 func2.log 的文件出现了，里面的内容就是上面的字符串</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">myfunc1 was called</span><br><span class="line">myfunc2 was called</span><br></pre></td></tr></table></figure>

<h2 id="装饰器类"><a href="#装饰器类" class="headerlink" title="装饰器类"></a>装饰器类</h2><p>现在有了能用于正式环境的logit装饰器，但当应用的某些部分还比较脆弱时，异常也许是需要更紧急关注的事情。比方说有时想打日志到一个文件。而有时想把引起你注意的问题发送到一个email，同时也保留日志，留个记录。这是一个使用继承的场景，但目前为止只看到过用来构建装饰器的函数。<br>幸运的是，类也可以用来构建装饰器。那现在以一个类而不是一个函数的方式，来重新构建logit。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">logit</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, logfile=<span class="string">&#x27;out.log&#x27;</span></span>):</span><br><span class="line">        self.logfile = logfile</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, func</span>):<span class="comment">#类的特殊成员</span></span><br><span class="line"><span class="meta">        @wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapped_function</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            log_string = func.__name__ + <span class="string">&quot; was called&quot;</span></span><br><span class="line">            <span class="built_in">print</span>(log_string)</span><br><span class="line">            <span class="comment"># 打开logfile并写入</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(self.logfile, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> opened_file:</span><br><span class="line">                <span class="comment"># 现在将日志打到指定的文件</span></span><br><span class="line">                opened_file.write(log_string + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="comment"># 现在，发送一个通知</span></span><br><span class="line">            self.notify()</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wrapped_function</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">notify</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># logit只打日志，不做别的</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;打印日志&quot;</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>这个实现有一个附加优势，在于比嵌套函数的方式更加整洁，而且包裹一个函数还是使用跟以前一样的语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@logit()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfunc1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始&quot;</span>)</span><br><span class="line"></span><br><span class="line">myfunc1()</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">myfunc1 was called</span><br><span class="line">打印日志</span><br><span class="line">开始</span><br></pre></td></tr></table></figure>

<p>现在，我们给logit创建子类，来添加新的功能。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">email_logit</span>(<span class="title class_ inherited__">logit</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    一个logit的实现版本，可以在函数调用时发送email给管理员</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, email=<span class="string">&#x27;admin@myproject.com&#x27;</span>, *args, **kwargs</span>):</span><br><span class="line">        self.email = email</span><br><span class="line">        <span class="built_in">super</span>(email_logit, self).__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">notify</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 发送一封email到self.email</span></span><br><span class="line">        <span class="comment"># 这里就不做实现了</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;假设已经发送了邮件&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@email_logit()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfunc1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始&quot;</span>)</span><br><span class="line"></span><br><span class="line">myfunc1()</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">myfunc1 was called</span><br><span class="line">假设已经发送了邮件</span><br><span class="line">开始</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>python之类型提示</title>
    <url>/m42-orion/2022/04/30/python%E4%B9%8B%E7%B1%BB%E5%9E%8B%E6%8F%90%E7%A4%BA/</url>
    <content><![CDATA[<p>Python 3.6+ 版本加入了对”类型提示”的支持。通过声明变量的类型，编辑器和一些工具能给你提供更好的支持。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>当我们在使用python写一段代码的时候，如果遇到下面这种情况：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">funcname</span>(<span class="params">param1,param2</span>):</span><br><span class="line">    <span class="built_in">print</span>(param1.split(<span class="string">&#x27;&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>如果我们想要对函数传递的某些参数进行一些操作的话，在使用一些内置方法的时候，我们通常会依赖python的联想功能，但是在这种情况下，一切都不管用，因为编辑器根本不知道参数是什么类型，所以更不知道可以做什么操作。就像下面这样:</p>
<p><img src="https://liu__tao.gitee.io/drawing-bed/blog_img/python%E4%B9%8B%E7%B1%BB%E5%9E%8B%E6%8F%90%E7%A4%BA/1.png" alt="失败情况"></p>
<p>但是，我们加上类型提示之后，一切都会变得不一样。而所谓的类型提示就是告诉编辑器，这到底是一个什么类型的参数，如下：</p>
<p><img src="https://liu__tao.gitee.io/drawing-bed/blog_img/python%E4%B9%8B%E7%B1%BB%E5%9E%8B%E6%8F%90%E7%A4%BA/2.png" alt="失败情况"></p>
<p>这样我们就能够正确的去实现编辑器的联想功能了。但是….类型提示仅限于此吗？并非如此，类型提示可以帮助我们规范参数类型，自动过滤某些非法参数，防止SQL注入等安全问题。</p>
<h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><h3 id="普通类型"><a href="#普通类型" class="headerlink" title="普通类型"></a>普通类型</h3><p>普通类型即我们常见的类型，如：int、float、bool、bytes这些类型使用方式如上，在函数参数处声明使用。</p>
<h3 id="嵌套类型"><a href="#嵌套类型" class="headerlink" title="嵌套类型"></a>嵌套类型</h3><p>嵌套类型指该类型内部可以包含其他类型，如常见的 dict、list、set 和 tuple等，这些类型的内部可以拥有其他类型，甚至于这些类型可以相互嵌套，如列表于字典的混合嵌套就是非常常见的情况。</p>
<blockquote>
<p>由于嵌套类型在python语言中不能够直接被识别，因此需要导入一个特定的库才可以，即:<code>tying</code></p>
</blockquote>
<p>嵌套类型的使用方式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">funcname</span>(<span class="params">param: <span class="type">List</span>[<span class="built_in">str</span>]</span>):</span><br><span class="line">    <span class="built_in">print</span>(param.append(<span class="string">&#x27;&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>其他嵌套类型以此类推。</p>
<h3 id="以类作为类型提示"><a href="#以类作为类型提示" class="headerlink" title="以类作为类型提示"></a>以类作为类型提示</h3><p>通过上面的案例，我们已将能够实现较多的数据类型提示功能了，但是当遇到一些复杂情况的时候，比如需要复杂的数据校验，或者涉及到需要多层嵌套的情况下，以前的简单数据类型已经完全不能够满足需求了，这个时候就需要类的出现了。</p>
<p>对于使用类来作为类型提示，需要引入一个特别的库即：<code>Pydantic</code>。这个库提供了丰富的类型提示的相关帮助，能够帮助开发者实现数据校验、数据限制、嵌套类型识别、密码安全验证、数据库操作模型等等。由于这是一个庞大的知识，我一时半会也阐述不完整，因此我附上两份文档：</p>
<p><a href="https://pydantic-docs.helpmanual.io/">https://pydantic-docs.helpmanual.io/</a>   </p>
<p><a href="https://blog.csdn.net/swinfans/article/details/89629641">https://blog.csdn.net/swinfans/article/details/89629641</a></p>
<p>同时附上几个从互联网上找到的几个案例：</p>
<p>配合函数使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel, Field</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Item</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    description: <span class="built_in">str</span> = Field(<span class="literal">None</span>, title=<span class="string">&quot;The description of the item&quot;</span>, max_length=<span class="number">300</span>)</span><br><span class="line">    price: <span class="built_in">float</span> = Field(..., gt=<span class="number">0</span>, description=<span class="string">&quot;The price must be greater than zero&quot;</span>)</span><br><span class="line">    tax: <span class="built_in">float</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">update_item</span>(<span class="params">item_id: <span class="built_in">int</span>, item: Item = Body(<span class="params">..., embed=<span class="literal">True</span></span>)</span>):</span><br><span class="line">    results = &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;item&quot;</span>: item&#125;</span><br><span class="line">    <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure>

<p>嵌套类型：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Union</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Gender</span>(<span class="built_in">str</span>, Enum):</span><br><span class="line">    man = <span class="string">&quot;man&quot;</span></span><br><span class="line">    women = <span class="string">&quot;women&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name : <span class="built_in">str</span></span><br><span class="line">    gender : Gender</span><br><span class="line">        </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Department</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name : <span class="built_in">str</span></span><br><span class="line">    lead : Person</span><br><span class="line">    cast : <span class="type">List</span>[Person]</span><br><span class="line">        </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Group</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    owner: Person</span><br><span class="line">    member_list: <span class="type">List</span>[Person] = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Company</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    owner: <span class="type">Union</span>[Person, Group]</span><br><span class="line">    regtime: date</span><br><span class="line">    department_list: <span class="type">List</span>[Department] = []</span><br></pre></td></tr></table></figure>

<p>数据校验：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel, ValidationError, validator</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoModel</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    friends: <span class="type">List</span>[<span class="built_in">int</span>] = []</span><br><span class="line">    books: <span class="type">List</span>[<span class="built_in">int</span>] = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># &#x27;*&#x27; 在这里是匹配任意字段，包含friends，books</span></span><br><span class="line"><span class="meta">    @validator(<span class="params"><span class="string">&#x27;*&#x27;</span>, pre=<span class="literal">True</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">split_str</span>(<span class="params">cls, v</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;如果传参是字符串，根据逗号切割成list&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(v, <span class="built_in">str</span>):</span><br><span class="line">            <span class="keyword">return</span> v.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"><span class="meta">    @validator(<span class="params"><span class="string">&#x27;books&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">books_greater_then_5</span>(<span class="params">cls, v</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断books数量少于5&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(v) &gt; <span class="number">5</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;books greater than 5&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1 = &#123;</span><br><span class="line">    <span class="string">&quot;friends&quot;</span>: [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    <span class="string">&quot;books&quot;</span>: <span class="string">&quot;3,4,5&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">d = DemoModel(**a1)</span><br><span class="line"><span class="built_in">print</span>(d)  <span class="comment"># friends=[2, 3, 4] books=[3, 4, 5]</span></span><br><span class="line"><span class="built_in">print</span>(d.<span class="built_in">dict</span>())  <span class="comment"># &#123;&#x27;friends&#x27;: [2, 3, 4], &#x27;books&#x27;: [3, 4, 5]&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>python提供的类型提示方法能够帮助使用者快速高效的去验证数据参数的合规性与安全性，保障数据传输在高效的同时兼顾安全性能，相比于其他的手动验证方式，这样的方式明显高效更多。也能使得文档具有更强的可读性，帮助开发者理解代码逻辑含义，提高编程效率。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
</search>
